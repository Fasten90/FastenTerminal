# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.39
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.
# This file is compatible with both classic and new-style classes.

from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_pyavrdbg_raw', [dirname(__file__)])
        except ImportError:
            import _pyavrdbg_raw
            return _pyavrdbg_raw
        if fp is not None:
            try:
                _mod = imp.load_module('_pyavrdbg_raw', fp, pathname, description)
            finally:
                fp.close()
                return _mod
    _pyavrdbg_raw = swig_import_helper()
    del swig_import_helper
else:
    import _pyavrdbg_raw
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


try:
    import weakref
    weakref_proxy = weakref.proxy
except:
    weakref_proxy = lambda x: x


class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _pyavrdbg_raw.delete_SwigPyIterator
    __del__ = lambda self : None;
    def value(self): return _pyavrdbg_raw.SwigPyIterator_value(self)
    def incr(self, n = 1): return _pyavrdbg_raw.SwigPyIterator_incr(self, n)
    def decr(self, n = 1): return _pyavrdbg_raw.SwigPyIterator_decr(self, n)
    def distance(self, *args): return _pyavrdbg_raw.SwigPyIterator_distance(self, *args)
    def equal(self, *args): return _pyavrdbg_raw.SwigPyIterator_equal(self, *args)
    def copy(self): return _pyavrdbg_raw.SwigPyIterator_copy(self)
    def next(self): return _pyavrdbg_raw.SwigPyIterator_next(self)
    def __next__(self): return _pyavrdbg_raw.SwigPyIterator___next__(self)
    def previous(self): return _pyavrdbg_raw.SwigPyIterator_previous(self)
    def advance(self, *args): return _pyavrdbg_raw.SwigPyIterator_advance(self, *args)
    def __eq__(self, *args): return _pyavrdbg_raw.SwigPyIterator___eq__(self, *args)
    def __ne__(self, *args): return _pyavrdbg_raw.SwigPyIterator___ne__(self, *args)
    def __iadd__(self, *args): return _pyavrdbg_raw.SwigPyIterator___iadd__(self, *args)
    def __isub__(self, *args): return _pyavrdbg_raw.SwigPyIterator___isub__(self, *args)
    def __add__(self, *args): return _pyavrdbg_raw.SwigPyIterator___add__(self, *args)
    def __sub__(self, *args): return _pyavrdbg_raw.SwigPyIterator___sub__(self, *args)
    def __iter__(self): return self
SwigPyIterator_swigregister = _pyavrdbg_raw.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

SHARED_PTR_DISOWN = _pyavrdbg_raw.SHARED_PTR_DISOWN
class vectorofuchar(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vectorofuchar, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vectorofuchar, name)
    __repr__ = _swig_repr
    def iterator(self): return _pyavrdbg_raw.vectorofuchar_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _pyavrdbg_raw.vectorofuchar___nonzero__(self)
    def __bool__(self): return _pyavrdbg_raw.vectorofuchar___bool__(self)
    def __len__(self): return _pyavrdbg_raw.vectorofuchar___len__(self)
    def pop(self): return _pyavrdbg_raw.vectorofuchar_pop(self)
    def __getslice__(self, *args): return _pyavrdbg_raw.vectorofuchar___getslice__(self, *args)
    def __setslice__(self, *args): return _pyavrdbg_raw.vectorofuchar___setslice__(self, *args)
    def __delslice__(self, *args): return _pyavrdbg_raw.vectorofuchar___delslice__(self, *args)
    def __delitem__(self, *args): return _pyavrdbg_raw.vectorofuchar___delitem__(self, *args)
    def __getitem__(self, *args): return _pyavrdbg_raw.vectorofuchar___getitem__(self, *args)
    def __setitem__(self, *args): return _pyavrdbg_raw.vectorofuchar___setitem__(self, *args)
    def append(self, *args): return _pyavrdbg_raw.vectorofuchar_append(self, *args)
    def empty(self): return _pyavrdbg_raw.vectorofuchar_empty(self)
    def size(self): return _pyavrdbg_raw.vectorofuchar_size(self)
    def clear(self): return _pyavrdbg_raw.vectorofuchar_clear(self)
    def swap(self, *args): return _pyavrdbg_raw.vectorofuchar_swap(self, *args)
    def get_allocator(self): return _pyavrdbg_raw.vectorofuchar_get_allocator(self)
    def begin(self): return _pyavrdbg_raw.vectorofuchar_begin(self)
    def end(self): return _pyavrdbg_raw.vectorofuchar_end(self)
    def rbegin(self): return _pyavrdbg_raw.vectorofuchar_rbegin(self)
    def rend(self): return _pyavrdbg_raw.vectorofuchar_rend(self)
    def pop_back(self): return _pyavrdbg_raw.vectorofuchar_pop_back(self)
    def erase(self, *args): return _pyavrdbg_raw.vectorofuchar_erase(self, *args)
    def __init__(self, *args): 
        this = _pyavrdbg_raw.new_vectorofuchar(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _pyavrdbg_raw.vectorofuchar_push_back(self, *args)
    def front(self): return _pyavrdbg_raw.vectorofuchar_front(self)
    def back(self): return _pyavrdbg_raw.vectorofuchar_back(self)
    def assign(self, *args): return _pyavrdbg_raw.vectorofuchar_assign(self, *args)
    def resize(self, *args): return _pyavrdbg_raw.vectorofuchar_resize(self, *args)
    def insert(self, *args): return _pyavrdbg_raw.vectorofuchar_insert(self, *args)
    def reserve(self, *args): return _pyavrdbg_raw.vectorofuchar_reserve(self, *args)
    def capacity(self): return _pyavrdbg_raw.vectorofuchar_capacity(self)
    __swig_destroy__ = _pyavrdbg_raw.delete_vectorofuchar
    __del__ = lambda self : None;
vectorofuchar_swigregister = _pyavrdbg_raw.vectorofuchar_swigregister
vectorofuchar_swigregister(vectorofuchar)

class vectorofulong(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vectorofulong, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vectorofulong, name)
    __repr__ = _swig_repr
    def iterator(self): return _pyavrdbg_raw.vectorofulong_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _pyavrdbg_raw.vectorofulong___nonzero__(self)
    def __bool__(self): return _pyavrdbg_raw.vectorofulong___bool__(self)
    def __len__(self): return _pyavrdbg_raw.vectorofulong___len__(self)
    def pop(self): return _pyavrdbg_raw.vectorofulong_pop(self)
    def __getslice__(self, *args): return _pyavrdbg_raw.vectorofulong___getslice__(self, *args)
    def __setslice__(self, *args): return _pyavrdbg_raw.vectorofulong___setslice__(self, *args)
    def __delslice__(self, *args): return _pyavrdbg_raw.vectorofulong___delslice__(self, *args)
    def __delitem__(self, *args): return _pyavrdbg_raw.vectorofulong___delitem__(self, *args)
    def __getitem__(self, *args): return _pyavrdbg_raw.vectorofulong___getitem__(self, *args)
    def __setitem__(self, *args): return _pyavrdbg_raw.vectorofulong___setitem__(self, *args)
    def append(self, *args): return _pyavrdbg_raw.vectorofulong_append(self, *args)
    def empty(self): return _pyavrdbg_raw.vectorofulong_empty(self)
    def size(self): return _pyavrdbg_raw.vectorofulong_size(self)
    def clear(self): return _pyavrdbg_raw.vectorofulong_clear(self)
    def swap(self, *args): return _pyavrdbg_raw.vectorofulong_swap(self, *args)
    def get_allocator(self): return _pyavrdbg_raw.vectorofulong_get_allocator(self)
    def begin(self): return _pyavrdbg_raw.vectorofulong_begin(self)
    def end(self): return _pyavrdbg_raw.vectorofulong_end(self)
    def rbegin(self): return _pyavrdbg_raw.vectorofulong_rbegin(self)
    def rend(self): return _pyavrdbg_raw.vectorofulong_rend(self)
    def pop_back(self): return _pyavrdbg_raw.vectorofulong_pop_back(self)
    def erase(self, *args): return _pyavrdbg_raw.vectorofulong_erase(self, *args)
    def __init__(self, *args): 
        this = _pyavrdbg_raw.new_vectorofulong(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _pyavrdbg_raw.vectorofulong_push_back(self, *args)
    def front(self): return _pyavrdbg_raw.vectorofulong_front(self)
    def back(self): return _pyavrdbg_raw.vectorofulong_back(self)
    def assign(self, *args): return _pyavrdbg_raw.vectorofulong_assign(self, *args)
    def resize(self, *args): return _pyavrdbg_raw.vectorofulong_resize(self, *args)
    def insert(self, *args): return _pyavrdbg_raw.vectorofulong_insert(self, *args)
    def reserve(self, *args): return _pyavrdbg_raw.vectorofulong_reserve(self, *args)
    def capacity(self): return _pyavrdbg_raw.vectorofulong_capacity(self)
    __swig_destroy__ = _pyavrdbg_raw.delete_vectorofulong
    __del__ = lambda self : None;
vectorofulong_swigregister = _pyavrdbg_raw.vectorofulong_swigregister
vectorofulong_swigregister(vectorofulong)

class vectorofboostuint32(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vectorofboostuint32, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vectorofboostuint32, name)
    __repr__ = _swig_repr
    def iterator(self): return _pyavrdbg_raw.vectorofboostuint32_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _pyavrdbg_raw.vectorofboostuint32___nonzero__(self)
    def __bool__(self): return _pyavrdbg_raw.vectorofboostuint32___bool__(self)
    def __len__(self): return _pyavrdbg_raw.vectorofboostuint32___len__(self)
    def pop(self): return _pyavrdbg_raw.vectorofboostuint32_pop(self)
    def __getslice__(self, *args): return _pyavrdbg_raw.vectorofboostuint32___getslice__(self, *args)
    def __setslice__(self, *args): return _pyavrdbg_raw.vectorofboostuint32___setslice__(self, *args)
    def __delslice__(self, *args): return _pyavrdbg_raw.vectorofboostuint32___delslice__(self, *args)
    def __delitem__(self, *args): return _pyavrdbg_raw.vectorofboostuint32___delitem__(self, *args)
    def __getitem__(self, *args): return _pyavrdbg_raw.vectorofboostuint32___getitem__(self, *args)
    def __setitem__(self, *args): return _pyavrdbg_raw.vectorofboostuint32___setitem__(self, *args)
    def append(self, *args): return _pyavrdbg_raw.vectorofboostuint32_append(self, *args)
    def empty(self): return _pyavrdbg_raw.vectorofboostuint32_empty(self)
    def size(self): return _pyavrdbg_raw.vectorofboostuint32_size(self)
    def clear(self): return _pyavrdbg_raw.vectorofboostuint32_clear(self)
    def swap(self, *args): return _pyavrdbg_raw.vectorofboostuint32_swap(self, *args)
    def get_allocator(self): return _pyavrdbg_raw.vectorofboostuint32_get_allocator(self)
    def begin(self): return _pyavrdbg_raw.vectorofboostuint32_begin(self)
    def end(self): return _pyavrdbg_raw.vectorofboostuint32_end(self)
    def rbegin(self): return _pyavrdbg_raw.vectorofboostuint32_rbegin(self)
    def rend(self): return _pyavrdbg_raw.vectorofboostuint32_rend(self)
    def pop_back(self): return _pyavrdbg_raw.vectorofboostuint32_pop_back(self)
    def erase(self, *args): return _pyavrdbg_raw.vectorofboostuint32_erase(self, *args)
    def __init__(self, *args): 
        this = _pyavrdbg_raw.new_vectorofboostuint32(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _pyavrdbg_raw.vectorofboostuint32_push_back(self, *args)
    def front(self): return _pyavrdbg_raw.vectorofboostuint32_front(self)
    def back(self): return _pyavrdbg_raw.vectorofboostuint32_back(self)
    def assign(self, *args): return _pyavrdbg_raw.vectorofboostuint32_assign(self, *args)
    def resize(self, *args): return _pyavrdbg_raw.vectorofboostuint32_resize(self, *args)
    def insert(self, *args): return _pyavrdbg_raw.vectorofboostuint32_insert(self, *args)
    def reserve(self, *args): return _pyavrdbg_raw.vectorofboostuint32_reserve(self, *args)
    def capacity(self): return _pyavrdbg_raw.vectorofboostuint32_capacity(self)
    __swig_destroy__ = _pyavrdbg_raw.delete_vectorofboostuint32
    __del__ = lambda self : None;
vectorofboostuint32_swigregister = _pyavrdbg_raw.vectorofboostuint32_swigregister
vectorofboostuint32_swigregister(vectorofboostuint32)

class mapofstringstring(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, mapofstringstring, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, mapofstringstring, name)
    __repr__ = _swig_repr
    def iterator(self): return _pyavrdbg_raw.mapofstringstring_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _pyavrdbg_raw.mapofstringstring___nonzero__(self)
    def __bool__(self): return _pyavrdbg_raw.mapofstringstring___bool__(self)
    def __len__(self): return _pyavrdbg_raw.mapofstringstring___len__(self)
    def __getitem__(self, *args): return _pyavrdbg_raw.mapofstringstring___getitem__(self, *args)
    def __delitem__(self, *args): return _pyavrdbg_raw.mapofstringstring___delitem__(self, *args)
    def has_key(self, *args): return _pyavrdbg_raw.mapofstringstring_has_key(self, *args)
    def keys(self): return _pyavrdbg_raw.mapofstringstring_keys(self)
    def values(self): return _pyavrdbg_raw.mapofstringstring_values(self)
    def items(self): return _pyavrdbg_raw.mapofstringstring_items(self)
    def __contains__(self, *args): return _pyavrdbg_raw.mapofstringstring___contains__(self, *args)
    def key_iterator(self): return _pyavrdbg_raw.mapofstringstring_key_iterator(self)
    def value_iterator(self): return _pyavrdbg_raw.mapofstringstring_value_iterator(self)
    def __iter__(self): return self.key_iterator()
    def iterkeys(self): return self.key_iterator()
    def itervalues(self): return self.value_iterator()
    def iteritems(self): return self.iterator()
    def __setitem__(self, *args): return _pyavrdbg_raw.mapofstringstring___setitem__(self, *args)
    def __init__(self, *args): 
        this = _pyavrdbg_raw.new_mapofstringstring(*args)
        try: self.this.append(this)
        except: self.this = this
    def empty(self): return _pyavrdbg_raw.mapofstringstring_empty(self)
    def size(self): return _pyavrdbg_raw.mapofstringstring_size(self)
    def clear(self): return _pyavrdbg_raw.mapofstringstring_clear(self)
    def swap(self, *args): return _pyavrdbg_raw.mapofstringstring_swap(self, *args)
    def get_allocator(self): return _pyavrdbg_raw.mapofstringstring_get_allocator(self)
    def begin(self): return _pyavrdbg_raw.mapofstringstring_begin(self)
    def end(self): return _pyavrdbg_raw.mapofstringstring_end(self)
    def rbegin(self): return _pyavrdbg_raw.mapofstringstring_rbegin(self)
    def rend(self): return _pyavrdbg_raw.mapofstringstring_rend(self)
    def count(self, *args): return _pyavrdbg_raw.mapofstringstring_count(self, *args)
    def erase(self, *args): return _pyavrdbg_raw.mapofstringstring_erase(self, *args)
    def find(self, *args): return _pyavrdbg_raw.mapofstringstring_find(self, *args)
    def lower_bound(self, *args): return _pyavrdbg_raw.mapofstringstring_lower_bound(self, *args)
    def upper_bound(self, *args): return _pyavrdbg_raw.mapofstringstring_upper_bound(self, *args)
    __swig_destroy__ = _pyavrdbg_raw.delete_mapofstringstring
    __del__ = lambda self : None;
mapofstringstring_swigregister = _pyavrdbg_raw.mapofstringstring_swigregister
mapofstringstring_swigregister(mapofstringstring)

OTHER = _pyavrdbg_raw.OTHER
JSON_SYNTAX = _pyavrdbg_raw.JSON_SYNTAX
PROTOCOL = _pyavrdbg_raw.PROTOCOL
BUFFER_OVERFLOW = _pyavrdbg_raw.BUFFER_OVERFLOW
CHANNEL_CLOSED = _pyavrdbg_raw.CHANNEL_CLOSED
COMMAND_CANCELLED = _pyavrdbg_raw.COMMAND_CANCELLED
UNKNOWN_PEER = _pyavrdbg_raw.UNKNOWN_PEER
BASE64 = _pyavrdbg_raw.BASE64
END_OF_FILE = _pyavrdbg_raw.END_OF_FILE
ALREADY_STOPPED = _pyavrdbg_raw.ALREADY_STOPPED
ALREADY_EXITED = _pyavrdbg_raw.ALREADY_EXITED
ALREADY_RUNNING = _pyavrdbg_raw.ALREADY_RUNNING
ALREADY_ATTACHED = _pyavrdbg_raw.ALREADY_ATTACHED
IS_RUNNING = _pyavrdbg_raw.IS_RUNNING
INV_DATA_SIZE = _pyavrdbg_raw.INV_DATA_SIZE
INV_CONTEXT = _pyavrdbg_raw.INV_CONTEXT
INV_ADDRESS = _pyavrdbg_raw.INV_ADDRESS
INV_EXPRESSION = _pyavrdbg_raw.INV_EXPRESSION
INV_FORMAT = _pyavrdbg_raw.INV_FORMAT
INV_NUMBER = _pyavrdbg_raw.INV_NUMBER
INV_DWARF = _pyavrdbg_raw.INV_DWARF
SYM_NOT_FOUND = _pyavrdbg_raw.SYM_NOT_FOUND
UNSUPPORTED = _pyavrdbg_raw.UNSUPPORTED
ALREADY_CONNECTED = _pyavrdbg_raw.ALREADY_CONNECTED
ALREADY_DISCONNECTED = _pyavrdbg_raw.ALREADY_DISCONNECTED
NOT_AN_ERROR = _pyavrdbg_raw.NOT_AN_ERROR
PEER_NOT_RESPONDING = _pyavrdbg_raw.PEER_NOT_RESPONDING
PEER_CLOSED_CHANNEL = _pyavrdbg_raw.PEER_CLOSED_CHANNEL
MALFORMED_REPLY = _pyavrdbg_raw.MALFORMED_REPLY
JSON_SYNTAX_ERROR = _pyavrdbg_raw.JSON_SYNTAX_ERROR
UNRECOGNIZED_COMMAND = _pyavrdbg_raw.UNRECOGNIZED_COMMAND
UNRECOGNIZED_SERVICE = _pyavrdbg_raw.UNRECOGNIZED_SERVICE
FAILED_TO_ATTACH_TO_TOOL = _pyavrdbg_raw.FAILED_TO_ATTACH_TO_TOOL
INVALID_ADDRESS = _pyavrdbg_raw.INVALID_ADDRESS
INVALID_RANGE = _pyavrdbg_raw.INVALID_RANGE
EINVALID_ID = _pyavrdbg_raw.EINVALID_ID
INVALID_ATTRIBUTE = _pyavrdbg_raw.INVALID_ATTRIBUTE
NO_SOURCE_FOR_ADDRESS = _pyavrdbg_raw.NO_SOURCE_FOR_ADDRESS
NO_SOURCE_FILES = _pyavrdbg_raw.NO_SOURCE_FILES
FAILED_READING_DEBUG_INFORMATION = _pyavrdbg_raw.FAILED_READING_DEBUG_INFORMATION
UNKNOWN_SYMBOL = _pyavrdbg_raw.UNKNOWN_SYMBOL
SYMBOL_NOT_IN_SCOPE = _pyavrdbg_raw.SYMBOL_NOT_IN_SCOPE
FAILED_TO_SET_PROGRAM_BREAKPOINT = _pyavrdbg_raw.FAILED_TO_SET_PROGRAM_BREAKPOINT
SYMBOL_LOCATION_NOT_FOUND = _pyavrdbg_raw.SYMBOL_LOCATION_NOT_FOUND
ALREADY_STARTED = _pyavrdbg_raw.ALREADY_STARTED
FILE_NOTFOUND = _pyavrdbg_raw.FILE_NOTFOUND
UNABLE_TO_OPEN_FILE = _pyavrdbg_raw.UNABLE_TO_OPEN_FILE
INVALID_DATA = _pyavrdbg_raw.INVALID_DATA
HEXFILE_ERROR = _pyavrdbg_raw.HEXFILE_ERROR
CHECKSUM_ERROR = _pyavrdbg_raw.CHECKSUM_ERROR
SIZE_ERROR = _pyavrdbg_raw.SIZE_ERROR
FILE_ERROR = _pyavrdbg_raw.FILE_ERROR
TCF_PROTOCOL = _pyavrdbg_raw.TCF_PROTOCOL
INVALID_TARGET_STATE = _pyavrdbg_raw.INVALID_TARGET_STATE
INVALID_DEVICE = _pyavrdbg_raw.INVALID_DEVICE
UNKNOWN_SESSION_TYPE = _pyavrdbg_raw.UNKNOWN_SESSION_TYPE
INTERNAL_ERROR = _pyavrdbg_raw.INTERNAL_ERROR
INVALID_CONTEXT_ID = _pyavrdbg_raw.INVALID_CONTEXT_ID
NOT_INITIALIZED = _pyavrdbg_raw.NOT_INITIALIZED
NOT_SUPPORTED = _pyavrdbg_raw.NOT_SUPPORTED
UNKNOWN_ERROR = _pyavrdbg_raw.UNKNOWN_ERROR
LIBDWARF_ERROR = _pyavrdbg_raw.LIBDWARF_ERROR
INVALID_ARGUMENT = _pyavrdbg_raw.INVALID_ARGUMENT
NO_MODULE_FOUND = _pyavrdbg_raw.NO_MODULE_FOUND
INVALID_OBJECTFILE = _pyavrdbg_raw.INVALID_OBJECTFILE
ENO_DATA = _pyavrdbg_raw.ENO_DATA
FAILED_TO_SET_BREAKPOINT = _pyavrdbg_raw.FAILED_TO_SET_BREAKPOINT
FAILED_TO_SET_DATA_BREAKPOINT = _pyavrdbg_raw.FAILED_TO_SET_DATA_BREAKPOINT
FAILED_TO_REMOVE_DATA_BREAKPOINT = _pyavrdbg_raw.FAILED_TO_REMOVE_DATA_BREAKPOINT
FAILED_TO_REMOVE_PROGRAM_BREAKPOINT = _pyavrdbg_raw.FAILED_TO_REMOVE_PROGRAM_BREAKPOINT
INVALID_CONNNECTION = _pyavrdbg_raw.INVALID_CONNNECTION
TOOL_ERROR = _pyavrdbg_raw.TOOL_ERROR
DEVICE_DESCRIPTION_FILE_CONTENT_ERROR = _pyavrdbg_raw.DEVICE_DESCRIPTION_FILE_CONTENT_ERROR
MISSING_XML_INFORMATION = _pyavrdbg_raw.MISSING_XML_INFORMATION
SECURITY_BIT_ON = _pyavrdbg_raw.SECURITY_BIT_ON
OPERATION_TIMED_OUT = _pyavrdbg_raw.OPERATION_TIMED_OUT
VERIFY_ERROR = _pyavrdbg_raw.VERIFY_ERROR
FIRMWARE_NOT_UPDATED = _pyavrdbg_raw.FIRMWARE_NOT_UPDATED
UPGRADEMODE = _pyavrdbg_raw.UPGRADEMODE
FAILED_TO_SET_TRACEPOINT = _pyavrdbg_raw.FAILED_TO_SET_TRACEPOINT
SIM_INCOMPATIBLE_MODEL_VERSION = _pyavrdbg_raw.SIM_INCOMPATIBLE_MODEL_VERSION
SIM_LICENSE_ERROR = _pyavrdbg_raw.SIM_LICENSE_ERROR
SEV_OK = _pyavrdbg_raw.SEV_OK
SEV_WARNING = _pyavrdbg_raw.SEV_WARNING
SEV_ERROR = _pyavrdbg_raw.SEV_ERROR
SEV_CANCEL = _pyavrdbg_raw.SEV_CANCEL
SEV_INFO = _pyavrdbg_raw.SEV_INFO
class IStatus(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IStatus, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IStatus, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def getComponent(self): return _pyavrdbg_raw.IStatus_getComponent(self)
    def getSeverity(self): return _pyavrdbg_raw.IStatus_getSeverity(self)
    def getErrorCode(self): return _pyavrdbg_raw.IStatus_getErrorCode(self)
    def getMessage(self): return _pyavrdbg_raw.IStatus_getMessage(self)
    def getChild(self): return _pyavrdbg_raw.IStatus_getChild(self)
    def setChild(self, *args): return _pyavrdbg_raw.IStatus_setChild(self, *args)
    def isOk(self): return _pyavrdbg_raw.IStatus_isOk(self)
    def matchesSeverity(self, *args): return _pyavrdbg_raw.IStatus_matchesSeverity(self, *args)
    def toJson(self): return _pyavrdbg_raw.IStatus_toJson(self)
    __swig_destroy__ = _pyavrdbg_raw.delete_IStatus
    __del__ = lambda self : None;
IStatus_swigregister = _pyavrdbg_raw.IStatus_swigregister
IStatus_swigregister(IStatus)

class Packet(vectorofuchar):
    __swig_setmethods__ = {}
    for _s in [vectorofuchar]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Packet, name, value)
    __swig_getmethods__ = {}
    for _s in [vectorofuchar]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Packet, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pyavrdbg_raw.new_Packet(*args)
        try: self.this.append(this)
        except: self.this = this
    def getBool(self, *args): return _pyavrdbg_raw.Packet_getBool(self, *args)
    def getByte(self, *args): return _pyavrdbg_raw.Packet_getByte(self, *args)
    def getLE16(self, *args): return _pyavrdbg_raw.Packet_getLE16(self, *args)
    def getBE16(self, *args): return _pyavrdbg_raw.Packet_getBE16(self, *args)
    def getLE32(self, *args): return _pyavrdbg_raw.Packet_getLE32(self, *args)
    def getBE32(self, *args): return _pyavrdbg_raw.Packet_getBE32(self, *args)
    def getLE36(self, *args): return _pyavrdbg_raw.Packet_getLE36(self, *args)
    def getBE36(self, *args): return _pyavrdbg_raw.Packet_getBE36(self, *args)
    def setBool(self, *args): return _pyavrdbg_raw.Packet_setBool(self, *args)
    def setByte(self, *args): return _pyavrdbg_raw.Packet_setByte(self, *args)
    def setLE16(self, *args): return _pyavrdbg_raw.Packet_setLE16(self, *args)
    def setBE16(self, *args): return _pyavrdbg_raw.Packet_setBE16(self, *args)
    def setLE32(self, *args): return _pyavrdbg_raw.Packet_setLE32(self, *args)
    def setBE32(self, *args): return _pyavrdbg_raw.Packet_setBE32(self, *args)
    def setLE36(self, *args): return _pyavrdbg_raw.Packet_setLE36(self, *args)
    def setBE36(self, *args): return _pyavrdbg_raw.Packet_setBE36(self, *args)
    def addBool(self, *args): return _pyavrdbg_raw.Packet_addBool(self, *args)
    def addByte(self, *args): return _pyavrdbg_raw.Packet_addByte(self, *args)
    def addLE16(self, *args): return _pyavrdbg_raw.Packet_addLE16(self, *args)
    def addBE16(self, *args): return _pyavrdbg_raw.Packet_addBE16(self, *args)
    def addLE32(self, *args): return _pyavrdbg_raw.Packet_addLE32(self, *args)
    def addBE32(self, *args): return _pyavrdbg_raw.Packet_addBE32(self, *args)
    def addLE36(self, *args): return _pyavrdbg_raw.Packet_addLE36(self, *args)
    def addBE36(self, *args): return _pyavrdbg_raw.Packet_addBE36(self, *args)
    def getString(self, *args): return _pyavrdbg_raw.Packet_getString(self, *args)
    def getCString(self, *args): return _pyavrdbg_raw.Packet_getCString(self, *args)
    def append(self, *args): return _pyavrdbg_raw.Packet_append(self, *args)
    def __eq__(self, *args): return _pyavrdbg_raw.Packet___eq__(self, *args)
    __swig_destroy__ = _pyavrdbg_raw.delete_Packet
    __del__ = lambda self : None;
Packet_swigregister = _pyavrdbg_raw.Packet_swigregister
Packet_swigregister(Packet)

class Status(IStatus):
    __swig_setmethods__ = {}
    for _s in [IStatus]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Status, name, value)
    __swig_getmethods__ = {}
    for _s in [IStatus]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Status, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _pyavrdbg_raw.delete_Status
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = _pyavrdbg_raw.new_Status(*args)
        try: self.this.append(this)
        except: self.this = this
    def setFields(self, *args): return _pyavrdbg_raw.Status_setFields(self, *args)
    def setError(self, *args): return _pyavrdbg_raw.Status_setError(self, *args)
    def setWarning(self, *args): return _pyavrdbg_raw.Status_setWarning(self, *args)
    def setInfo(self, *args): return _pyavrdbg_raw.Status_setInfo(self, *args)
    def getSeverity(self): return _pyavrdbg_raw.Status_getSeverity(self)
    def getComponent(self): return _pyavrdbg_raw.Status_getComponent(self)
    def getErrorCode(self): return _pyavrdbg_raw.Status_getErrorCode(self)
    def getMessage(self): return _pyavrdbg_raw.Status_getMessage(self)
    def setChild(self, *args): return _pyavrdbg_raw.Status_setChild(self, *args)
    def getChild(self): return _pyavrdbg_raw.Status_getChild(self)
    def isOk(self, *args): return _pyavrdbg_raw.Status_isOk(self, *args)
    def reset(self): return _pyavrdbg_raw.Status_reset(self)
    def matchesSeverity(self, *args): return _pyavrdbg_raw.Status_matchesSeverity(self, *args)
    def toJson(self): return _pyavrdbg_raw.Status_toJson(self)
    def setServiceName(self, *args): return _pyavrdbg_raw.Status_setServiceName(self, *args)
Status_swigregister = _pyavrdbg_raw.Status_swigregister
Status_swigregister(Status)

class CoreException(Exception):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CoreException, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CoreException, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pyavrdbg_raw.new_CoreException(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyavrdbg_raw.delete_CoreException
    __del__ = lambda self : None;
    def what(self): return _pyavrdbg_raw.CoreException_what(self)
    def getStatus(self): return _pyavrdbg_raw.CoreException_getStatus(self)
    __swig_getmethods__["createAndThrow"] = lambda x: _pyavrdbg_raw.CoreException_createAndThrow
CoreException_swigregister = _pyavrdbg_raw.CoreException_swigregister
CoreException_swigregister(CoreException)

def CoreException_createAndThrow(*args):
  return _pyavrdbg_raw.CoreException_createAndThrow(*args)
CoreException_createAndThrow = _pyavrdbg_raw.CoreException_createAndThrow

class GenericError(CoreException):
    __swig_setmethods__ = {}
    for _s in [CoreException]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GenericError, name, value)
    __swig_getmethods__ = {}
    for _s in [CoreException]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, GenericError, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pyavrdbg_raw.new_GenericError(*args)
        try: self.this.append(this)
        except: self.this = this
    def __eq__(self, *args): return _pyavrdbg_raw.GenericError___eq__(self, *args)
    def __ne__(self, *args): return _pyavrdbg_raw.GenericError___ne__(self, *args)
    __swig_destroy__ = _pyavrdbg_raw.delete_GenericError
    __del__ = lambda self : None;
    def add(self, *args): return _pyavrdbg_raw.GenericError_add(self, *args)
    def getString(self): return _pyavrdbg_raw.GenericError_getString(self)
    def what(self): return _pyavrdbg_raw.GenericError_what(self)
    def getExitCode(self): return _pyavrdbg_raw.GenericError_getExitCode(self)
    def clear(self): return _pyavrdbg_raw.GenericError_clear(self)
    def __str__(self): return _pyavrdbg_raw.GenericError___str__(self)
GenericError_swigregister = _pyavrdbg_raw.GenericError_swigregister
GenericError_swigregister(GenericError)

class ResponseError(GenericError):
    __swig_setmethods__ = {}
    for _s in [GenericError]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ResponseError, name, value)
    __swig_getmethods__ = {}
    for _s in [GenericError]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ResponseError, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pyavrdbg_raw.new_ResponseError(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyavrdbg_raw.delete_ResponseError
    __del__ = lambda self : None;
    def __eq__(self, *args): return _pyavrdbg_raw.ResponseError___eq__(self, *args)
    def __ne__(self, *args): return _pyavrdbg_raw.ResponseError___ne__(self, *args)
    def getResponseCode(self): return _pyavrdbg_raw.ResponseError_getResponseCode(self)
    def getResponse(self): return _pyavrdbg_raw.ResponseError_getResponse(self)
ResponseError_swigregister = _pyavrdbg_raw.ResponseError_swigregister
ResponseError_swigregister(ResponseError)

class UsbDisconnectedError(GenericError):
    __swig_setmethods__ = {}
    for _s in [GenericError]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, UsbDisconnectedError, name, value)
    __swig_getmethods__ = {}
    for _s in [GenericError]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, UsbDisconnectedError, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pyavrdbg_raw.new_UsbDisconnectedError()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyavrdbg_raw.delete_UsbDisconnectedError
    __del__ = lambda self : None;
UsbDisconnectedError_swigregister = _pyavrdbg_raw.UsbDisconnectedError_swigregister
UsbDisconnectedError_swigregister(UsbDisconnectedError)

class CmsisStopPollingError(GenericError):
    __swig_setmethods__ = {}
    for _s in [GenericError]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CmsisStopPollingError, name, value)
    __swig_getmethods__ = {}
    for _s in [GenericError]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CmsisStopPollingError, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pyavrdbg_raw.new_CmsisStopPollingError()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyavrdbg_raw.delete_CmsisStopPollingError
    __del__ = lambda self : None;
CmsisStopPollingError_swigregister = _pyavrdbg_raw.CmsisStopPollingError_swigregister
CmsisStopPollingError_swigregister(CmsisStopPollingError)

class LockedFlashError(GenericError):
    __swig_setmethods__ = {}
    for _s in [GenericError]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LockedFlashError, name, value)
    __swig_getmethods__ = {}
    for _s in [GenericError]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, LockedFlashError, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pyavrdbg_raw.new_LockedFlashError()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyavrdbg_raw.delete_LockedFlashError
    __del__ = lambda self : None;
LockedFlashError_swigregister = _pyavrdbg_raw.LockedFlashError_swigregister
LockedFlashError_swigregister(LockedFlashError)

class MemoryError(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MemoryError, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MemoryError, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pyavrdbg_raw.new_MemoryError()
        try: self.this.append(this)
        except: self.this = this
    def getStatus(self, *args): return _pyavrdbg_raw.MemoryError_getStatus(self, *args)
    def allLocationsAreValid(self, *args): return _pyavrdbg_raw.MemoryError_allLocationsAreValid(self, *args)
    def getMessage(self, *args): return _pyavrdbg_raw.MemoryError_getMessage(self, *args)
    def setStatus(self, *args): return _pyavrdbg_raw.MemoryError_setStatus(self, *args)
    def isOk(self): return _pyavrdbg_raw.MemoryError_isOk(self)
    __swig_getmethods__["SWIGSharedPtrUpcast"] = lambda x: _pyavrdbg_raw.MemoryError_SWIGSharedPtrUpcast
    if _newclass:SWIGSharedPtrUpcast = staticmethod(_pyavrdbg_raw.MemoryError_SWIGSharedPtrUpcast)
    __swig_destroy__ = _pyavrdbg_raw.delete_MemoryError
    __del__ = lambda self : None;
MemoryError_swigregister = _pyavrdbg_raw.MemoryError_swigregister
MemoryError_swigregister(MemoryError)

def MemoryError_SWIGSharedPtrUpcast(*args):
  return _pyavrdbg_raw.MemoryError_SWIGSharedPtrUpcast(*args)
MemoryError_SWIGSharedPtrUpcast = _pyavrdbg_raw.MemoryError_SWIGSharedPtrUpcast

class vectorofstring(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vectorofstring, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vectorofstring, name)
    __repr__ = _swig_repr
    def iterator(self): return _pyavrdbg_raw.vectorofstring_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _pyavrdbg_raw.vectorofstring___nonzero__(self)
    def __bool__(self): return _pyavrdbg_raw.vectorofstring___bool__(self)
    def __len__(self): return _pyavrdbg_raw.vectorofstring___len__(self)
    def pop(self): return _pyavrdbg_raw.vectorofstring_pop(self)
    def __getslice__(self, *args): return _pyavrdbg_raw.vectorofstring___getslice__(self, *args)
    def __setslice__(self, *args): return _pyavrdbg_raw.vectorofstring___setslice__(self, *args)
    def __delslice__(self, *args): return _pyavrdbg_raw.vectorofstring___delslice__(self, *args)
    def __delitem__(self, *args): return _pyavrdbg_raw.vectorofstring___delitem__(self, *args)
    def __getitem__(self, *args): return _pyavrdbg_raw.vectorofstring___getitem__(self, *args)
    def __setitem__(self, *args): return _pyavrdbg_raw.vectorofstring___setitem__(self, *args)
    def append(self, *args): return _pyavrdbg_raw.vectorofstring_append(self, *args)
    def empty(self): return _pyavrdbg_raw.vectorofstring_empty(self)
    def size(self): return _pyavrdbg_raw.vectorofstring_size(self)
    def clear(self): return _pyavrdbg_raw.vectorofstring_clear(self)
    def swap(self, *args): return _pyavrdbg_raw.vectorofstring_swap(self, *args)
    def get_allocator(self): return _pyavrdbg_raw.vectorofstring_get_allocator(self)
    def begin(self): return _pyavrdbg_raw.vectorofstring_begin(self)
    def end(self): return _pyavrdbg_raw.vectorofstring_end(self)
    def rbegin(self): return _pyavrdbg_raw.vectorofstring_rbegin(self)
    def rend(self): return _pyavrdbg_raw.vectorofstring_rend(self)
    def pop_back(self): return _pyavrdbg_raw.vectorofstring_pop_back(self)
    def erase(self, *args): return _pyavrdbg_raw.vectorofstring_erase(self, *args)
    def __init__(self, *args): 
        this = _pyavrdbg_raw.new_vectorofstring(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _pyavrdbg_raw.vectorofstring_push_back(self, *args)
    def front(self): return _pyavrdbg_raw.vectorofstring_front(self)
    def back(self): return _pyavrdbg_raw.vectorofstring_back(self)
    def assign(self, *args): return _pyavrdbg_raw.vectorofstring_assign(self, *args)
    def resize(self, *args): return _pyavrdbg_raw.vectorofstring_resize(self, *args)
    def insert(self, *args): return _pyavrdbg_raw.vectorofstring_insert(self, *args)
    def reserve(self, *args): return _pyavrdbg_raw.vectorofstring_reserve(self, *args)
    def capacity(self): return _pyavrdbg_raw.vectorofstring_capacity(self)
    __swig_destroy__ = _pyavrdbg_raw.delete_vectorofstring
    __del__ = lambda self : None;
vectorofstring_swigregister = _pyavrdbg_raw.vectorofstring_swigregister
vectorofstring_swigregister(vectorofstring)

class vectorofstimuliproviders(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vectorofstimuliproviders, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vectorofstimuliproviders, name)
    __repr__ = _swig_repr
    def iterator(self): return _pyavrdbg_raw.vectorofstimuliproviders_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _pyavrdbg_raw.vectorofstimuliproviders___nonzero__(self)
    def __bool__(self): return _pyavrdbg_raw.vectorofstimuliproviders___bool__(self)
    def __len__(self): return _pyavrdbg_raw.vectorofstimuliproviders___len__(self)
    def pop(self): return _pyavrdbg_raw.vectorofstimuliproviders_pop(self)
    def __getslice__(self, *args): return _pyavrdbg_raw.vectorofstimuliproviders___getslice__(self, *args)
    def __setslice__(self, *args): return _pyavrdbg_raw.vectorofstimuliproviders___setslice__(self, *args)
    def __delslice__(self, *args): return _pyavrdbg_raw.vectorofstimuliproviders___delslice__(self, *args)
    def __delitem__(self, *args): return _pyavrdbg_raw.vectorofstimuliproviders___delitem__(self, *args)
    def __getitem__(self, *args): return _pyavrdbg_raw.vectorofstimuliproviders___getitem__(self, *args)
    def __setitem__(self, *args): return _pyavrdbg_raw.vectorofstimuliproviders___setitem__(self, *args)
    def append(self, *args): return _pyavrdbg_raw.vectorofstimuliproviders_append(self, *args)
    def empty(self): return _pyavrdbg_raw.vectorofstimuliproviders_empty(self)
    def size(self): return _pyavrdbg_raw.vectorofstimuliproviders_size(self)
    def clear(self): return _pyavrdbg_raw.vectorofstimuliproviders_clear(self)
    def swap(self, *args): return _pyavrdbg_raw.vectorofstimuliproviders_swap(self, *args)
    def get_allocator(self): return _pyavrdbg_raw.vectorofstimuliproviders_get_allocator(self)
    def begin(self): return _pyavrdbg_raw.vectorofstimuliproviders_begin(self)
    def end(self): return _pyavrdbg_raw.vectorofstimuliproviders_end(self)
    def rbegin(self): return _pyavrdbg_raw.vectorofstimuliproviders_rbegin(self)
    def rend(self): return _pyavrdbg_raw.vectorofstimuliproviders_rend(self)
    def pop_back(self): return _pyavrdbg_raw.vectorofstimuliproviders_pop_back(self)
    def erase(self, *args): return _pyavrdbg_raw.vectorofstimuliproviders_erase(self, *args)
    def __init__(self, *args): 
        this = _pyavrdbg_raw.new_vectorofstimuliproviders(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _pyavrdbg_raw.vectorofstimuliproviders_push_back(self, *args)
    def front(self): return _pyavrdbg_raw.vectorofstimuliproviders_front(self)
    def back(self): return _pyavrdbg_raw.vectorofstimuliproviders_back(self)
    def assign(self, *args): return _pyavrdbg_raw.vectorofstimuliproviders_assign(self, *args)
    def resize(self, *args): return _pyavrdbg_raw.vectorofstimuliproviders_resize(self, *args)
    def insert(self, *args): return _pyavrdbg_raw.vectorofstimuliproviders_insert(self, *args)
    def reserve(self, *args): return _pyavrdbg_raw.vectorofstimuliproviders_reserve(self, *args)
    def capacity(self): return _pyavrdbg_raw.vectorofstimuliproviders_capacity(self)
    __swig_destroy__ = _pyavrdbg_raw.delete_vectorofstimuliproviders
    __del__ = lambda self : None;
vectorofstimuliproviders_swigregister = _pyavrdbg_raw.vectorofstimuliproviders_swigregister
vectorofstimuliproviders_swigregister(vectorofstimuliproviders)

class vectorofstimulators(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vectorofstimulators, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vectorofstimulators, name)
    __repr__ = _swig_repr
    def iterator(self): return _pyavrdbg_raw.vectorofstimulators_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _pyavrdbg_raw.vectorofstimulators___nonzero__(self)
    def __bool__(self): return _pyavrdbg_raw.vectorofstimulators___bool__(self)
    def __len__(self): return _pyavrdbg_raw.vectorofstimulators___len__(self)
    def pop(self): return _pyavrdbg_raw.vectorofstimulators_pop(self)
    def __getslice__(self, *args): return _pyavrdbg_raw.vectorofstimulators___getslice__(self, *args)
    def __setslice__(self, *args): return _pyavrdbg_raw.vectorofstimulators___setslice__(self, *args)
    def __delslice__(self, *args): return _pyavrdbg_raw.vectorofstimulators___delslice__(self, *args)
    def __delitem__(self, *args): return _pyavrdbg_raw.vectorofstimulators___delitem__(self, *args)
    def __getitem__(self, *args): return _pyavrdbg_raw.vectorofstimulators___getitem__(self, *args)
    def __setitem__(self, *args): return _pyavrdbg_raw.vectorofstimulators___setitem__(self, *args)
    def append(self, *args): return _pyavrdbg_raw.vectorofstimulators_append(self, *args)
    def empty(self): return _pyavrdbg_raw.vectorofstimulators_empty(self)
    def size(self): return _pyavrdbg_raw.vectorofstimulators_size(self)
    def clear(self): return _pyavrdbg_raw.vectorofstimulators_clear(self)
    def swap(self, *args): return _pyavrdbg_raw.vectorofstimulators_swap(self, *args)
    def get_allocator(self): return _pyavrdbg_raw.vectorofstimulators_get_allocator(self)
    def begin(self): return _pyavrdbg_raw.vectorofstimulators_begin(self)
    def end(self): return _pyavrdbg_raw.vectorofstimulators_end(self)
    def rbegin(self): return _pyavrdbg_raw.vectorofstimulators_rbegin(self)
    def rend(self): return _pyavrdbg_raw.vectorofstimulators_rend(self)
    def pop_back(self): return _pyavrdbg_raw.vectorofstimulators_pop_back(self)
    def erase(self, *args): return _pyavrdbg_raw.vectorofstimulators_erase(self, *args)
    def __init__(self, *args): 
        this = _pyavrdbg_raw.new_vectorofstimulators(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _pyavrdbg_raw.vectorofstimulators_push_back(self, *args)
    def front(self): return _pyavrdbg_raw.vectorofstimulators_front(self)
    def back(self): return _pyavrdbg_raw.vectorofstimulators_back(self)
    def assign(self, *args): return _pyavrdbg_raw.vectorofstimulators_assign(self, *args)
    def resize(self, *args): return _pyavrdbg_raw.vectorofstimulators_resize(self, *args)
    def insert(self, *args): return _pyavrdbg_raw.vectorofstimulators_insert(self, *args)
    def reserve(self, *args): return _pyavrdbg_raw.vectorofstimulators_reserve(self, *args)
    def capacity(self): return _pyavrdbg_raw.vectorofstimulators_capacity(self)
    __swig_destroy__ = _pyavrdbg_raw.delete_vectorofstimulators
    __del__ = lambda self : None;
vectorofstimulators_swigregister = _pyavrdbg_raw.vectorofstimulators_swigregister
vectorofstimulators_swigregister(vectorofstimulators)

class IObjectfileParser(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IObjectfileParser, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IObjectfileParser, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _pyavrdbg_raw.delete_IObjectfileParser
    __del__ = lambda self : None;
    def createSourceInformation(self): return _pyavrdbg_raw.IObjectfileParser_createSourceInformation(self)
    def createBinaryInformation(self): return _pyavrdbg_raw.IObjectfileParser_createBinaryInformation(self)
    def createSymbolInformation(self): return _pyavrdbg_raw.IObjectfileParser_createSymbolInformation(self)
    def createCompilerInformation(self): return _pyavrdbg_raw.IObjectfileParser_createCompilerInformation(self)
IObjectfileParser_swigregister = _pyavrdbg_raw.IObjectfileParser_swigregister
IObjectfileParser_swigregister(IObjectfileParser)

class vectorofcodeareas(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vectorofcodeareas, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vectorofcodeareas, name)
    __repr__ = _swig_repr
    def iterator(self): return _pyavrdbg_raw.vectorofcodeareas_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _pyavrdbg_raw.vectorofcodeareas___nonzero__(self)
    def __bool__(self): return _pyavrdbg_raw.vectorofcodeareas___bool__(self)
    def __len__(self): return _pyavrdbg_raw.vectorofcodeareas___len__(self)
    def pop(self): return _pyavrdbg_raw.vectorofcodeareas_pop(self)
    def __getslice__(self, *args): return _pyavrdbg_raw.vectorofcodeareas___getslice__(self, *args)
    def __setslice__(self, *args): return _pyavrdbg_raw.vectorofcodeareas___setslice__(self, *args)
    def __delslice__(self, *args): return _pyavrdbg_raw.vectorofcodeareas___delslice__(self, *args)
    def __delitem__(self, *args): return _pyavrdbg_raw.vectorofcodeareas___delitem__(self, *args)
    def __getitem__(self, *args): return _pyavrdbg_raw.vectorofcodeareas___getitem__(self, *args)
    def __setitem__(self, *args): return _pyavrdbg_raw.vectorofcodeareas___setitem__(self, *args)
    def append(self, *args): return _pyavrdbg_raw.vectorofcodeareas_append(self, *args)
    def empty(self): return _pyavrdbg_raw.vectorofcodeareas_empty(self)
    def size(self): return _pyavrdbg_raw.vectorofcodeareas_size(self)
    def clear(self): return _pyavrdbg_raw.vectorofcodeareas_clear(self)
    def swap(self, *args): return _pyavrdbg_raw.vectorofcodeareas_swap(self, *args)
    def get_allocator(self): return _pyavrdbg_raw.vectorofcodeareas_get_allocator(self)
    def begin(self): return _pyavrdbg_raw.vectorofcodeareas_begin(self)
    def end(self): return _pyavrdbg_raw.vectorofcodeareas_end(self)
    def rbegin(self): return _pyavrdbg_raw.vectorofcodeareas_rbegin(self)
    def rend(self): return _pyavrdbg_raw.vectorofcodeareas_rend(self)
    def pop_back(self): return _pyavrdbg_raw.vectorofcodeareas_pop_back(self)
    def erase(self, *args): return _pyavrdbg_raw.vectorofcodeareas_erase(self, *args)
    def __init__(self, *args): 
        this = _pyavrdbg_raw.new_vectorofcodeareas(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _pyavrdbg_raw.vectorofcodeareas_push_back(self, *args)
    def front(self): return _pyavrdbg_raw.vectorofcodeareas_front(self)
    def back(self): return _pyavrdbg_raw.vectorofcodeareas_back(self)
    def assign(self, *args): return _pyavrdbg_raw.vectorofcodeareas_assign(self, *args)
    def resize(self, *args): return _pyavrdbg_raw.vectorofcodeareas_resize(self, *args)
    def insert(self, *args): return _pyavrdbg_raw.vectorofcodeareas_insert(self, *args)
    def reserve(self, *args): return _pyavrdbg_raw.vectorofcodeareas_reserve(self, *args)
    def capacity(self): return _pyavrdbg_raw.vectorofcodeareas_capacity(self)
    __swig_destroy__ = _pyavrdbg_raw.delete_vectorofcodeareas
    __del__ = lambda self : None;
vectorofcodeareas_swigregister = _pyavrdbg_raw.vectorofcodeareas_swigregister
vectorofcodeareas_swigregister(vectorofcodeareas)

class CodeLocation(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CodeLocation, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CodeLocation, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pyavrdbg_raw.new_CodeLocation(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_setmethods__["line"] = _pyavrdbg_raw.CodeLocation_line_set
    __swig_getmethods__["line"] = _pyavrdbg_raw.CodeLocation_line_get
    if _newclass:line = _swig_property(_pyavrdbg_raw.CodeLocation_line_get, _pyavrdbg_raw.CodeLocation_line_set)
    __swig_setmethods__["column"] = _pyavrdbg_raw.CodeLocation_column_set
    __swig_getmethods__["column"] = _pyavrdbg_raw.CodeLocation_column_get
    if _newclass:column = _swig_property(_pyavrdbg_raw.CodeLocation_column_get, _pyavrdbg_raw.CodeLocation_column_set)
    __swig_destroy__ = _pyavrdbg_raw.delete_CodeLocation
    __del__ = lambda self : None;
CodeLocation_swigregister = _pyavrdbg_raw.CodeLocation_swigregister
CodeLocation_swigregister(CodeLocation)

class CodeArea(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CodeArea, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CodeArea, name)
    __repr__ = _swig_repr
    def __lt__(self, *args): return _pyavrdbg_raw.CodeArea___lt__(self, *args)
    def __eq__(self, *args): return _pyavrdbg_raw.CodeArea___eq__(self, *args)
    __swig_setmethods__["startLoc"] = _pyavrdbg_raw.CodeArea_startLoc_set
    __swig_getmethods__["startLoc"] = _pyavrdbg_raw.CodeArea_startLoc_get
    if _newclass:startLoc = _swig_property(_pyavrdbg_raw.CodeArea_startLoc_get, _pyavrdbg_raw.CodeArea_startLoc_set)
    __swig_setmethods__["endLoc"] = _pyavrdbg_raw.CodeArea_endLoc_set
    __swig_getmethods__["endLoc"] = _pyavrdbg_raw.CodeArea_endLoc_get
    if _newclass:endLoc = _swig_property(_pyavrdbg_raw.CodeArea_endLoc_get, _pyavrdbg_raw.CodeArea_endLoc_set)
    __swig_setmethods__["file"] = _pyavrdbg_raw.CodeArea_file_set
    __swig_getmethods__["file"] = _pyavrdbg_raw.CodeArea_file_get
    if _newclass:file = _swig_property(_pyavrdbg_raw.CodeArea_file_get, _pyavrdbg_raw.CodeArea_file_set)
    __swig_setmethods__["directory"] = _pyavrdbg_raw.CodeArea_directory_set
    __swig_getmethods__["directory"] = _pyavrdbg_raw.CodeArea_directory_get
    if _newclass:directory = _swig_property(_pyavrdbg_raw.CodeArea_directory_get, _pyavrdbg_raw.CodeArea_directory_set)
    __swig_setmethods__["startAddress"] = _pyavrdbg_raw.CodeArea_startAddress_set
    __swig_getmethods__["startAddress"] = _pyavrdbg_raw.CodeArea_startAddress_get
    if _newclass:startAddress = _swig_property(_pyavrdbg_raw.CodeArea_startAddress_get, _pyavrdbg_raw.CodeArea_startAddress_set)
    __swig_setmethods__["endAddress"] = _pyavrdbg_raw.CodeArea_endAddress_set
    __swig_getmethods__["endAddress"] = _pyavrdbg_raw.CodeArea_endAddress_get
    if _newclass:endAddress = _swig_property(_pyavrdbg_raw.CodeArea_endAddress_get, _pyavrdbg_raw.CodeArea_endAddress_set)
    __swig_setmethods__["isa"] = _pyavrdbg_raw.CodeArea_isa_set
    __swig_getmethods__["isa"] = _pyavrdbg_raw.CodeArea_isa_get
    if _newclass:isa = _swig_property(_pyavrdbg_raw.CodeArea_isa_get, _pyavrdbg_raw.CodeArea_isa_set)
    __swig_setmethods__["isStatement"] = _pyavrdbg_raw.CodeArea_isStatement_set
    __swig_getmethods__["isStatement"] = _pyavrdbg_raw.CodeArea_isStatement_get
    if _newclass:isStatement = _swig_property(_pyavrdbg_raw.CodeArea_isStatement_get, _pyavrdbg_raw.CodeArea_isStatement_set)
    __swig_setmethods__["isBasicBlock"] = _pyavrdbg_raw.CodeArea_isBasicBlock_set
    __swig_getmethods__["isBasicBlock"] = _pyavrdbg_raw.CodeArea_isBasicBlock_get
    if _newclass:isBasicBlock = _swig_property(_pyavrdbg_raw.CodeArea_isBasicBlock_get, _pyavrdbg_raw.CodeArea_isBasicBlock_set)
    __swig_setmethods__["isPrologueEnd"] = _pyavrdbg_raw.CodeArea_isPrologueEnd_set
    __swig_getmethods__["isPrologueEnd"] = _pyavrdbg_raw.CodeArea_isPrologueEnd_get
    if _newclass:isPrologueEnd = _swig_property(_pyavrdbg_raw.CodeArea_isPrologueEnd_get, _pyavrdbg_raw.CodeArea_isPrologueEnd_set)
    __swig_setmethods__["isEpilogueStart"] = _pyavrdbg_raw.CodeArea_isEpilogueStart_set
    __swig_getmethods__["isEpilogueStart"] = _pyavrdbg_raw.CodeArea_isEpilogueStart_get
    if _newclass:isEpilogueStart = _swig_property(_pyavrdbg_raw.CodeArea_isEpilogueStart_get, _pyavrdbg_raw.CodeArea_isEpilogueStart_set)
    __swig_setmethods__["fileIndex"] = _pyavrdbg_raw.CodeArea_fileIndex_set
    __swig_getmethods__["fileIndex"] = _pyavrdbg_raw.CodeArea_fileIndex_get
    if _newclass:fileIndex = _swig_property(_pyavrdbg_raw.CodeArea_fileIndex_get, _pyavrdbg_raw.CodeArea_fileIndex_set)
    def __init__(self): 
        this = _pyavrdbg_raw.new_CodeArea()
        try: self.this.append(this)
        except: self.this = this
    __swig_getmethods__["scopeInfo"] = _pyavrdbg_raw.CodeArea_scopeInfo_get
    if _newclass:scopeInfo = _swig_property(_pyavrdbg_raw.CodeArea_scopeInfo_get)
    __swig_destroy__ = _pyavrdbg_raw.delete_CodeArea
    __del__ = lambda self : None;
CodeArea_swigregister = _pyavrdbg_raw.CodeArea_swigregister
CodeArea_swigregister(CodeArea)

class CodeArea_scopeInfo(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CodeArea_scopeInfo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CodeArea_scopeInfo, name)
    __repr__ = _swig_repr
    __swig_setmethods__["nStartLine"] = _pyavrdbg_raw.CodeArea_scopeInfo_nStartLine_set
    __swig_getmethods__["nStartLine"] = _pyavrdbg_raw.CodeArea_scopeInfo_nStartLine_get
    if _newclass:nStartLine = _swig_property(_pyavrdbg_raw.CodeArea_scopeInfo_nStartLine_get, _pyavrdbg_raw.CodeArea_scopeInfo_nStartLine_set)
    __swig_setmethods__["nEndLine"] = _pyavrdbg_raw.CodeArea_scopeInfo_nEndLine_set
    __swig_getmethods__["nEndLine"] = _pyavrdbg_raw.CodeArea_scopeInfo_nEndLine_get
    if _newclass:nEndLine = _swig_property(_pyavrdbg_raw.CodeArea_scopeInfo_nEndLine_get, _pyavrdbg_raw.CodeArea_scopeInfo_nEndLine_set)
    __swig_setmethods__["nFile"] = _pyavrdbg_raw.CodeArea_scopeInfo_nFile_set
    __swig_getmethods__["nFile"] = _pyavrdbg_raw.CodeArea_scopeInfo_nFile_get
    if _newclass:nFile = _swig_property(_pyavrdbg_raw.CodeArea_scopeInfo_nFile_get, _pyavrdbg_raw.CodeArea_scopeInfo_nFile_set)
    __swig_setmethods__["nCu"] = _pyavrdbg_raw.CodeArea_scopeInfo_nCu_set
    __swig_getmethods__["nCu"] = _pyavrdbg_raw.CodeArea_scopeInfo_nCu_get
    if _newclass:nCu = _swig_property(_pyavrdbg_raw.CodeArea_scopeInfo_nCu_get, _pyavrdbg_raw.CodeArea_scopeInfo_nCu_set)
    __swig_setmethods__["id"] = _pyavrdbg_raw.CodeArea_scopeInfo_id_set
    __swig_getmethods__["id"] = _pyavrdbg_raw.CodeArea_scopeInfo_id_get
    if _newclass:id = _swig_property(_pyavrdbg_raw.CodeArea_scopeInfo_id_get, _pyavrdbg_raw.CodeArea_scopeInfo_id_set)
    __swig_setmethods__["enclfn"] = _pyavrdbg_raw.CodeArea_scopeInfo_enclfn_set
    __swig_getmethods__["enclfn"] = _pyavrdbg_raw.CodeArea_scopeInfo_enclfn_get
    if _newclass:enclfn = _swig_property(_pyavrdbg_raw.CodeArea_scopeInfo_enclfn_get, _pyavrdbg_raw.CodeArea_scopeInfo_enclfn_set)
    __swig_setmethods__["concreteScopeIdentifier"] = _pyavrdbg_raw.CodeArea_scopeInfo_concreteScopeIdentifier_set
    __swig_getmethods__["concreteScopeIdentifier"] = _pyavrdbg_raw.CodeArea_scopeInfo_concreteScopeIdentifier_get
    if _newclass:concreteScopeIdentifier = _swig_property(_pyavrdbg_raw.CodeArea_scopeInfo_concreteScopeIdentifier_get, _pyavrdbg_raw.CodeArea_scopeInfo_concreteScopeIdentifier_set)
    def isValid(self): return _pyavrdbg_raw.CodeArea_scopeInfo_isValid(self)
    def __init__(self): 
        this = _pyavrdbg_raw.new_CodeArea_scopeInfo()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyavrdbg_raw.delete_CodeArea_scopeInfo
    __del__ = lambda self : None;
CodeArea_scopeInfo_swigregister = _pyavrdbg_raw.CodeArea_scopeInfo_swigregister
CodeArea_scopeInfo_swigregister(CodeArea_scopeInfo)

class AddressNamePair(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AddressNamePair, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AddressNamePair, name)
    __repr__ = _swig_repr
    __swig_setmethods__["address"] = _pyavrdbg_raw.AddressNamePair_address_set
    __swig_getmethods__["address"] = _pyavrdbg_raw.AddressNamePair_address_get
    if _newclass:address = _swig_property(_pyavrdbg_raw.AddressNamePair_address_get, _pyavrdbg_raw.AddressNamePair_address_set)
    __swig_setmethods__["functionName"] = _pyavrdbg_raw.AddressNamePair_functionName_set
    __swig_getmethods__["functionName"] = _pyavrdbg_raw.AddressNamePair_functionName_get
    if _newclass:functionName = _swig_property(_pyavrdbg_raw.AddressNamePair_functionName_get, _pyavrdbg_raw.AddressNamePair_functionName_set)
    def __init__(self): 
        this = _pyavrdbg_raw.new_AddressNamePair()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyavrdbg_raw.delete_AddressNamePair
    __del__ = lambda self : None;
AddressNamePair_swigregister = _pyavrdbg_raw.AddressNamePair_swigregister
AddressNamePair_swigregister(AddressNamePair)

class CallFrameInfo(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CallFrameInfo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CallFrameInfo, name)
    __repr__ = _swig_repr
    __swig_setmethods__["level"] = _pyavrdbg_raw.CallFrameInfo_level_set
    __swig_getmethods__["level"] = _pyavrdbg_raw.CallFrameInfo_level_get
    if _newclass:level = _swig_property(_pyavrdbg_raw.CallFrameInfo_level_get, _pyavrdbg_raw.CallFrameInfo_level_set)
    __swig_setmethods__["FramePointer"] = _pyavrdbg_raw.CallFrameInfo_FramePointer_set
    __swig_getmethods__["FramePointer"] = _pyavrdbg_raw.CallFrameInfo_FramePointer_get
    if _newclass:FramePointer = _swig_property(_pyavrdbg_raw.CallFrameInfo_FramePointer_get, _pyavrdbg_raw.CallFrameInfo_FramePointer_set)
    __swig_setmethods__["InstructionPointer"] = _pyavrdbg_raw.CallFrameInfo_InstructionPointer_set
    __swig_getmethods__["InstructionPointer"] = _pyavrdbg_raw.CallFrameInfo_InstructionPointer_get
    if _newclass:InstructionPointer = _swig_property(_pyavrdbg_raw.CallFrameInfo_InstructionPointer_get, _pyavrdbg_raw.CallFrameInfo_InstructionPointer_set)
    __swig_setmethods__["registerValues"] = _pyavrdbg_raw.CallFrameInfo_registerValues_set
    __swig_getmethods__["registerValues"] = _pyavrdbg_raw.CallFrameInfo_registerValues_get
    if _newclass:registerValues = _swig_property(_pyavrdbg_raw.CallFrameInfo_registerValues_get, _pyavrdbg_raw.CallFrameInfo_registerValues_set)
    def __init__(self): 
        this = _pyavrdbg_raw.new_CallFrameInfo()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyavrdbg_raw.delete_CallFrameInfo
    __del__ = lambda self : None;
CallFrameInfo_swigregister = _pyavrdbg_raw.CallFrameInfo_swigregister
CallFrameInfo_swigregister(CallFrameInfo)

class ISourceInformation(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ISourceInformation, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ISourceInformation, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _pyavrdbg_raw.delete_ISourceInformation
    __del__ = lambda self : None;
    def getSourcefiles(self, *args): return _pyavrdbg_raw.ISourceInformation_getSourcefiles(self, *args)
    def getCodeAreasFromAddressRange(self, *args): return _pyavrdbg_raw.ISourceInformation_getCodeAreasFromAddressRange(self, *args)
    def getAddressesFromSingleStatement(self, *args): return _pyavrdbg_raw.ISourceInformation_getAddressesFromSingleStatement(self, *args)
    def getParentFrames(self, *args): return _pyavrdbg_raw.ISourceInformation_getParentFrames(self, *args)
    def isHighLevelStatement(self, *args): return _pyavrdbg_raw.ISourceInformation_isHighLevelStatement(self, *args)
    def getMacroDef(self, *args): return _pyavrdbg_raw.ISourceInformation_getMacroDef(self, *args)
ISourceInformation_swigregister = _pyavrdbg_raw.ISourceInformation_swigregister
ISourceInformation_swigregister(ISourceInformation)

class ISymbolInformation(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ISymbolInformation, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ISymbolInformation, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _pyavrdbg_raw.delete_ISymbolInformation
    __del__ = lambda self : None;
    def getSymbolContextFromID(self, *args): return _pyavrdbg_raw.ISymbolInformation_getSymbolContextFromID(self, *args)
    def getScopeContextFromPc(self, *args): return _pyavrdbg_raw.ISymbolInformation_getScopeContextFromPc(self, *args)
    def lookupSymbol(self, *args): return _pyavrdbg_raw.ISymbolInformation_lookupSymbol(self, *args)
    def lookupSymbolFromPc(self, *args): return _pyavrdbg_raw.ISymbolInformation_lookupSymbolFromPc(self, *args)
    def lookupGlobalSymbol(self, *args): return _pyavrdbg_raw.ISymbolInformation_lookupGlobalSymbol(self, *args)
    def lookupGlobalSymbols(self, *args): return _pyavrdbg_raw.ISymbolInformation_lookupGlobalSymbols(self, *args)
ISymbolInformation_swigregister = _pyavrdbg_raw.ISymbolInformation_swigregister
ISymbolInformation_swigregister(ISymbolInformation)

class vectorofProgramSegments(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vectorofProgramSegments, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vectorofProgramSegments, name)
    __repr__ = _swig_repr
    def iterator(self): return _pyavrdbg_raw.vectorofProgramSegments_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _pyavrdbg_raw.vectorofProgramSegments___nonzero__(self)
    def __bool__(self): return _pyavrdbg_raw.vectorofProgramSegments___bool__(self)
    def __len__(self): return _pyavrdbg_raw.vectorofProgramSegments___len__(self)
    def pop(self): return _pyavrdbg_raw.vectorofProgramSegments_pop(self)
    def __getslice__(self, *args): return _pyavrdbg_raw.vectorofProgramSegments___getslice__(self, *args)
    def __setslice__(self, *args): return _pyavrdbg_raw.vectorofProgramSegments___setslice__(self, *args)
    def __delslice__(self, *args): return _pyavrdbg_raw.vectorofProgramSegments___delslice__(self, *args)
    def __delitem__(self, *args): return _pyavrdbg_raw.vectorofProgramSegments___delitem__(self, *args)
    def __getitem__(self, *args): return _pyavrdbg_raw.vectorofProgramSegments___getitem__(self, *args)
    def __setitem__(self, *args): return _pyavrdbg_raw.vectorofProgramSegments___setitem__(self, *args)
    def append(self, *args): return _pyavrdbg_raw.vectorofProgramSegments_append(self, *args)
    def empty(self): return _pyavrdbg_raw.vectorofProgramSegments_empty(self)
    def size(self): return _pyavrdbg_raw.vectorofProgramSegments_size(self)
    def clear(self): return _pyavrdbg_raw.vectorofProgramSegments_clear(self)
    def swap(self, *args): return _pyavrdbg_raw.vectorofProgramSegments_swap(self, *args)
    def get_allocator(self): return _pyavrdbg_raw.vectorofProgramSegments_get_allocator(self)
    def begin(self): return _pyavrdbg_raw.vectorofProgramSegments_begin(self)
    def end(self): return _pyavrdbg_raw.vectorofProgramSegments_end(self)
    def rbegin(self): return _pyavrdbg_raw.vectorofProgramSegments_rbegin(self)
    def rend(self): return _pyavrdbg_raw.vectorofProgramSegments_rend(self)
    def pop_back(self): return _pyavrdbg_raw.vectorofProgramSegments_pop_back(self)
    def erase(self, *args): return _pyavrdbg_raw.vectorofProgramSegments_erase(self, *args)
    def __init__(self, *args): 
        this = _pyavrdbg_raw.new_vectorofProgramSegments(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _pyavrdbg_raw.vectorofProgramSegments_push_back(self, *args)
    def front(self): return _pyavrdbg_raw.vectorofProgramSegments_front(self)
    def back(self): return _pyavrdbg_raw.vectorofProgramSegments_back(self)
    def assign(self, *args): return _pyavrdbg_raw.vectorofProgramSegments_assign(self, *args)
    def resize(self, *args): return _pyavrdbg_raw.vectorofProgramSegments_resize(self, *args)
    def insert(self, *args): return _pyavrdbg_raw.vectorofProgramSegments_insert(self, *args)
    def reserve(self, *args): return _pyavrdbg_raw.vectorofProgramSegments_reserve(self, *args)
    def capacity(self): return _pyavrdbg_raw.vectorofProgramSegments_capacity(self)
    __swig_destroy__ = _pyavrdbg_raw.delete_vectorofProgramSegments
    __del__ = lambda self : None;
vectorofProgramSegments_swigregister = _pyavrdbg_raw.vectorofProgramSegments_swigregister
vectorofProgramSegments_swigregister(vectorofProgramSegments)

class IBinaryInformation(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IBinaryInformation, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IBinaryInformation, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _pyavrdbg_raw.delete_IBinaryInformation
    __del__ = lambda self : None;
    def getProgramSegments(self): return _pyavrdbg_raw.IBinaryInformation_getProgramSegments(self)
IBinaryInformation_swigregister = _pyavrdbg_raw.IBinaryInformation_swigregister
IBinaryInformation_swigregister(IBinaryInformation)
cvar = _pyavrdbg_raw.cvar
MEMORY_NAME_BASE = cvar.MEMORY_NAME_BASE
MEMORY_NAME_PROGRAM_MEMORY = cvar.MEMORY_NAME_PROGRAM_MEMORY
MEMORY_NAME_DATA_MEMORY = cvar.MEMORY_NAME_DATA_MEMORY
MEMORY_NAME_IO = cvar.MEMORY_NAME_IO
MEMORY_NAME_REGISTERS = cvar.MEMORY_NAME_REGISTERS
MEMORY_NAME_EEPROM = cvar.MEMORY_NAME_EEPROM
MEMORY_NAME_FUSE_BYTES = cvar.MEMORY_NAME_FUSE_BYTES
MEMORY_NAME_LOCK_BYTES = cvar.MEMORY_NAME_LOCK_BYTES
MEMORY_NAME_SIGNATURE = cvar.MEMORY_NAME_SIGNATURE
MEMORY_NAME_USER_SIGNATURES = cvar.MEMORY_NAME_USER_SIGNATURES
MEMORY_NAME_PRODUCTION_SIGNATURE = cvar.MEMORY_NAME_PRODUCTION_SIGNATURE
MEMORY_NAME_OSCCAL = cvar.MEMORY_NAME_OSCCAL
SEGMENT_NAME_FLASH = cvar.SEGMENT_NAME_FLASH
SEGMENT_NAME_ARMFLASH = cvar.SEGMENT_NAME_ARMFLASH
SEGMENT_NAME_SRAM = cvar.SEGMENT_NAME_SRAM
SEGMENT_NAME_USERPAGE = cvar.SEGMENT_NAME_USERPAGE
SEGMENT_NAME_USER_SIGNATURES = cvar.SEGMENT_NAME_USER_SIGNATURES
SEGMENT_NAME_ROM = cvar.SEGMENT_NAME_ROM
SEGMENT_NAME_RWW = cvar.SEGMENT_NAME_RWW
SEGMENT_TYPE_RAM = cvar.SEGMENT_TYPE_RAM

class IProgramSegment(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IProgramSegment, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IProgramSegment, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _pyavrdbg_raw.delete_IProgramSegment
    __del__ = lambda self : None;
    def getNativeName(self): return _pyavrdbg_raw.IProgramSegment_getNativeName(self)
    def getNativeOffset(self): return _pyavrdbg_raw.IProgramSegment_getNativeOffset(self)
    def getSize(self): return _pyavrdbg_raw.IProgramSegment_getSize(self)
    def getAddressSpaceName(self): return _pyavrdbg_raw.IProgramSegment_getAddressSpaceName(self)
    def getAddressSpaceOffset(self): return _pyavrdbg_raw.IProgramSegment_getAddressSpaceOffset(self)
    def readData(self, *args): return _pyavrdbg_raw.IProgramSegment_readData(self, *args)
IProgramSegment_swigregister = _pyavrdbg_raw.IProgramSegment_swigregister
IProgramSegment_swigregister(IProgramSegment)

PARSER_FACTORY_CATEGORY_NAME = _pyavrdbg_raw.PARSER_FACTORY_CATEGORY_NAME
class IObjectfileParserFactory(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IObjectfileParserFactory, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IObjectfileParserFactory, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def getSupportedObjectFileFormat(self): return _pyavrdbg_raw.IObjectfileParserFactory_getSupportedObjectFileFormat(self)
    def create(self, *args): return _pyavrdbg_raw.IObjectfileParserFactory_create(self, *args)
    __swig_destroy__ = _pyavrdbg_raw.delete_IObjectfileParserFactory
    __del__ = lambda self : None;
IObjectfileParserFactory_swigregister = _pyavrdbg_raw.IObjectfileParserFactory_swigregister
IObjectfileParserFactory_swigregister(IObjectfileParserFactory)
ELFDWARF_FORMAT = cvar.ELFDWARF_FORMAT
NORDIC_FORMAT = cvar.NORDIC_FORMAT
UBROF_FORMAT = cvar.UBROF_FORMAT
COFF_FORMAT = cvar.COFF_FORMAT

class vector_of_DIAddressSpaceSharedPtr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vector_of_DIAddressSpaceSharedPtr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vector_of_DIAddressSpaceSharedPtr, name)
    __repr__ = _swig_repr
    def iterator(self): return _pyavrdbg_raw.vector_of_DIAddressSpaceSharedPtr_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _pyavrdbg_raw.vector_of_DIAddressSpaceSharedPtr___nonzero__(self)
    def __bool__(self): return _pyavrdbg_raw.vector_of_DIAddressSpaceSharedPtr___bool__(self)
    def __len__(self): return _pyavrdbg_raw.vector_of_DIAddressSpaceSharedPtr___len__(self)
    def pop(self): return _pyavrdbg_raw.vector_of_DIAddressSpaceSharedPtr_pop(self)
    def __getslice__(self, *args): return _pyavrdbg_raw.vector_of_DIAddressSpaceSharedPtr___getslice__(self, *args)
    def __setslice__(self, *args): return _pyavrdbg_raw.vector_of_DIAddressSpaceSharedPtr___setslice__(self, *args)
    def __delslice__(self, *args): return _pyavrdbg_raw.vector_of_DIAddressSpaceSharedPtr___delslice__(self, *args)
    def __delitem__(self, *args): return _pyavrdbg_raw.vector_of_DIAddressSpaceSharedPtr___delitem__(self, *args)
    def __getitem__(self, *args): return _pyavrdbg_raw.vector_of_DIAddressSpaceSharedPtr___getitem__(self, *args)
    def __setitem__(self, *args): return _pyavrdbg_raw.vector_of_DIAddressSpaceSharedPtr___setitem__(self, *args)
    def append(self, *args): return _pyavrdbg_raw.vector_of_DIAddressSpaceSharedPtr_append(self, *args)
    def empty(self): return _pyavrdbg_raw.vector_of_DIAddressSpaceSharedPtr_empty(self)
    def size(self): return _pyavrdbg_raw.vector_of_DIAddressSpaceSharedPtr_size(self)
    def clear(self): return _pyavrdbg_raw.vector_of_DIAddressSpaceSharedPtr_clear(self)
    def swap(self, *args): return _pyavrdbg_raw.vector_of_DIAddressSpaceSharedPtr_swap(self, *args)
    def get_allocator(self): return _pyavrdbg_raw.vector_of_DIAddressSpaceSharedPtr_get_allocator(self)
    def begin(self): return _pyavrdbg_raw.vector_of_DIAddressSpaceSharedPtr_begin(self)
    def end(self): return _pyavrdbg_raw.vector_of_DIAddressSpaceSharedPtr_end(self)
    def rbegin(self): return _pyavrdbg_raw.vector_of_DIAddressSpaceSharedPtr_rbegin(self)
    def rend(self): return _pyavrdbg_raw.vector_of_DIAddressSpaceSharedPtr_rend(self)
    def pop_back(self): return _pyavrdbg_raw.vector_of_DIAddressSpaceSharedPtr_pop_back(self)
    def erase(self, *args): return _pyavrdbg_raw.vector_of_DIAddressSpaceSharedPtr_erase(self, *args)
    def __init__(self, *args): 
        this = _pyavrdbg_raw.new_vector_of_DIAddressSpaceSharedPtr(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _pyavrdbg_raw.vector_of_DIAddressSpaceSharedPtr_push_back(self, *args)
    def front(self): return _pyavrdbg_raw.vector_of_DIAddressSpaceSharedPtr_front(self)
    def back(self): return _pyavrdbg_raw.vector_of_DIAddressSpaceSharedPtr_back(self)
    def assign(self, *args): return _pyavrdbg_raw.vector_of_DIAddressSpaceSharedPtr_assign(self, *args)
    def resize(self, *args): return _pyavrdbg_raw.vector_of_DIAddressSpaceSharedPtr_resize(self, *args)
    def insert(self, *args): return _pyavrdbg_raw.vector_of_DIAddressSpaceSharedPtr_insert(self, *args)
    def reserve(self, *args): return _pyavrdbg_raw.vector_of_DIAddressSpaceSharedPtr_reserve(self, *args)
    def capacity(self): return _pyavrdbg_raw.vector_of_DIAddressSpaceSharedPtr_capacity(self)
    __swig_destroy__ = _pyavrdbg_raw.delete_vector_of_DIAddressSpaceSharedPtr
    __del__ = lambda self : None;
vector_of_DIAddressSpaceSharedPtr_swigregister = _pyavrdbg_raw.vector_of_DIAddressSpaceSharedPtr_swigregister
vector_of_DIAddressSpaceSharedPtr_swigregister(vector_of_DIAddressSpaceSharedPtr)

class vector_of_DIMemorySegmentSharedPtr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vector_of_DIMemorySegmentSharedPtr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vector_of_DIMemorySegmentSharedPtr, name)
    __repr__ = _swig_repr
    def iterator(self): return _pyavrdbg_raw.vector_of_DIMemorySegmentSharedPtr_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _pyavrdbg_raw.vector_of_DIMemorySegmentSharedPtr___nonzero__(self)
    def __bool__(self): return _pyavrdbg_raw.vector_of_DIMemorySegmentSharedPtr___bool__(self)
    def __len__(self): return _pyavrdbg_raw.vector_of_DIMemorySegmentSharedPtr___len__(self)
    def pop(self): return _pyavrdbg_raw.vector_of_DIMemorySegmentSharedPtr_pop(self)
    def __getslice__(self, *args): return _pyavrdbg_raw.vector_of_DIMemorySegmentSharedPtr___getslice__(self, *args)
    def __setslice__(self, *args): return _pyavrdbg_raw.vector_of_DIMemorySegmentSharedPtr___setslice__(self, *args)
    def __delslice__(self, *args): return _pyavrdbg_raw.vector_of_DIMemorySegmentSharedPtr___delslice__(self, *args)
    def __delitem__(self, *args): return _pyavrdbg_raw.vector_of_DIMemorySegmentSharedPtr___delitem__(self, *args)
    def __getitem__(self, *args): return _pyavrdbg_raw.vector_of_DIMemorySegmentSharedPtr___getitem__(self, *args)
    def __setitem__(self, *args): return _pyavrdbg_raw.vector_of_DIMemorySegmentSharedPtr___setitem__(self, *args)
    def append(self, *args): return _pyavrdbg_raw.vector_of_DIMemorySegmentSharedPtr_append(self, *args)
    def empty(self): return _pyavrdbg_raw.vector_of_DIMemorySegmentSharedPtr_empty(self)
    def size(self): return _pyavrdbg_raw.vector_of_DIMemorySegmentSharedPtr_size(self)
    def clear(self): return _pyavrdbg_raw.vector_of_DIMemorySegmentSharedPtr_clear(self)
    def swap(self, *args): return _pyavrdbg_raw.vector_of_DIMemorySegmentSharedPtr_swap(self, *args)
    def get_allocator(self): return _pyavrdbg_raw.vector_of_DIMemorySegmentSharedPtr_get_allocator(self)
    def begin(self): return _pyavrdbg_raw.vector_of_DIMemorySegmentSharedPtr_begin(self)
    def end(self): return _pyavrdbg_raw.vector_of_DIMemorySegmentSharedPtr_end(self)
    def rbegin(self): return _pyavrdbg_raw.vector_of_DIMemorySegmentSharedPtr_rbegin(self)
    def rend(self): return _pyavrdbg_raw.vector_of_DIMemorySegmentSharedPtr_rend(self)
    def pop_back(self): return _pyavrdbg_raw.vector_of_DIMemorySegmentSharedPtr_pop_back(self)
    def erase(self, *args): return _pyavrdbg_raw.vector_of_DIMemorySegmentSharedPtr_erase(self, *args)
    def __init__(self, *args): 
        this = _pyavrdbg_raw.new_vector_of_DIMemorySegmentSharedPtr(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _pyavrdbg_raw.vector_of_DIMemorySegmentSharedPtr_push_back(self, *args)
    def front(self): return _pyavrdbg_raw.vector_of_DIMemorySegmentSharedPtr_front(self)
    def back(self): return _pyavrdbg_raw.vector_of_DIMemorySegmentSharedPtr_back(self)
    def assign(self, *args): return _pyavrdbg_raw.vector_of_DIMemorySegmentSharedPtr_assign(self, *args)
    def resize(self, *args): return _pyavrdbg_raw.vector_of_DIMemorySegmentSharedPtr_resize(self, *args)
    def insert(self, *args): return _pyavrdbg_raw.vector_of_DIMemorySegmentSharedPtr_insert(self, *args)
    def reserve(self, *args): return _pyavrdbg_raw.vector_of_DIMemorySegmentSharedPtr_reserve(self, *args)
    def capacity(self): return _pyavrdbg_raw.vector_of_DIMemorySegmentSharedPtr_capacity(self)
    __swig_destroy__ = _pyavrdbg_raw.delete_vector_of_DIMemorySegmentSharedPtr
    __del__ = lambda self : None;
vector_of_DIMemorySegmentSharedPtr_swigregister = _pyavrdbg_raw.vector_of_DIMemorySegmentSharedPtr_swigregister
vector_of_DIMemorySegmentSharedPtr_swigregister(vector_of_DIMemorySegmentSharedPtr)

class vector_of_DIModuleSharedPtr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vector_of_DIModuleSharedPtr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vector_of_DIModuleSharedPtr, name)
    __repr__ = _swig_repr
    def iterator(self): return _pyavrdbg_raw.vector_of_DIModuleSharedPtr_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _pyavrdbg_raw.vector_of_DIModuleSharedPtr___nonzero__(self)
    def __bool__(self): return _pyavrdbg_raw.vector_of_DIModuleSharedPtr___bool__(self)
    def __len__(self): return _pyavrdbg_raw.vector_of_DIModuleSharedPtr___len__(self)
    def pop(self): return _pyavrdbg_raw.vector_of_DIModuleSharedPtr_pop(self)
    def __getslice__(self, *args): return _pyavrdbg_raw.vector_of_DIModuleSharedPtr___getslice__(self, *args)
    def __setslice__(self, *args): return _pyavrdbg_raw.vector_of_DIModuleSharedPtr___setslice__(self, *args)
    def __delslice__(self, *args): return _pyavrdbg_raw.vector_of_DIModuleSharedPtr___delslice__(self, *args)
    def __delitem__(self, *args): return _pyavrdbg_raw.vector_of_DIModuleSharedPtr___delitem__(self, *args)
    def __getitem__(self, *args): return _pyavrdbg_raw.vector_of_DIModuleSharedPtr___getitem__(self, *args)
    def __setitem__(self, *args): return _pyavrdbg_raw.vector_of_DIModuleSharedPtr___setitem__(self, *args)
    def append(self, *args): return _pyavrdbg_raw.vector_of_DIModuleSharedPtr_append(self, *args)
    def empty(self): return _pyavrdbg_raw.vector_of_DIModuleSharedPtr_empty(self)
    def size(self): return _pyavrdbg_raw.vector_of_DIModuleSharedPtr_size(self)
    def clear(self): return _pyavrdbg_raw.vector_of_DIModuleSharedPtr_clear(self)
    def swap(self, *args): return _pyavrdbg_raw.vector_of_DIModuleSharedPtr_swap(self, *args)
    def get_allocator(self): return _pyavrdbg_raw.vector_of_DIModuleSharedPtr_get_allocator(self)
    def begin(self): return _pyavrdbg_raw.vector_of_DIModuleSharedPtr_begin(self)
    def end(self): return _pyavrdbg_raw.vector_of_DIModuleSharedPtr_end(self)
    def rbegin(self): return _pyavrdbg_raw.vector_of_DIModuleSharedPtr_rbegin(self)
    def rend(self): return _pyavrdbg_raw.vector_of_DIModuleSharedPtr_rend(self)
    def pop_back(self): return _pyavrdbg_raw.vector_of_DIModuleSharedPtr_pop_back(self)
    def erase(self, *args): return _pyavrdbg_raw.vector_of_DIModuleSharedPtr_erase(self, *args)
    def __init__(self, *args): 
        this = _pyavrdbg_raw.new_vector_of_DIModuleSharedPtr(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _pyavrdbg_raw.vector_of_DIModuleSharedPtr_push_back(self, *args)
    def front(self): return _pyavrdbg_raw.vector_of_DIModuleSharedPtr_front(self)
    def back(self): return _pyavrdbg_raw.vector_of_DIModuleSharedPtr_back(self)
    def assign(self, *args): return _pyavrdbg_raw.vector_of_DIModuleSharedPtr_assign(self, *args)
    def resize(self, *args): return _pyavrdbg_raw.vector_of_DIModuleSharedPtr_resize(self, *args)
    def insert(self, *args): return _pyavrdbg_raw.vector_of_DIModuleSharedPtr_insert(self, *args)
    def reserve(self, *args): return _pyavrdbg_raw.vector_of_DIModuleSharedPtr_reserve(self, *args)
    def capacity(self): return _pyavrdbg_raw.vector_of_DIModuleSharedPtr_capacity(self)
    __swig_destroy__ = _pyavrdbg_raw.delete_vector_of_DIModuleSharedPtr
    __del__ = lambda self : None;
vector_of_DIModuleSharedPtr_swigregister = _pyavrdbg_raw.vector_of_DIModuleSharedPtr_swigregister
vector_of_DIModuleSharedPtr_swigregister(vector_of_DIModuleSharedPtr)

class vector_of_DIRegisterGroupSharedPtr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vector_of_DIRegisterGroupSharedPtr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vector_of_DIRegisterGroupSharedPtr, name)
    __repr__ = _swig_repr
    def iterator(self): return _pyavrdbg_raw.vector_of_DIRegisterGroupSharedPtr_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _pyavrdbg_raw.vector_of_DIRegisterGroupSharedPtr___nonzero__(self)
    def __bool__(self): return _pyavrdbg_raw.vector_of_DIRegisterGroupSharedPtr___bool__(self)
    def __len__(self): return _pyavrdbg_raw.vector_of_DIRegisterGroupSharedPtr___len__(self)
    def pop(self): return _pyavrdbg_raw.vector_of_DIRegisterGroupSharedPtr_pop(self)
    def __getslice__(self, *args): return _pyavrdbg_raw.vector_of_DIRegisterGroupSharedPtr___getslice__(self, *args)
    def __setslice__(self, *args): return _pyavrdbg_raw.vector_of_DIRegisterGroupSharedPtr___setslice__(self, *args)
    def __delslice__(self, *args): return _pyavrdbg_raw.vector_of_DIRegisterGroupSharedPtr___delslice__(self, *args)
    def __delitem__(self, *args): return _pyavrdbg_raw.vector_of_DIRegisterGroupSharedPtr___delitem__(self, *args)
    def __getitem__(self, *args): return _pyavrdbg_raw.vector_of_DIRegisterGroupSharedPtr___getitem__(self, *args)
    def __setitem__(self, *args): return _pyavrdbg_raw.vector_of_DIRegisterGroupSharedPtr___setitem__(self, *args)
    def append(self, *args): return _pyavrdbg_raw.vector_of_DIRegisterGroupSharedPtr_append(self, *args)
    def empty(self): return _pyavrdbg_raw.vector_of_DIRegisterGroupSharedPtr_empty(self)
    def size(self): return _pyavrdbg_raw.vector_of_DIRegisterGroupSharedPtr_size(self)
    def clear(self): return _pyavrdbg_raw.vector_of_DIRegisterGroupSharedPtr_clear(self)
    def swap(self, *args): return _pyavrdbg_raw.vector_of_DIRegisterGroupSharedPtr_swap(self, *args)
    def get_allocator(self): return _pyavrdbg_raw.vector_of_DIRegisterGroupSharedPtr_get_allocator(self)
    def begin(self): return _pyavrdbg_raw.vector_of_DIRegisterGroupSharedPtr_begin(self)
    def end(self): return _pyavrdbg_raw.vector_of_DIRegisterGroupSharedPtr_end(self)
    def rbegin(self): return _pyavrdbg_raw.vector_of_DIRegisterGroupSharedPtr_rbegin(self)
    def rend(self): return _pyavrdbg_raw.vector_of_DIRegisterGroupSharedPtr_rend(self)
    def pop_back(self): return _pyavrdbg_raw.vector_of_DIRegisterGroupSharedPtr_pop_back(self)
    def erase(self, *args): return _pyavrdbg_raw.vector_of_DIRegisterGroupSharedPtr_erase(self, *args)
    def __init__(self, *args): 
        this = _pyavrdbg_raw.new_vector_of_DIRegisterGroupSharedPtr(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _pyavrdbg_raw.vector_of_DIRegisterGroupSharedPtr_push_back(self, *args)
    def front(self): return _pyavrdbg_raw.vector_of_DIRegisterGroupSharedPtr_front(self)
    def back(self): return _pyavrdbg_raw.vector_of_DIRegisterGroupSharedPtr_back(self)
    def assign(self, *args): return _pyavrdbg_raw.vector_of_DIRegisterGroupSharedPtr_assign(self, *args)
    def resize(self, *args): return _pyavrdbg_raw.vector_of_DIRegisterGroupSharedPtr_resize(self, *args)
    def insert(self, *args): return _pyavrdbg_raw.vector_of_DIRegisterGroupSharedPtr_insert(self, *args)
    def reserve(self, *args): return _pyavrdbg_raw.vector_of_DIRegisterGroupSharedPtr_reserve(self, *args)
    def capacity(self): return _pyavrdbg_raw.vector_of_DIRegisterGroupSharedPtr_capacity(self)
    __swig_destroy__ = _pyavrdbg_raw.delete_vector_of_DIRegisterGroupSharedPtr
    __del__ = lambda self : None;
vector_of_DIRegisterGroupSharedPtr_swigregister = _pyavrdbg_raw.vector_of_DIRegisterGroupSharedPtr_swigregister
vector_of_DIRegisterGroupSharedPtr_swigregister(vector_of_DIRegisterGroupSharedPtr)

class vector_of_DIRegisterSharedPtr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vector_of_DIRegisterSharedPtr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vector_of_DIRegisterSharedPtr, name)
    __repr__ = _swig_repr
    def iterator(self): return _pyavrdbg_raw.vector_of_DIRegisterSharedPtr_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _pyavrdbg_raw.vector_of_DIRegisterSharedPtr___nonzero__(self)
    def __bool__(self): return _pyavrdbg_raw.vector_of_DIRegisterSharedPtr___bool__(self)
    def __len__(self): return _pyavrdbg_raw.vector_of_DIRegisterSharedPtr___len__(self)
    def pop(self): return _pyavrdbg_raw.vector_of_DIRegisterSharedPtr_pop(self)
    def __getslice__(self, *args): return _pyavrdbg_raw.vector_of_DIRegisterSharedPtr___getslice__(self, *args)
    def __setslice__(self, *args): return _pyavrdbg_raw.vector_of_DIRegisterSharedPtr___setslice__(self, *args)
    def __delslice__(self, *args): return _pyavrdbg_raw.vector_of_DIRegisterSharedPtr___delslice__(self, *args)
    def __delitem__(self, *args): return _pyavrdbg_raw.vector_of_DIRegisterSharedPtr___delitem__(self, *args)
    def __getitem__(self, *args): return _pyavrdbg_raw.vector_of_DIRegisterSharedPtr___getitem__(self, *args)
    def __setitem__(self, *args): return _pyavrdbg_raw.vector_of_DIRegisterSharedPtr___setitem__(self, *args)
    def append(self, *args): return _pyavrdbg_raw.vector_of_DIRegisterSharedPtr_append(self, *args)
    def empty(self): return _pyavrdbg_raw.vector_of_DIRegisterSharedPtr_empty(self)
    def size(self): return _pyavrdbg_raw.vector_of_DIRegisterSharedPtr_size(self)
    def clear(self): return _pyavrdbg_raw.vector_of_DIRegisterSharedPtr_clear(self)
    def swap(self, *args): return _pyavrdbg_raw.vector_of_DIRegisterSharedPtr_swap(self, *args)
    def get_allocator(self): return _pyavrdbg_raw.vector_of_DIRegisterSharedPtr_get_allocator(self)
    def begin(self): return _pyavrdbg_raw.vector_of_DIRegisterSharedPtr_begin(self)
    def end(self): return _pyavrdbg_raw.vector_of_DIRegisterSharedPtr_end(self)
    def rbegin(self): return _pyavrdbg_raw.vector_of_DIRegisterSharedPtr_rbegin(self)
    def rend(self): return _pyavrdbg_raw.vector_of_DIRegisterSharedPtr_rend(self)
    def pop_back(self): return _pyavrdbg_raw.vector_of_DIRegisterSharedPtr_pop_back(self)
    def erase(self, *args): return _pyavrdbg_raw.vector_of_DIRegisterSharedPtr_erase(self, *args)
    def __init__(self, *args): 
        this = _pyavrdbg_raw.new_vector_of_DIRegisterSharedPtr(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _pyavrdbg_raw.vector_of_DIRegisterSharedPtr_push_back(self, *args)
    def front(self): return _pyavrdbg_raw.vector_of_DIRegisterSharedPtr_front(self)
    def back(self): return _pyavrdbg_raw.vector_of_DIRegisterSharedPtr_back(self)
    def assign(self, *args): return _pyavrdbg_raw.vector_of_DIRegisterSharedPtr_assign(self, *args)
    def resize(self, *args): return _pyavrdbg_raw.vector_of_DIRegisterSharedPtr_resize(self, *args)
    def insert(self, *args): return _pyavrdbg_raw.vector_of_DIRegisterSharedPtr_insert(self, *args)
    def reserve(self, *args): return _pyavrdbg_raw.vector_of_DIRegisterSharedPtr_reserve(self, *args)
    def capacity(self): return _pyavrdbg_raw.vector_of_DIRegisterSharedPtr_capacity(self)
    __swig_destroy__ = _pyavrdbg_raw.delete_vector_of_DIRegisterSharedPtr
    __del__ = lambda self : None;
vector_of_DIRegisterSharedPtr_swigregister = _pyavrdbg_raw.vector_of_DIRegisterSharedPtr_swigregister
vector_of_DIRegisterSharedPtr_swigregister(vector_of_DIRegisterSharedPtr)

class vector_of_DIBitfieldSharedPtr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vector_of_DIBitfieldSharedPtr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vector_of_DIBitfieldSharedPtr, name)
    __repr__ = _swig_repr
    def iterator(self): return _pyavrdbg_raw.vector_of_DIBitfieldSharedPtr_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _pyavrdbg_raw.vector_of_DIBitfieldSharedPtr___nonzero__(self)
    def __bool__(self): return _pyavrdbg_raw.vector_of_DIBitfieldSharedPtr___bool__(self)
    def __len__(self): return _pyavrdbg_raw.vector_of_DIBitfieldSharedPtr___len__(self)
    def pop(self): return _pyavrdbg_raw.vector_of_DIBitfieldSharedPtr_pop(self)
    def __getslice__(self, *args): return _pyavrdbg_raw.vector_of_DIBitfieldSharedPtr___getslice__(self, *args)
    def __setslice__(self, *args): return _pyavrdbg_raw.vector_of_DIBitfieldSharedPtr___setslice__(self, *args)
    def __delslice__(self, *args): return _pyavrdbg_raw.vector_of_DIBitfieldSharedPtr___delslice__(self, *args)
    def __delitem__(self, *args): return _pyavrdbg_raw.vector_of_DIBitfieldSharedPtr___delitem__(self, *args)
    def __getitem__(self, *args): return _pyavrdbg_raw.vector_of_DIBitfieldSharedPtr___getitem__(self, *args)
    def __setitem__(self, *args): return _pyavrdbg_raw.vector_of_DIBitfieldSharedPtr___setitem__(self, *args)
    def append(self, *args): return _pyavrdbg_raw.vector_of_DIBitfieldSharedPtr_append(self, *args)
    def empty(self): return _pyavrdbg_raw.vector_of_DIBitfieldSharedPtr_empty(self)
    def size(self): return _pyavrdbg_raw.vector_of_DIBitfieldSharedPtr_size(self)
    def clear(self): return _pyavrdbg_raw.vector_of_DIBitfieldSharedPtr_clear(self)
    def swap(self, *args): return _pyavrdbg_raw.vector_of_DIBitfieldSharedPtr_swap(self, *args)
    def get_allocator(self): return _pyavrdbg_raw.vector_of_DIBitfieldSharedPtr_get_allocator(self)
    def begin(self): return _pyavrdbg_raw.vector_of_DIBitfieldSharedPtr_begin(self)
    def end(self): return _pyavrdbg_raw.vector_of_DIBitfieldSharedPtr_end(self)
    def rbegin(self): return _pyavrdbg_raw.vector_of_DIBitfieldSharedPtr_rbegin(self)
    def rend(self): return _pyavrdbg_raw.vector_of_DIBitfieldSharedPtr_rend(self)
    def pop_back(self): return _pyavrdbg_raw.vector_of_DIBitfieldSharedPtr_pop_back(self)
    def erase(self, *args): return _pyavrdbg_raw.vector_of_DIBitfieldSharedPtr_erase(self, *args)
    def __init__(self, *args): 
        this = _pyavrdbg_raw.new_vector_of_DIBitfieldSharedPtr(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _pyavrdbg_raw.vector_of_DIBitfieldSharedPtr_push_back(self, *args)
    def front(self): return _pyavrdbg_raw.vector_of_DIBitfieldSharedPtr_front(self)
    def back(self): return _pyavrdbg_raw.vector_of_DIBitfieldSharedPtr_back(self)
    def assign(self, *args): return _pyavrdbg_raw.vector_of_DIBitfieldSharedPtr_assign(self, *args)
    def resize(self, *args): return _pyavrdbg_raw.vector_of_DIBitfieldSharedPtr_resize(self, *args)
    def insert(self, *args): return _pyavrdbg_raw.vector_of_DIBitfieldSharedPtr_insert(self, *args)
    def reserve(self, *args): return _pyavrdbg_raw.vector_of_DIBitfieldSharedPtr_reserve(self, *args)
    def capacity(self): return _pyavrdbg_raw.vector_of_DIBitfieldSharedPtr_capacity(self)
    __swig_destroy__ = _pyavrdbg_raw.delete_vector_of_DIBitfieldSharedPtr
    __del__ = lambda self : None;
vector_of_DIBitfieldSharedPtr_swigregister = _pyavrdbg_raw.vector_of_DIBitfieldSharedPtr_swigregister
vector_of_DIBitfieldSharedPtr_swigregister(vector_of_DIBitfieldSharedPtr)

class vector_of_DIValueGroupSharedPtr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vector_of_DIValueGroupSharedPtr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vector_of_DIValueGroupSharedPtr, name)
    __repr__ = _swig_repr
    def iterator(self): return _pyavrdbg_raw.vector_of_DIValueGroupSharedPtr_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _pyavrdbg_raw.vector_of_DIValueGroupSharedPtr___nonzero__(self)
    def __bool__(self): return _pyavrdbg_raw.vector_of_DIValueGroupSharedPtr___bool__(self)
    def __len__(self): return _pyavrdbg_raw.vector_of_DIValueGroupSharedPtr___len__(self)
    def pop(self): return _pyavrdbg_raw.vector_of_DIValueGroupSharedPtr_pop(self)
    def __getslice__(self, *args): return _pyavrdbg_raw.vector_of_DIValueGroupSharedPtr___getslice__(self, *args)
    def __setslice__(self, *args): return _pyavrdbg_raw.vector_of_DIValueGroupSharedPtr___setslice__(self, *args)
    def __delslice__(self, *args): return _pyavrdbg_raw.vector_of_DIValueGroupSharedPtr___delslice__(self, *args)
    def __delitem__(self, *args): return _pyavrdbg_raw.vector_of_DIValueGroupSharedPtr___delitem__(self, *args)
    def __getitem__(self, *args): return _pyavrdbg_raw.vector_of_DIValueGroupSharedPtr___getitem__(self, *args)
    def __setitem__(self, *args): return _pyavrdbg_raw.vector_of_DIValueGroupSharedPtr___setitem__(self, *args)
    def append(self, *args): return _pyavrdbg_raw.vector_of_DIValueGroupSharedPtr_append(self, *args)
    def empty(self): return _pyavrdbg_raw.vector_of_DIValueGroupSharedPtr_empty(self)
    def size(self): return _pyavrdbg_raw.vector_of_DIValueGroupSharedPtr_size(self)
    def clear(self): return _pyavrdbg_raw.vector_of_DIValueGroupSharedPtr_clear(self)
    def swap(self, *args): return _pyavrdbg_raw.vector_of_DIValueGroupSharedPtr_swap(self, *args)
    def get_allocator(self): return _pyavrdbg_raw.vector_of_DIValueGroupSharedPtr_get_allocator(self)
    def begin(self): return _pyavrdbg_raw.vector_of_DIValueGroupSharedPtr_begin(self)
    def end(self): return _pyavrdbg_raw.vector_of_DIValueGroupSharedPtr_end(self)
    def rbegin(self): return _pyavrdbg_raw.vector_of_DIValueGroupSharedPtr_rbegin(self)
    def rend(self): return _pyavrdbg_raw.vector_of_DIValueGroupSharedPtr_rend(self)
    def pop_back(self): return _pyavrdbg_raw.vector_of_DIValueGroupSharedPtr_pop_back(self)
    def erase(self, *args): return _pyavrdbg_raw.vector_of_DIValueGroupSharedPtr_erase(self, *args)
    def __init__(self, *args): 
        this = _pyavrdbg_raw.new_vector_of_DIValueGroupSharedPtr(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _pyavrdbg_raw.vector_of_DIValueGroupSharedPtr_push_back(self, *args)
    def front(self): return _pyavrdbg_raw.vector_of_DIValueGroupSharedPtr_front(self)
    def back(self): return _pyavrdbg_raw.vector_of_DIValueGroupSharedPtr_back(self)
    def assign(self, *args): return _pyavrdbg_raw.vector_of_DIValueGroupSharedPtr_assign(self, *args)
    def resize(self, *args): return _pyavrdbg_raw.vector_of_DIValueGroupSharedPtr_resize(self, *args)
    def insert(self, *args): return _pyavrdbg_raw.vector_of_DIValueGroupSharedPtr_insert(self, *args)
    def reserve(self, *args): return _pyavrdbg_raw.vector_of_DIValueGroupSharedPtr_reserve(self, *args)
    def capacity(self): return _pyavrdbg_raw.vector_of_DIValueGroupSharedPtr_capacity(self)
    __swig_destroy__ = _pyavrdbg_raw.delete_vector_of_DIValueGroupSharedPtr
    __del__ = lambda self : None;
vector_of_DIValueGroupSharedPtr_swigregister = _pyavrdbg_raw.vector_of_DIValueGroupSharedPtr_swigregister
vector_of_DIValueGroupSharedPtr_swigregister(vector_of_DIValueGroupSharedPtr)

class vector_of_DIValueSharedPtr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vector_of_DIValueSharedPtr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vector_of_DIValueSharedPtr, name)
    __repr__ = _swig_repr
    def iterator(self): return _pyavrdbg_raw.vector_of_DIValueSharedPtr_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _pyavrdbg_raw.vector_of_DIValueSharedPtr___nonzero__(self)
    def __bool__(self): return _pyavrdbg_raw.vector_of_DIValueSharedPtr___bool__(self)
    def __len__(self): return _pyavrdbg_raw.vector_of_DIValueSharedPtr___len__(self)
    def pop(self): return _pyavrdbg_raw.vector_of_DIValueSharedPtr_pop(self)
    def __getslice__(self, *args): return _pyavrdbg_raw.vector_of_DIValueSharedPtr___getslice__(self, *args)
    def __setslice__(self, *args): return _pyavrdbg_raw.vector_of_DIValueSharedPtr___setslice__(self, *args)
    def __delslice__(self, *args): return _pyavrdbg_raw.vector_of_DIValueSharedPtr___delslice__(self, *args)
    def __delitem__(self, *args): return _pyavrdbg_raw.vector_of_DIValueSharedPtr___delitem__(self, *args)
    def __getitem__(self, *args): return _pyavrdbg_raw.vector_of_DIValueSharedPtr___getitem__(self, *args)
    def __setitem__(self, *args): return _pyavrdbg_raw.vector_of_DIValueSharedPtr___setitem__(self, *args)
    def append(self, *args): return _pyavrdbg_raw.vector_of_DIValueSharedPtr_append(self, *args)
    def empty(self): return _pyavrdbg_raw.vector_of_DIValueSharedPtr_empty(self)
    def size(self): return _pyavrdbg_raw.vector_of_DIValueSharedPtr_size(self)
    def clear(self): return _pyavrdbg_raw.vector_of_DIValueSharedPtr_clear(self)
    def swap(self, *args): return _pyavrdbg_raw.vector_of_DIValueSharedPtr_swap(self, *args)
    def get_allocator(self): return _pyavrdbg_raw.vector_of_DIValueSharedPtr_get_allocator(self)
    def begin(self): return _pyavrdbg_raw.vector_of_DIValueSharedPtr_begin(self)
    def end(self): return _pyavrdbg_raw.vector_of_DIValueSharedPtr_end(self)
    def rbegin(self): return _pyavrdbg_raw.vector_of_DIValueSharedPtr_rbegin(self)
    def rend(self): return _pyavrdbg_raw.vector_of_DIValueSharedPtr_rend(self)
    def pop_back(self): return _pyavrdbg_raw.vector_of_DIValueSharedPtr_pop_back(self)
    def erase(self, *args): return _pyavrdbg_raw.vector_of_DIValueSharedPtr_erase(self, *args)
    def __init__(self, *args): 
        this = _pyavrdbg_raw.new_vector_of_DIValueSharedPtr(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _pyavrdbg_raw.vector_of_DIValueSharedPtr_push_back(self, *args)
    def front(self): return _pyavrdbg_raw.vector_of_DIValueSharedPtr_front(self)
    def back(self): return _pyavrdbg_raw.vector_of_DIValueSharedPtr_back(self)
    def assign(self, *args): return _pyavrdbg_raw.vector_of_DIValueSharedPtr_assign(self, *args)
    def resize(self, *args): return _pyavrdbg_raw.vector_of_DIValueSharedPtr_resize(self, *args)
    def insert(self, *args): return _pyavrdbg_raw.vector_of_DIValueSharedPtr_insert(self, *args)
    def reserve(self, *args): return _pyavrdbg_raw.vector_of_DIValueSharedPtr_reserve(self, *args)
    def capacity(self): return _pyavrdbg_raw.vector_of_DIValueSharedPtr_capacity(self)
    __swig_destroy__ = _pyavrdbg_raw.delete_vector_of_DIValueSharedPtr
    __del__ = lambda self : None;
vector_of_DIValueSharedPtr_swigregister = _pyavrdbg_raw.vector_of_DIValueSharedPtr_swigregister
vector_of_DIValueSharedPtr_swigregister(vector_of_DIValueSharedPtr)

class vector_of_DIInterfaceSharedPtr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vector_of_DIInterfaceSharedPtr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vector_of_DIInterfaceSharedPtr, name)
    __repr__ = _swig_repr
    def iterator(self): return _pyavrdbg_raw.vector_of_DIInterfaceSharedPtr_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _pyavrdbg_raw.vector_of_DIInterfaceSharedPtr___nonzero__(self)
    def __bool__(self): return _pyavrdbg_raw.vector_of_DIInterfaceSharedPtr___bool__(self)
    def __len__(self): return _pyavrdbg_raw.vector_of_DIInterfaceSharedPtr___len__(self)
    def pop(self): return _pyavrdbg_raw.vector_of_DIInterfaceSharedPtr_pop(self)
    def __getslice__(self, *args): return _pyavrdbg_raw.vector_of_DIInterfaceSharedPtr___getslice__(self, *args)
    def __setslice__(self, *args): return _pyavrdbg_raw.vector_of_DIInterfaceSharedPtr___setslice__(self, *args)
    def __delslice__(self, *args): return _pyavrdbg_raw.vector_of_DIInterfaceSharedPtr___delslice__(self, *args)
    def __delitem__(self, *args): return _pyavrdbg_raw.vector_of_DIInterfaceSharedPtr___delitem__(self, *args)
    def __getitem__(self, *args): return _pyavrdbg_raw.vector_of_DIInterfaceSharedPtr___getitem__(self, *args)
    def __setitem__(self, *args): return _pyavrdbg_raw.vector_of_DIInterfaceSharedPtr___setitem__(self, *args)
    def append(self, *args): return _pyavrdbg_raw.vector_of_DIInterfaceSharedPtr_append(self, *args)
    def empty(self): return _pyavrdbg_raw.vector_of_DIInterfaceSharedPtr_empty(self)
    def size(self): return _pyavrdbg_raw.vector_of_DIInterfaceSharedPtr_size(self)
    def clear(self): return _pyavrdbg_raw.vector_of_DIInterfaceSharedPtr_clear(self)
    def swap(self, *args): return _pyavrdbg_raw.vector_of_DIInterfaceSharedPtr_swap(self, *args)
    def get_allocator(self): return _pyavrdbg_raw.vector_of_DIInterfaceSharedPtr_get_allocator(self)
    def begin(self): return _pyavrdbg_raw.vector_of_DIInterfaceSharedPtr_begin(self)
    def end(self): return _pyavrdbg_raw.vector_of_DIInterfaceSharedPtr_end(self)
    def rbegin(self): return _pyavrdbg_raw.vector_of_DIInterfaceSharedPtr_rbegin(self)
    def rend(self): return _pyavrdbg_raw.vector_of_DIInterfaceSharedPtr_rend(self)
    def pop_back(self): return _pyavrdbg_raw.vector_of_DIInterfaceSharedPtr_pop_back(self)
    def erase(self, *args): return _pyavrdbg_raw.vector_of_DIInterfaceSharedPtr_erase(self, *args)
    def __init__(self, *args): 
        this = _pyavrdbg_raw.new_vector_of_DIInterfaceSharedPtr(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _pyavrdbg_raw.vector_of_DIInterfaceSharedPtr_push_back(self, *args)
    def front(self): return _pyavrdbg_raw.vector_of_DIInterfaceSharedPtr_front(self)
    def back(self): return _pyavrdbg_raw.vector_of_DIInterfaceSharedPtr_back(self)
    def assign(self, *args): return _pyavrdbg_raw.vector_of_DIInterfaceSharedPtr_assign(self, *args)
    def resize(self, *args): return _pyavrdbg_raw.vector_of_DIInterfaceSharedPtr_resize(self, *args)
    def insert(self, *args): return _pyavrdbg_raw.vector_of_DIInterfaceSharedPtr_insert(self, *args)
    def reserve(self, *args): return _pyavrdbg_raw.vector_of_DIInterfaceSharedPtr_reserve(self, *args)
    def capacity(self): return _pyavrdbg_raw.vector_of_DIInterfaceSharedPtr_capacity(self)
    __swig_destroy__ = _pyavrdbg_raw.delete_vector_of_DIInterfaceSharedPtr
    __del__ = lambda self : None;
vector_of_DIInterfaceSharedPtr_swigregister = _pyavrdbg_raw.vector_of_DIInterfaceSharedPtr_swigregister
vector_of_DIInterfaceSharedPtr_swigregister(vector_of_DIInterfaceSharedPtr)

class vector_of_DIPropertyGroupSharedPtr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vector_of_DIPropertyGroupSharedPtr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vector_of_DIPropertyGroupSharedPtr, name)
    __repr__ = _swig_repr
    def iterator(self): return _pyavrdbg_raw.vector_of_DIPropertyGroupSharedPtr_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _pyavrdbg_raw.vector_of_DIPropertyGroupSharedPtr___nonzero__(self)
    def __bool__(self): return _pyavrdbg_raw.vector_of_DIPropertyGroupSharedPtr___bool__(self)
    def __len__(self): return _pyavrdbg_raw.vector_of_DIPropertyGroupSharedPtr___len__(self)
    def pop(self): return _pyavrdbg_raw.vector_of_DIPropertyGroupSharedPtr_pop(self)
    def __getslice__(self, *args): return _pyavrdbg_raw.vector_of_DIPropertyGroupSharedPtr___getslice__(self, *args)
    def __setslice__(self, *args): return _pyavrdbg_raw.vector_of_DIPropertyGroupSharedPtr___setslice__(self, *args)
    def __delslice__(self, *args): return _pyavrdbg_raw.vector_of_DIPropertyGroupSharedPtr___delslice__(self, *args)
    def __delitem__(self, *args): return _pyavrdbg_raw.vector_of_DIPropertyGroupSharedPtr___delitem__(self, *args)
    def __getitem__(self, *args): return _pyavrdbg_raw.vector_of_DIPropertyGroupSharedPtr___getitem__(self, *args)
    def __setitem__(self, *args): return _pyavrdbg_raw.vector_of_DIPropertyGroupSharedPtr___setitem__(self, *args)
    def append(self, *args): return _pyavrdbg_raw.vector_of_DIPropertyGroupSharedPtr_append(self, *args)
    def empty(self): return _pyavrdbg_raw.vector_of_DIPropertyGroupSharedPtr_empty(self)
    def size(self): return _pyavrdbg_raw.vector_of_DIPropertyGroupSharedPtr_size(self)
    def clear(self): return _pyavrdbg_raw.vector_of_DIPropertyGroupSharedPtr_clear(self)
    def swap(self, *args): return _pyavrdbg_raw.vector_of_DIPropertyGroupSharedPtr_swap(self, *args)
    def get_allocator(self): return _pyavrdbg_raw.vector_of_DIPropertyGroupSharedPtr_get_allocator(self)
    def begin(self): return _pyavrdbg_raw.vector_of_DIPropertyGroupSharedPtr_begin(self)
    def end(self): return _pyavrdbg_raw.vector_of_DIPropertyGroupSharedPtr_end(self)
    def rbegin(self): return _pyavrdbg_raw.vector_of_DIPropertyGroupSharedPtr_rbegin(self)
    def rend(self): return _pyavrdbg_raw.vector_of_DIPropertyGroupSharedPtr_rend(self)
    def pop_back(self): return _pyavrdbg_raw.vector_of_DIPropertyGroupSharedPtr_pop_back(self)
    def erase(self, *args): return _pyavrdbg_raw.vector_of_DIPropertyGroupSharedPtr_erase(self, *args)
    def __init__(self, *args): 
        this = _pyavrdbg_raw.new_vector_of_DIPropertyGroupSharedPtr(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _pyavrdbg_raw.vector_of_DIPropertyGroupSharedPtr_push_back(self, *args)
    def front(self): return _pyavrdbg_raw.vector_of_DIPropertyGroupSharedPtr_front(self)
    def back(self): return _pyavrdbg_raw.vector_of_DIPropertyGroupSharedPtr_back(self)
    def assign(self, *args): return _pyavrdbg_raw.vector_of_DIPropertyGroupSharedPtr_assign(self, *args)
    def resize(self, *args): return _pyavrdbg_raw.vector_of_DIPropertyGroupSharedPtr_resize(self, *args)
    def insert(self, *args): return _pyavrdbg_raw.vector_of_DIPropertyGroupSharedPtr_insert(self, *args)
    def reserve(self, *args): return _pyavrdbg_raw.vector_of_DIPropertyGroupSharedPtr_reserve(self, *args)
    def capacity(self): return _pyavrdbg_raw.vector_of_DIPropertyGroupSharedPtr_capacity(self)
    __swig_destroy__ = _pyavrdbg_raw.delete_vector_of_DIPropertyGroupSharedPtr
    __del__ = lambda self : None;
vector_of_DIPropertyGroupSharedPtr_swigregister = _pyavrdbg_raw.vector_of_DIPropertyGroupSharedPtr_swigregister
vector_of_DIPropertyGroupSharedPtr_swigregister(vector_of_DIPropertyGroupSharedPtr)

class vector_of_DIPropertySharedPtr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vector_of_DIPropertySharedPtr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vector_of_DIPropertySharedPtr, name)
    __repr__ = _swig_repr
    def iterator(self): return _pyavrdbg_raw.vector_of_DIPropertySharedPtr_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _pyavrdbg_raw.vector_of_DIPropertySharedPtr___nonzero__(self)
    def __bool__(self): return _pyavrdbg_raw.vector_of_DIPropertySharedPtr___bool__(self)
    def __len__(self): return _pyavrdbg_raw.vector_of_DIPropertySharedPtr___len__(self)
    def pop(self): return _pyavrdbg_raw.vector_of_DIPropertySharedPtr_pop(self)
    def __getslice__(self, *args): return _pyavrdbg_raw.vector_of_DIPropertySharedPtr___getslice__(self, *args)
    def __setslice__(self, *args): return _pyavrdbg_raw.vector_of_DIPropertySharedPtr___setslice__(self, *args)
    def __delslice__(self, *args): return _pyavrdbg_raw.vector_of_DIPropertySharedPtr___delslice__(self, *args)
    def __delitem__(self, *args): return _pyavrdbg_raw.vector_of_DIPropertySharedPtr___delitem__(self, *args)
    def __getitem__(self, *args): return _pyavrdbg_raw.vector_of_DIPropertySharedPtr___getitem__(self, *args)
    def __setitem__(self, *args): return _pyavrdbg_raw.vector_of_DIPropertySharedPtr___setitem__(self, *args)
    def append(self, *args): return _pyavrdbg_raw.vector_of_DIPropertySharedPtr_append(self, *args)
    def empty(self): return _pyavrdbg_raw.vector_of_DIPropertySharedPtr_empty(self)
    def size(self): return _pyavrdbg_raw.vector_of_DIPropertySharedPtr_size(self)
    def clear(self): return _pyavrdbg_raw.vector_of_DIPropertySharedPtr_clear(self)
    def swap(self, *args): return _pyavrdbg_raw.vector_of_DIPropertySharedPtr_swap(self, *args)
    def get_allocator(self): return _pyavrdbg_raw.vector_of_DIPropertySharedPtr_get_allocator(self)
    def begin(self): return _pyavrdbg_raw.vector_of_DIPropertySharedPtr_begin(self)
    def end(self): return _pyavrdbg_raw.vector_of_DIPropertySharedPtr_end(self)
    def rbegin(self): return _pyavrdbg_raw.vector_of_DIPropertySharedPtr_rbegin(self)
    def rend(self): return _pyavrdbg_raw.vector_of_DIPropertySharedPtr_rend(self)
    def pop_back(self): return _pyavrdbg_raw.vector_of_DIPropertySharedPtr_pop_back(self)
    def erase(self, *args): return _pyavrdbg_raw.vector_of_DIPropertySharedPtr_erase(self, *args)
    def __init__(self, *args): 
        this = _pyavrdbg_raw.new_vector_of_DIPropertySharedPtr(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _pyavrdbg_raw.vector_of_DIPropertySharedPtr_push_back(self, *args)
    def front(self): return _pyavrdbg_raw.vector_of_DIPropertySharedPtr_front(self)
    def back(self): return _pyavrdbg_raw.vector_of_DIPropertySharedPtr_back(self)
    def assign(self, *args): return _pyavrdbg_raw.vector_of_DIPropertySharedPtr_assign(self, *args)
    def resize(self, *args): return _pyavrdbg_raw.vector_of_DIPropertySharedPtr_resize(self, *args)
    def insert(self, *args): return _pyavrdbg_raw.vector_of_DIPropertySharedPtr_insert(self, *args)
    def reserve(self, *args): return _pyavrdbg_raw.vector_of_DIPropertySharedPtr_reserve(self, *args)
    def capacity(self): return _pyavrdbg_raw.vector_of_DIPropertySharedPtr_capacity(self)
    __swig_destroy__ = _pyavrdbg_raw.delete_vector_of_DIPropertySharedPtr
    __del__ = lambda self : None;
vector_of_DIPropertySharedPtr_swigregister = _pyavrdbg_raw.vector_of_DIPropertySharedPtr_swigregister
vector_of_DIPropertySharedPtr_swigregister(vector_of_DIPropertySharedPtr)

class vector_of_DIVariantSharedPtr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vector_of_DIVariantSharedPtr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vector_of_DIVariantSharedPtr, name)
    __repr__ = _swig_repr
    def iterator(self): return _pyavrdbg_raw.vector_of_DIVariantSharedPtr_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _pyavrdbg_raw.vector_of_DIVariantSharedPtr___nonzero__(self)
    def __bool__(self): return _pyavrdbg_raw.vector_of_DIVariantSharedPtr___bool__(self)
    def __len__(self): return _pyavrdbg_raw.vector_of_DIVariantSharedPtr___len__(self)
    def pop(self): return _pyavrdbg_raw.vector_of_DIVariantSharedPtr_pop(self)
    def __getslice__(self, *args): return _pyavrdbg_raw.vector_of_DIVariantSharedPtr___getslice__(self, *args)
    def __setslice__(self, *args): return _pyavrdbg_raw.vector_of_DIVariantSharedPtr___setslice__(self, *args)
    def __delslice__(self, *args): return _pyavrdbg_raw.vector_of_DIVariantSharedPtr___delslice__(self, *args)
    def __delitem__(self, *args): return _pyavrdbg_raw.vector_of_DIVariantSharedPtr___delitem__(self, *args)
    def __getitem__(self, *args): return _pyavrdbg_raw.vector_of_DIVariantSharedPtr___getitem__(self, *args)
    def __setitem__(self, *args): return _pyavrdbg_raw.vector_of_DIVariantSharedPtr___setitem__(self, *args)
    def append(self, *args): return _pyavrdbg_raw.vector_of_DIVariantSharedPtr_append(self, *args)
    def empty(self): return _pyavrdbg_raw.vector_of_DIVariantSharedPtr_empty(self)
    def size(self): return _pyavrdbg_raw.vector_of_DIVariantSharedPtr_size(self)
    def clear(self): return _pyavrdbg_raw.vector_of_DIVariantSharedPtr_clear(self)
    def swap(self, *args): return _pyavrdbg_raw.vector_of_DIVariantSharedPtr_swap(self, *args)
    def get_allocator(self): return _pyavrdbg_raw.vector_of_DIVariantSharedPtr_get_allocator(self)
    def begin(self): return _pyavrdbg_raw.vector_of_DIVariantSharedPtr_begin(self)
    def end(self): return _pyavrdbg_raw.vector_of_DIVariantSharedPtr_end(self)
    def rbegin(self): return _pyavrdbg_raw.vector_of_DIVariantSharedPtr_rbegin(self)
    def rend(self): return _pyavrdbg_raw.vector_of_DIVariantSharedPtr_rend(self)
    def pop_back(self): return _pyavrdbg_raw.vector_of_DIVariantSharedPtr_pop_back(self)
    def erase(self, *args): return _pyavrdbg_raw.vector_of_DIVariantSharedPtr_erase(self, *args)
    def __init__(self, *args): 
        this = _pyavrdbg_raw.new_vector_of_DIVariantSharedPtr(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _pyavrdbg_raw.vector_of_DIVariantSharedPtr_push_back(self, *args)
    def front(self): return _pyavrdbg_raw.vector_of_DIVariantSharedPtr_front(self)
    def back(self): return _pyavrdbg_raw.vector_of_DIVariantSharedPtr_back(self)
    def assign(self, *args): return _pyavrdbg_raw.vector_of_DIVariantSharedPtr_assign(self, *args)
    def resize(self, *args): return _pyavrdbg_raw.vector_of_DIVariantSharedPtr_resize(self, *args)
    def insert(self, *args): return _pyavrdbg_raw.vector_of_DIVariantSharedPtr_insert(self, *args)
    def reserve(self, *args): return _pyavrdbg_raw.vector_of_DIVariantSharedPtr_reserve(self, *args)
    def capacity(self): return _pyavrdbg_raw.vector_of_DIVariantSharedPtr_capacity(self)
    __swig_destroy__ = _pyavrdbg_raw.delete_vector_of_DIVariantSharedPtr
    __del__ = lambda self : None;
vector_of_DIVariantSharedPtr_swigregister = _pyavrdbg_raw.vector_of_DIVariantSharedPtr_swigregister
vector_of_DIVariantSharedPtr_swigregister(vector_of_DIVariantSharedPtr)

class DIDevice(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DIDevice, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DIDevice, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def getName(self): return _pyavrdbg_raw.DIDevice_getName(self)
    def getArchitecture(self): return _pyavrdbg_raw.DIDevice_getArchitecture(self)
    def getSeries(self): return _pyavrdbg_raw.DIDevice_getSeries(self)
    def getAddressSpaces(self): return _pyavrdbg_raw.DIDevice_getAddressSpaces(self)
    def getAddressSpaceById(self, *args): return _pyavrdbg_raw.DIDevice_getAddressSpaceById(self, *args)
    def getInterfaces(self): return _pyavrdbg_raw.DIDevice_getInterfaces(self)
    def getInterfaceByName(self, *args): return _pyavrdbg_raw.DIDevice_getInterfaceByName(self, *args)
    def getPeripherals(self): return _pyavrdbg_raw.DIDevice_getPeripherals(self)
    def getCores(self): return _pyavrdbg_raw.DIDevice_getCores(self)
    def getModuleByName(self, *args): return _pyavrdbg_raw.DIDevice_getModuleByName(self, *args)
    def getPropertyGroups(self): return _pyavrdbg_raw.DIDevice_getPropertyGroups(self)
    def getPropertyGroupByName(self, *args): return _pyavrdbg_raw.DIDevice_getPropertyGroupByName(self, *args)
    def getParameters(self): return _pyavrdbg_raw.DIDevice_getParameters(self)
    def getVariants(self): return _pyavrdbg_raw.DIDevice_getVariants(self)
    def getModuleDefinitions(self): return _pyavrdbg_raw.DIDevice_getModuleDefinitions(self)
    def getModuleDefinitionByName(self, *args): return _pyavrdbg_raw.DIDevice_getModuleDefinitionByName(self, *args)
    __swig_destroy__ = _pyavrdbg_raw.delete_DIDevice
    __del__ = lambda self : None;
DIDevice_swigregister = _pyavrdbg_raw.DIDevice_swigregister
DIDevice_swigregister(DIDevice)
DEVICE_INFO_ARCHITECTURE_AVR8 = cvar.DEVICE_INFO_ARCHITECTURE_AVR8
DEVICE_INFO_ARCHITECTURE_AVR8L = cvar.DEVICE_INFO_ARCHITECTURE_AVR8L
DEVICE_INFO_ARCHITECTURE_AVR8_XMEGA = cvar.DEVICE_INFO_ARCHITECTURE_AVR8_XMEGA
DEVICE_INFO_ARCHITECTURE_AVR32_UC3 = cvar.DEVICE_INFO_ARCHITECTURE_AVR32_UC3
DEVICE_INFO_ARCHITECTURE_AVR32_AP7 = cvar.DEVICE_INFO_ARCHITECTURE_AVR32_AP7
DEVICE_INFO_ARCHITECTURE_CORTEX_M0 = cvar.DEVICE_INFO_ARCHITECTURE_CORTEX_M0
DEVICE_INFO_ARCHITECTURE_CORTEX_M3 = cvar.DEVICE_INFO_ARCHITECTURE_CORTEX_M3
DEVICE_INFO_ARCHITECTURE_CORTEX_M4 = cvar.DEVICE_INFO_ARCHITECTURE_CORTEX_M4
DEVICE_INFO_ARCHITECTURE_CORTEX_M7 = cvar.DEVICE_INFO_ARCHITECTURE_CORTEX_M7
DEVICE_INFO_ADDRESS_SPACE_ID_PROG = cvar.DEVICE_INFO_ADDRESS_SPACE_ID_PROG
DEVICE_INFO_ADDRESS_SPACE_ID_DATA = cvar.DEVICE_INFO_ADDRESS_SPACE_ID_DATA
DEVICE_INFO_ADDRESS_SPACE_ID_EEPROM = cvar.DEVICE_INFO_ADDRESS_SPACE_ID_EEPROM
DEVICE_INFO_ADDRESS_SPACE_ID_SIGNATURES = cvar.DEVICE_INFO_ADDRESS_SPACE_ID_SIGNATURES
DEVICE_INFO_ADDRESS_SPACE_ID_FUSES = cvar.DEVICE_INFO_ADDRESS_SPACE_ID_FUSES
DEVICE_INFO_ADDRESS_SPACE_ID_LOCKBITS = cvar.DEVICE_INFO_ADDRESS_SPACE_ID_LOCKBITS
DEVICE_INFO_ADDRESS_SPACE_ID_USER_SIGNATURES = cvar.DEVICE_INFO_ADDRESS_SPACE_ID_USER_SIGNATURES
DEVICE_INFO_ADDRESS_SPACE_ID_PROD_SIGNATURES = cvar.DEVICE_INFO_ADDRESS_SPACE_ID_PROD_SIGNATURES
DEVICE_INFO_ADDRESS_SPACE_ID_BASE = cvar.DEVICE_INFO_ADDRESS_SPACE_ID_BASE
DEVICE_INFO_ADDRESS_SPACE_ID_OSCCAL = cvar.DEVICE_INFO_ADDRESS_SPACE_ID_OSCCAL
DEVICE_INFO_MEMORY_SEGMENT_TYPE_DATA = cvar.DEVICE_INFO_MEMORY_SEGMENT_TYPE_DATA
DEVICE_INFO_MEMORY_SEGMENT_TYPE_REGS = cvar.DEVICE_INFO_MEMORY_SEGMENT_TYPE_REGS
DEVICE_INFO_MEMORY_SEGMENT_TYPE_IO = cvar.DEVICE_INFO_MEMORY_SEGMENT_TYPE_IO
DEVICE_INFO_MEMORY_SEGMENT_TYPE_PROG = cvar.DEVICE_INFO_MEMORY_SEGMENT_TYPE_PROG
DEVICE_INFO_MEMORY_SEGMENT_TYPE_EEPROM = cvar.DEVICE_INFO_MEMORY_SEGMENT_TYPE_EEPROM
DEVICE_INFO_MEMORY_SEGMENT_NAME_IO = cvar.DEVICE_INFO_MEMORY_SEGMENT_NAME_IO
DEVICE_INFO_MEMORY_SEGMENT_NAME_MAPPED_IO = cvar.DEVICE_INFO_MEMORY_SEGMENT_NAME_MAPPED_IO
DEVICE_INFO_MEMORY_SEGMENT_NAME_MAPPED_EEPROM = cvar.DEVICE_INFO_MEMORY_SEGMENT_NAME_MAPPED_EEPROM
DEVICE_INFO_MEMORY_SEGMENT_NAME_EEPROM = cvar.DEVICE_INFO_MEMORY_SEGMENT_NAME_EEPROM
DEVICE_INFO_MEMORY_SEGMENT_NAME_REGISTERS = cvar.DEVICE_INFO_MEMORY_SEGMENT_NAME_REGISTERS
DEVICE_INFO_MEMORY_SEGMENT_NAME_IRAM = cvar.DEVICE_INFO_MEMORY_SEGMENT_NAME_IRAM
DEVICE_INFO_MEMORY_SEGMENT_NAME_XRAM = cvar.DEVICE_INFO_MEMORY_SEGMENT_NAME_XRAM
DEVICE_INFO_MEMORY_SEGMENT_NAME_INTERNAL_SRAM = cvar.DEVICE_INFO_MEMORY_SEGMENT_NAME_INTERNAL_SRAM
DEVICE_INFO_MEMORY_SEGMENT_NAME_APP_SECTION = cvar.DEVICE_INFO_MEMORY_SEGMENT_NAME_APP_SECTION
DEVICE_INFO_MEMORY_SEGMENT_NAME_APPTABLE_SECTION = cvar.DEVICE_INFO_MEMORY_SEGMENT_NAME_APPTABLE_SECTION
DEVICE_INFO_MEMORY_SEGMENT_NAME_BOOT_SECTION = cvar.DEVICE_INFO_MEMORY_SEGMENT_NAME_BOOT_SECTION
DEVICE_INFO_MEMORY_SEGMENT_NAME_PERIPHERALS = cvar.DEVICE_INFO_MEMORY_SEGMENT_NAME_PERIPHERALS

class DIAddressSpace(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DIAddressSpace, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DIAddressSpace, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def getId(self): return _pyavrdbg_raw.DIAddressSpace_getId(self)
    def getStart(self): return _pyavrdbg_raw.DIAddressSpace_getStart(self)
    def getSize(self): return _pyavrdbg_raw.DIAddressSpace_getSize(self)
    def isBigEndian(self): return _pyavrdbg_raw.DIAddressSpace_isBigEndian(self)
    def getMemorySegments(self): return _pyavrdbg_raw.DIAddressSpace_getMemorySegments(self)
    def getMemorySegmentByName(self, *args): return _pyavrdbg_raw.DIAddressSpace_getMemorySegmentByName(self, *args)
    def getMemorySegmentsByType(self, *args): return _pyavrdbg_raw.DIAddressSpace_getMemorySegmentsByType(self, *args)
    __swig_destroy__ = _pyavrdbg_raw.delete_DIAddressSpace
    __del__ = lambda self : None;
DIAddressSpace_swigregister = _pyavrdbg_raw.DIAddressSpace_swigregister
DIAddressSpace_swigregister(DIAddressSpace)

class DIMemorySegment(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DIMemorySegment, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DIMemorySegment, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def getName(self): return _pyavrdbg_raw.DIMemorySegment_getName(self)
    def getStart(self): return _pyavrdbg_raw.DIMemorySegment_getStart(self)
    def getSize(self): return _pyavrdbg_raw.DIMemorySegment_getSize(self)
    def getMirrorMask(self): return _pyavrdbg_raw.DIMemorySegment_getMirrorMask(self)
    def getType(self): return _pyavrdbg_raw.DIMemorySegment_getType(self)
    def isReadable(self): return _pyavrdbg_raw.DIMemorySegment_isReadable(self)
    def isWriteable(self): return _pyavrdbg_raw.DIMemorySegment_isWriteable(self)
    def isExecutable(self): return _pyavrdbg_raw.DIMemorySegment_isExecutable(self)
    def getWordSize(self): return _pyavrdbg_raw.DIMemorySegment_getWordSize(self)
    def getPageSize(self): return _pyavrdbg_raw.DIMemorySegment_getPageSize(self)
    def getErasePageSize(self): return _pyavrdbg_raw.DIMemorySegment_getErasePageSize(self)
    __swig_destroy__ = _pyavrdbg_raw.delete_DIMemorySegment
    __del__ = lambda self : None;
DIMemorySegment_swigregister = _pyavrdbg_raw.DIMemorySegment_swigregister
DIMemorySegment_swigregister(DIMemorySegment)

class DIModule(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DIModule, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DIModule, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def getName(self): return _pyavrdbg_raw.DIModule_getName(self)
    def getId(self): return _pyavrdbg_raw.DIModule_getId(self)
    def getVersion(self): return _pyavrdbg_raw.DIModule_getVersion(self)
    def getRegisterGroups(self): return _pyavrdbg_raw.DIModule_getRegisterGroups(self)
    def getRegisterGroupByName(self, *args): return _pyavrdbg_raw.DIModule_getRegisterGroupByName(self, *args)
    def getPropertyGroups(self): return _pyavrdbg_raw.DIModule_getPropertyGroups(self)
    def getPropertyGroupByName(self, *args): return _pyavrdbg_raw.DIModule_getPropertyGroupByName(self, *args)
    def getModuleDefinition(self): return _pyavrdbg_raw.DIModule_getModuleDefinition(self)
    def bindBitfieldValues(self, *args): return _pyavrdbg_raw.DIModule_bindBitfieldValues(self, *args)
    __swig_destroy__ = _pyavrdbg_raw.delete_DIModule
    __del__ = lambda self : None;
DIModule_swigregister = _pyavrdbg_raw.DIModule_swigregister
DIModule_swigregister(DIModule)

class DIRegisterGroup(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DIRegisterGroup, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DIRegisterGroup, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def getName(self): return _pyavrdbg_raw.DIRegisterGroup_getName(self)
    def getAddressSpace(self): return _pyavrdbg_raw.DIRegisterGroup_getAddressSpace(self)
    def getAddress(self): return _pyavrdbg_raw.DIRegisterGroup_getAddress(self)
    def getOffset(self): return _pyavrdbg_raw.DIRegisterGroup_getOffset(self)
    def getSize(self): return _pyavrdbg_raw.DIRegisterGroup_getSize(self)
    def getRegisters(self): return _pyavrdbg_raw.DIRegisterGroup_getRegisters(self)
    def getRegisterByName(self, *args): return _pyavrdbg_raw.DIRegisterGroup_getRegisterByName(self, *args)
    def getRegisterGroups(self): return _pyavrdbg_raw.DIRegisterGroup_getRegisterGroups(self)
    def getRegisterGroupByName(self, *args): return _pyavrdbg_raw.DIRegisterGroup_getRegisterGroupByName(self, *args)
    def getRegisterGroupDefinition(self): return _pyavrdbg_raw.DIRegisterGroup_getRegisterGroupDefinition(self)
    __swig_destroy__ = _pyavrdbg_raw.delete_DIRegisterGroup
    __del__ = lambda self : None;
DIRegisterGroup_swigregister = _pyavrdbg_raw.DIRegisterGroup_swigregister
DIRegisterGroup_swigregister(DIRegisterGroup)

class DIRegister(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DIRegister, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DIRegister, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def getName(self): return _pyavrdbg_raw.DIRegister_getName(self)
    def getAddress(self): return _pyavrdbg_raw.DIRegister_getAddress(self)
    def getOffset(self): return _pyavrdbg_raw.DIRegister_getOffset(self)
    def getRepeatCount(self): return _pyavrdbg_raw.DIRegister_getRepeatCount(self)
    def isReadable(self): return _pyavrdbg_raw.DIRegister_isReadable(self)
    def isWritable(self): return _pyavrdbg_raw.DIRegister_isWritable(self)
    def getAccess(self): return _pyavrdbg_raw.DIRegister_getAccess(self)
    def isReadableByOcd(self): return _pyavrdbg_raw.DIRegister_isReadableByOcd(self)
    def isWritableByOcd(self): return _pyavrdbg_raw.DIRegister_isWritableByOcd(self)
    def hasDefaultValue(self): return _pyavrdbg_raw.DIRegister_hasDefaultValue(self)
    def getDefaultValue(self): return _pyavrdbg_raw.DIRegister_getDefaultValue(self)
    def getSize(self): return _pyavrdbg_raw.DIRegister_getSize(self)
    def getBitfields(self): return _pyavrdbg_raw.DIRegister_getBitfields(self)
    def getBitfieldByName(self, *args): return _pyavrdbg_raw.DIRegister_getBitfieldByName(self, *args)
    __swig_destroy__ = _pyavrdbg_raw.delete_DIRegister
    __del__ = lambda self : None;
DIRegister_swigregister = _pyavrdbg_raw.DIRegister_swigregister
DIRegister_swigregister(DIRegister)

class DIBitfield(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DIBitfield, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DIBitfield, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def getName(self): return _pyavrdbg_raw.DIBitfield_getName(self)
    def getMask(self): return _pyavrdbg_raw.DIBitfield_getMask(self)
    def getFirstBit(self): return _pyavrdbg_raw.DIBitfield_getFirstBit(self)
    def getNumBits(self): return _pyavrdbg_raw.DIBitfield_getNumBits(self)
    def isReadable(self): return _pyavrdbg_raw.DIBitfield_isReadable(self)
    def isWritable(self): return _pyavrdbg_raw.DIBitfield_isWritable(self)
    def getAccess(self): return _pyavrdbg_raw.DIBitfield_getAccess(self)
    def getValues(self): return _pyavrdbg_raw.DIBitfield_getValues(self)
    def findAndBindValues(self, *args): return _pyavrdbg_raw.DIBitfield_findAndBindValues(self, *args)
    __swig_destroy__ = _pyavrdbg_raw.delete_DIBitfield
    __del__ = lambda self : None;
DIBitfield_swigregister = _pyavrdbg_raw.DIBitfield_swigregister
DIBitfield_swigregister(DIBitfield)

class DIValueGroup(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DIValueGroup, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DIValueGroup, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def getName(self): return _pyavrdbg_raw.DIValueGroup_getName(self)
    def getValues(self): return _pyavrdbg_raw.DIValueGroup_getValues(self)
    def getValueByName(self, *args): return _pyavrdbg_raw.DIValueGroup_getValueByName(self, *args)
    __swig_destroy__ = _pyavrdbg_raw.delete_DIValueGroup
    __del__ = lambda self : None;
DIValueGroup_swigregister = _pyavrdbg_raw.DIValueGroup_swigregister
DIValueGroup_swigregister(DIValueGroup)

class DIValue(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DIValue, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DIValue, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def getName(self): return _pyavrdbg_raw.DIValue_getName(self)
    def getValue(self): return _pyavrdbg_raw.DIValue_getValue(self)
    def getSubValues(self): return _pyavrdbg_raw.DIValue_getSubValues(self)
    __swig_destroy__ = _pyavrdbg_raw.delete_DIValue
    __del__ = lambda self : None;
DIValue_swigregister = _pyavrdbg_raw.DIValue_swigregister
DIValue_swigregister(DIValue)

class DIPropertyGroup(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DIPropertyGroup, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DIPropertyGroup, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def getName(self): return _pyavrdbg_raw.DIPropertyGroup_getName(self)
    def getProperties(self): return _pyavrdbg_raw.DIPropertyGroup_getProperties(self)
    def getPropertyByName(self, *args): return _pyavrdbg_raw.DIPropertyGroup_getPropertyByName(self, *args)
    __swig_destroy__ = _pyavrdbg_raw.delete_DIPropertyGroup
    __del__ = lambda self : None;
DIPropertyGroup_swigregister = _pyavrdbg_raw.DIPropertyGroup_swigregister
DIPropertyGroup_swigregister(DIPropertyGroup)

class DIProperty(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DIProperty, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DIProperty, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def getName(self): return _pyavrdbg_raw.DIProperty_getName(self)
    def getValue(self): return _pyavrdbg_raw.DIProperty_getValue(self)
    def getUIntValue(self): return _pyavrdbg_raw.DIProperty_getUIntValue(self)
    def getIntValue(self): return _pyavrdbg_raw.DIProperty_getIntValue(self)
    def getUInt64Value(self): return _pyavrdbg_raw.DIProperty_getUInt64Value(self)
    def getBoolValue(self): return _pyavrdbg_raw.DIProperty_getBoolValue(self)
    __swig_destroy__ = _pyavrdbg_raw.delete_DIProperty
    __del__ = lambda self : None;
DIProperty_swigregister = _pyavrdbg_raw.DIProperty_swigregister
DIProperty_swigregister(DIProperty)

class DIInterface(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DIInterface, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DIInterface, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def getName(self): return _pyavrdbg_raw.DIInterface_getName(self)
    def getType(self): return _pyavrdbg_raw.DIInterface_getType(self)
    __swig_destroy__ = _pyavrdbg_raw.delete_DIInterface
    __del__ = lambda self : None;
DIInterface_swigregister = _pyavrdbg_raw.DIInterface_swigregister
DIInterface_swigregister(DIInterface)

class DITool(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DITool, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DITool, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def getName(self): return _pyavrdbg_raw.DITool_getName(self)
    __swig_destroy__ = _pyavrdbg_raw.delete_DITool
    __del__ = lambda self : None;
DITool_swigregister = _pyavrdbg_raw.DITool_swigregister
DITool_swigregister(DITool)

class DIVariant(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DIVariant, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DIVariant, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def getName(self): return _pyavrdbg_raw.DIVariant_getName(self)
    def getVccMin(self): return _pyavrdbg_raw.DIVariant_getVccMin(self)
    def getVccMax(self): return _pyavrdbg_raw.DIVariant_getVccMax(self)
    __swig_destroy__ = _pyavrdbg_raw.delete_DIVariant
    __del__ = lambda self : None;
DIVariant_swigregister = _pyavrdbg_raw.DIVariant_swigregister
DIVariant_swigregister(DIVariant)

class ITargetEventListener(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ITargetEventListener, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ITargetEventListener, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    AVR8_BREAK_CAUSE_UNKNOWN = _pyavrdbg_raw.ITargetEventListener_AVR8_BREAK_CAUSE_UNKNOWN
    AVR8_BREAK_CAUSE_PROGRAM = _pyavrdbg_raw.ITargetEventListener_AVR8_BREAK_CAUSE_PROGRAM
    AVR8_BREAK_CAUSE_PDSB = _pyavrdbg_raw.ITargetEventListener_AVR8_BREAK_CAUSE_PDSB
    AVR8_BREAK_CAUSE_PDMSB = _pyavrdbg_raw.ITargetEventListener_AVR8_BREAK_CAUSE_PDMSB
    A0 = _pyavrdbg_raw.ITargetEventListener_A0
    B0 = _pyavrdbg_raw.ITargetEventListener_B0
    RESET_RELEASED = _pyavrdbg_raw.ITargetEventListener_RESET_RELEASED
    RESET_APPLIED = _pyavrdbg_raw.ITargetEventListener_RESET_APPLIED
    TARGET_POWER_OFF = _pyavrdbg_raw.ITargetEventListener_TARGET_POWER_OFF
    TARGET_POWER_ON = _pyavrdbg_raw.ITargetEventListener_TARGET_POWER_ON
    TARGET_AWAKE = _pyavrdbg_raw.ITargetEventListener_TARGET_AWAKE
    TARGET_ASLEEP = _pyavrdbg_raw.ITargetEventListener_TARGET_ASLEEP
    ICE_POWER_OK = _pyavrdbg_raw.ITargetEventListener_ICE_POWER_OK
    ICE_POWER_ERROR = _pyavrdbg_raw.ITargetEventListener_ICE_POWER_ERROR
    TRIP_TRS = _pyavrdbg_raw.ITargetEventListener_TRIP_TRS
    TRIP_3V = _pyavrdbg_raw.ITargetEventListener_TRIP_3V
    TRIP_TSUP = _pyavrdbg_raw.ITargetEventListener_TRIP_TSUP
    TRACE_BUFFER_FULL = _pyavrdbg_raw.ITargetEventListener_TRACE_BUFFER_FULL
    TRACE_HALTED_TARGET = _pyavrdbg_raw.ITargetEventListener_TRACE_HALTED_TARGET
    TRACE_RESUMED_TARGET = _pyavrdbg_raw.ITargetEventListener_TRACE_RESUMED_TARGET
    TRACE_HALTED_TARGET_FAILED = _pyavrdbg_raw.ITargetEventListener_TRACE_HALTED_TARGET_FAILED
    DW_ERROR_FRAME = _pyavrdbg_raw.ITargetEventListener_DW_ERROR_FRAME
    DW_ERROR_SYNC = _pyavrdbg_raw.ITargetEventListener_DW_ERROR_SYNC
    DW_ERROR_COLL = _pyavrdbg_raw.ITargetEventListener_DW_ERROR_COLL
    DW_ERROR_FORCE_BREAK_TIMEOUT = _pyavrdbg_raw.ITargetEventListener_DW_ERROR_FORCE_BREAK_TIMEOUT
    DW_ERROR_RELEASE_BREAK_TIMEOUT = _pyavrdbg_raw.ITargetEventListener_DW_ERROR_RELEASE_BREAK_TIMEOUT
    DW_ERROR_MAX_BIT_LENGTH_DIFF = _pyavrdbg_raw.ITargetEventListener_DW_ERROR_MAX_BIT_LENGTH_DIFF
    DW_ERROR_SYNC_TIMEOUT = _pyavrdbg_raw.ITargetEventListener_DW_ERROR_SYNC_TIMEOUT
    DW_ERROR_SYNC_TIMEOUT_BAUD = _pyavrdbg_raw.ITargetEventListener_DW_ERROR_SYNC_TIMEOUT_BAUD
    DW_ERROR_SYNC_OUT_OF_RANGE = _pyavrdbg_raw.ITargetEventListener_DW_ERROR_SYNC_OUT_OF_RANGE
    DW_ERROR_SYNC_WAIT_TIMEOUT = _pyavrdbg_raw.ITargetEventListener_DW_ERROR_SYNC_WAIT_TIMEOUT
    DW_ERROR_RECEIVE_TIMEOUT = _pyavrdbg_raw.ITargetEventListener_DW_ERROR_RECEIVE_TIMEOUT
    DW_ERROR_RECEIVED_BREAK = _pyavrdbg_raw.ITargetEventListener_DW_ERROR_RECEIVED_BREAK
    DW_ERROR_OPT_RECEIVE_TIMEOUT = _pyavrdbg_raw.ITargetEventListener_DW_ERROR_OPT_RECEIVE_TIMEOUT
    DW_ERROR_OPT_RECEIVED_BREAK = _pyavrdbg_raw.ITargetEventListener_DW_ERROR_OPT_RECEIVED_BREAK
    DW_ERROR_RESULT_NO_ACTIVITY = _pyavrdbg_raw.ITargetEventListener_DW_ERROR_RESULT_NO_ACTIVITY
    __swig_destroy__ = _pyavrdbg_raw.delete_ITargetEventListener
    __del__ = lambda self : None;
    def startEventPolling(self): return _pyavrdbg_raw.ITargetEventListener_startEventPolling(self)
    def stopEventPolling(self): return _pyavrdbg_raw.ITargetEventListener_stopEventPolling(self)
    def resetPollFrequency(self, *args): return _pyavrdbg_raw.ITargetEventListener_resetPollFrequency(self, *args)
    def registerBreakSlot(self, *args): return _pyavrdbg_raw.ITargetEventListener_registerBreakSlot(self, *args)
    def registerIdrSlot(self, *args): return _pyavrdbg_raw.ITargetEventListener_registerIdrSlot(self, *args)
    def registerExternalResetSlot(self, *args): return _pyavrdbg_raw.ITargetEventListener_registerExternalResetSlot(self, *args)
    def registerTargetPowerStateSlot(self, *args): return _pyavrdbg_raw.ITargetEventListener_registerTargetPowerStateSlot(self, *args)
    def registerTargetSleepSlot(self, *args): return _pyavrdbg_raw.ITargetEventListener_registerTargetSleepSlot(self, *args)
    def registerProbeTripSlot(self, *args): return _pyavrdbg_raw.ITargetEventListener_registerProbeTripSlot(self, *args)
    def registerEvt0Slot(self, *args): return _pyavrdbg_raw.ITargetEventListener_registerEvt0Slot(self, *args)
    def registerTraceSlot(self, *args): return _pyavrdbg_raw.ITargetEventListener_registerTraceSlot(self, *args)
    def registerIcePowerStateSlot(self, *args): return _pyavrdbg_raw.ITargetEventListener_registerIcePowerStateSlot(self, *args)
    def registerDebugwireErrorSlot(self, *args): return _pyavrdbg_raw.ITargetEventListener_registerDebugwireErrorSlot(self, *args)
    def registerTargetEventSlot(self, *args): return _pyavrdbg_raw.ITargetEventListener_registerTargetEventSlot(self, *args)
ITargetEventListener_swigregister = _pyavrdbg_raw.ITargetEventListener_swigregister
ITargetEventListener_swigregister(ITargetEventListener)

class IService(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IService, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IService, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _pyavrdbg_raw.delete_IService
    __del__ = lambda self : None;
    def getName(self): return _pyavrdbg_raw.IService_getName(self)
    def cleanup(self, *args): return _pyavrdbg_raw.IService_cleanup(self, *args)
    def dumpContexts(self): return _pyavrdbg_raw.IService_dumpContexts(self)
IService_swigregister = _pyavrdbg_raw.IService_swigregister
IService_swigregister(IService)

class vector_of_IContextBaseSharedPtr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vector_of_IContextBaseSharedPtr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vector_of_IContextBaseSharedPtr, name)
    __repr__ = _swig_repr
    def iterator(self): return _pyavrdbg_raw.vector_of_IContextBaseSharedPtr_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _pyavrdbg_raw.vector_of_IContextBaseSharedPtr___nonzero__(self)
    def __bool__(self): return _pyavrdbg_raw.vector_of_IContextBaseSharedPtr___bool__(self)
    def __len__(self): return _pyavrdbg_raw.vector_of_IContextBaseSharedPtr___len__(self)
    def pop(self): return _pyavrdbg_raw.vector_of_IContextBaseSharedPtr_pop(self)
    def __getslice__(self, *args): return _pyavrdbg_raw.vector_of_IContextBaseSharedPtr___getslice__(self, *args)
    def __setslice__(self, *args): return _pyavrdbg_raw.vector_of_IContextBaseSharedPtr___setslice__(self, *args)
    def __delslice__(self, *args): return _pyavrdbg_raw.vector_of_IContextBaseSharedPtr___delslice__(self, *args)
    def __delitem__(self, *args): return _pyavrdbg_raw.vector_of_IContextBaseSharedPtr___delitem__(self, *args)
    def __getitem__(self, *args): return _pyavrdbg_raw.vector_of_IContextBaseSharedPtr___getitem__(self, *args)
    def __setitem__(self, *args): return _pyavrdbg_raw.vector_of_IContextBaseSharedPtr___setitem__(self, *args)
    def append(self, *args): return _pyavrdbg_raw.vector_of_IContextBaseSharedPtr_append(self, *args)
    def empty(self): return _pyavrdbg_raw.vector_of_IContextBaseSharedPtr_empty(self)
    def size(self): return _pyavrdbg_raw.vector_of_IContextBaseSharedPtr_size(self)
    def clear(self): return _pyavrdbg_raw.vector_of_IContextBaseSharedPtr_clear(self)
    def swap(self, *args): return _pyavrdbg_raw.vector_of_IContextBaseSharedPtr_swap(self, *args)
    def get_allocator(self): return _pyavrdbg_raw.vector_of_IContextBaseSharedPtr_get_allocator(self)
    def begin(self): return _pyavrdbg_raw.vector_of_IContextBaseSharedPtr_begin(self)
    def end(self): return _pyavrdbg_raw.vector_of_IContextBaseSharedPtr_end(self)
    def rbegin(self): return _pyavrdbg_raw.vector_of_IContextBaseSharedPtr_rbegin(self)
    def rend(self): return _pyavrdbg_raw.vector_of_IContextBaseSharedPtr_rend(self)
    def pop_back(self): return _pyavrdbg_raw.vector_of_IContextBaseSharedPtr_pop_back(self)
    def erase(self, *args): return _pyavrdbg_raw.vector_of_IContextBaseSharedPtr_erase(self, *args)
    def __init__(self, *args): 
        this = _pyavrdbg_raw.new_vector_of_IContextBaseSharedPtr(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _pyavrdbg_raw.vector_of_IContextBaseSharedPtr_push_back(self, *args)
    def front(self): return _pyavrdbg_raw.vector_of_IContextBaseSharedPtr_front(self)
    def back(self): return _pyavrdbg_raw.vector_of_IContextBaseSharedPtr_back(self)
    def assign(self, *args): return _pyavrdbg_raw.vector_of_IContextBaseSharedPtr_assign(self, *args)
    def resize(self, *args): return _pyavrdbg_raw.vector_of_IContextBaseSharedPtr_resize(self, *args)
    def insert(self, *args): return _pyavrdbg_raw.vector_of_IContextBaseSharedPtr_insert(self, *args)
    def reserve(self, *args): return _pyavrdbg_raw.vector_of_IContextBaseSharedPtr_reserve(self, *args)
    def capacity(self): return _pyavrdbg_raw.vector_of_IContextBaseSharedPtr_capacity(self)
    __swig_destroy__ = _pyavrdbg_raw.delete_vector_of_IContextBaseSharedPtr
    __del__ = lambda self : None;
vector_of_IContextBaseSharedPtr_swigregister = _pyavrdbg_raw.vector_of_IContextBaseSharedPtr_swigregister
vector_of_IContextBaseSharedPtr_swigregister(vector_of_IContextBaseSharedPtr)

class IContextBase(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IContextBase, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IContextBase, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _pyavrdbg_raw.delete_IContextBase
    __del__ = lambda self : None;
    def getId(self): return _pyavrdbg_raw.IContextBase_getId(self)
    def getParent(self): return _pyavrdbg_raw.IContextBase_getParent(self)
    def getProperties(self): return _pyavrdbg_raw.IContextBase_getProperties(self)
    def setProperties(self, *args): return _pyavrdbg_raw.IContextBase_setProperties(self, *args)
    def addContextChangedHandler(self, *args): return _pyavrdbg_raw.IContextBase_addContextChangedHandler(self, *args)
    def getOwner(self): return _pyavrdbg_raw.IContextBase_getOwner(self)
    def setOwner(self, *args): return _pyavrdbg_raw.IContextBase_setOwner(self, *args)
    def pyAddContextChangedHandler(self, *args): return _pyavrdbg_raw.IContextBase_pyAddContextChangedHandler(self, *args)
IContextBase_swigregister = _pyavrdbg_raw.IContextBase_swigregister
IContextBase_swigregister(IContextBase)

class IServiceBase(IService):
    __swig_setmethods__ = {}
    for _s in [IService]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IServiceBase, name, value)
    __swig_getmethods__ = {}
    for _s in [IService]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, IServiceBase, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _pyavrdbg_raw.delete_IServiceBase
    __del__ = lambda self : None;
    def getContextFromId(self, *args): return _pyavrdbg_raw.IServiceBase_getContextFromId(self, *args)
    def getChildren(self, *args): return _pyavrdbg_raw.IServiceBase_getChildren(self, *args)
    def addContextsAddedHandler(self, *args): return _pyavrdbg_raw.IServiceBase_addContextsAddedHandler(self, *args)
    def addContextsRemovedHandler(self, *args): return _pyavrdbg_raw.IServiceBase_addContextsRemovedHandler(self, *args)
    def addContext(self, *args): return _pyavrdbg_raw.IServiceBase_addContext(self, *args)
    def addContexts(self, *args): return _pyavrdbg_raw.IServiceBase_addContexts(self, *args)
    def removeContext(self, *args): return _pyavrdbg_raw.IServiceBase_removeContext(self, *args)
    def removeContexts(self, *args): return _pyavrdbg_raw.IServiceBase_removeContexts(self, *args)
    __swig_getmethods__["SWIGSharedPtrUpcast"] = lambda x: _pyavrdbg_raw.IServiceBase_SWIGSharedPtrUpcast
    if _newclass:SWIGSharedPtrUpcast = staticmethod(_pyavrdbg_raw.IServiceBase_SWIGSharedPtrUpcast)
IServiceBase_swigregister = _pyavrdbg_raw.IServiceBase_swigregister
IServiceBase_swigregister(IServiceBase)

def IServiceBase_SWIGSharedPtrUpcast(*args):
  return _pyavrdbg_raw.IServiceBase_SWIGSharedPtrUpcast(*args)
IServiceBase_SWIGSharedPtrUpcast = _pyavrdbg_raw.IServiceBase_SWIGSharedPtrUpcast

class vectorofconnection(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vectorofconnection, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vectorofconnection, name)
    __repr__ = _swig_repr
    def iterator(self): return _pyavrdbg_raw.vectorofconnection_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _pyavrdbg_raw.vectorofconnection___nonzero__(self)
    def __bool__(self): return _pyavrdbg_raw.vectorofconnection___bool__(self)
    def __len__(self): return _pyavrdbg_raw.vectorofconnection___len__(self)
    def pop(self): return _pyavrdbg_raw.vectorofconnection_pop(self)
    def __getslice__(self, *args): return _pyavrdbg_raw.vectorofconnection___getslice__(self, *args)
    def __setslice__(self, *args): return _pyavrdbg_raw.vectorofconnection___setslice__(self, *args)
    def __delslice__(self, *args): return _pyavrdbg_raw.vectorofconnection___delslice__(self, *args)
    def __delitem__(self, *args): return _pyavrdbg_raw.vectorofconnection___delitem__(self, *args)
    def __getitem__(self, *args): return _pyavrdbg_raw.vectorofconnection___getitem__(self, *args)
    def __setitem__(self, *args): return _pyavrdbg_raw.vectorofconnection___setitem__(self, *args)
    def append(self, *args): return _pyavrdbg_raw.vectorofconnection_append(self, *args)
    def empty(self): return _pyavrdbg_raw.vectorofconnection_empty(self)
    def size(self): return _pyavrdbg_raw.vectorofconnection_size(self)
    def clear(self): return _pyavrdbg_raw.vectorofconnection_clear(self)
    def swap(self, *args): return _pyavrdbg_raw.vectorofconnection_swap(self, *args)
    def get_allocator(self): return _pyavrdbg_raw.vectorofconnection_get_allocator(self)
    def begin(self): return _pyavrdbg_raw.vectorofconnection_begin(self)
    def end(self): return _pyavrdbg_raw.vectorofconnection_end(self)
    def rbegin(self): return _pyavrdbg_raw.vectorofconnection_rbegin(self)
    def rend(self): return _pyavrdbg_raw.vectorofconnection_rend(self)
    def pop_back(self): return _pyavrdbg_raw.vectorofconnection_pop_back(self)
    def erase(self, *args): return _pyavrdbg_raw.vectorofconnection_erase(self, *args)
    def __init__(self, *args): 
        this = _pyavrdbg_raw.new_vectorofconnection(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _pyavrdbg_raw.vectorofconnection_push_back(self, *args)
    def front(self): return _pyavrdbg_raw.vectorofconnection_front(self)
    def back(self): return _pyavrdbg_raw.vectorofconnection_back(self)
    def assign(self, *args): return _pyavrdbg_raw.vectorofconnection_assign(self, *args)
    def resize(self, *args): return _pyavrdbg_raw.vectorofconnection_resize(self, *args)
    def insert(self, *args): return _pyavrdbg_raw.vectorofconnection_insert(self, *args)
    def reserve(self, *args): return _pyavrdbg_raw.vectorofconnection_reserve(self, *args)
    def capacity(self): return _pyavrdbg_raw.vectorofconnection_capacity(self)
    __swig_destroy__ = _pyavrdbg_raw.delete_vectorofconnection
    __del__ = lambda self : None;
vectorofconnection_swigregister = _pyavrdbg_raw.vectorofconnection_swigregister
vectorofconnection_swigregister(vectorofconnection)

class vector_of_IToolContextSharedPtr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vector_of_IToolContextSharedPtr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vector_of_IToolContextSharedPtr, name)
    __repr__ = _swig_repr
    def iterator(self): return _pyavrdbg_raw.vector_of_IToolContextSharedPtr_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _pyavrdbg_raw.vector_of_IToolContextSharedPtr___nonzero__(self)
    def __bool__(self): return _pyavrdbg_raw.vector_of_IToolContextSharedPtr___bool__(self)
    def __len__(self): return _pyavrdbg_raw.vector_of_IToolContextSharedPtr___len__(self)
    def pop(self): return _pyavrdbg_raw.vector_of_IToolContextSharedPtr_pop(self)
    def __getslice__(self, *args): return _pyavrdbg_raw.vector_of_IToolContextSharedPtr___getslice__(self, *args)
    def __setslice__(self, *args): return _pyavrdbg_raw.vector_of_IToolContextSharedPtr___setslice__(self, *args)
    def __delslice__(self, *args): return _pyavrdbg_raw.vector_of_IToolContextSharedPtr___delslice__(self, *args)
    def __delitem__(self, *args): return _pyavrdbg_raw.vector_of_IToolContextSharedPtr___delitem__(self, *args)
    def __getitem__(self, *args): return _pyavrdbg_raw.vector_of_IToolContextSharedPtr___getitem__(self, *args)
    def __setitem__(self, *args): return _pyavrdbg_raw.vector_of_IToolContextSharedPtr___setitem__(self, *args)
    def append(self, *args): return _pyavrdbg_raw.vector_of_IToolContextSharedPtr_append(self, *args)
    def empty(self): return _pyavrdbg_raw.vector_of_IToolContextSharedPtr_empty(self)
    def size(self): return _pyavrdbg_raw.vector_of_IToolContextSharedPtr_size(self)
    def clear(self): return _pyavrdbg_raw.vector_of_IToolContextSharedPtr_clear(self)
    def swap(self, *args): return _pyavrdbg_raw.vector_of_IToolContextSharedPtr_swap(self, *args)
    def get_allocator(self): return _pyavrdbg_raw.vector_of_IToolContextSharedPtr_get_allocator(self)
    def begin(self): return _pyavrdbg_raw.vector_of_IToolContextSharedPtr_begin(self)
    def end(self): return _pyavrdbg_raw.vector_of_IToolContextSharedPtr_end(self)
    def rbegin(self): return _pyavrdbg_raw.vector_of_IToolContextSharedPtr_rbegin(self)
    def rend(self): return _pyavrdbg_raw.vector_of_IToolContextSharedPtr_rend(self)
    def pop_back(self): return _pyavrdbg_raw.vector_of_IToolContextSharedPtr_pop_back(self)
    def erase(self, *args): return _pyavrdbg_raw.vector_of_IToolContextSharedPtr_erase(self, *args)
    def __init__(self, *args): 
        this = _pyavrdbg_raw.new_vector_of_IToolContextSharedPtr(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _pyavrdbg_raw.vector_of_IToolContextSharedPtr_push_back(self, *args)
    def front(self): return _pyavrdbg_raw.vector_of_IToolContextSharedPtr_front(self)
    def back(self): return _pyavrdbg_raw.vector_of_IToolContextSharedPtr_back(self)
    def assign(self, *args): return _pyavrdbg_raw.vector_of_IToolContextSharedPtr_assign(self, *args)
    def resize(self, *args): return _pyavrdbg_raw.vector_of_IToolContextSharedPtr_resize(self, *args)
    def insert(self, *args): return _pyavrdbg_raw.vector_of_IToolContextSharedPtr_insert(self, *args)
    def reserve(self, *args): return _pyavrdbg_raw.vector_of_IToolContextSharedPtr_reserve(self, *args)
    def capacity(self): return _pyavrdbg_raw.vector_of_IToolContextSharedPtr_capacity(self)
    __swig_destroy__ = _pyavrdbg_raw.delete_vector_of_IToolContextSharedPtr
    __del__ = lambda self : None;
vector_of_IToolContextSharedPtr_swigregister = _pyavrdbg_raw.vector_of_IToolContextSharedPtr_swigregister
vector_of_IToolContextSharedPtr_swigregister(vector_of_IToolContextSharedPtr)

class ConnectionInfo(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ConnectionInfo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ConnectionInfo, name)
    __repr__ = _swig_repr
    __swig_setmethods__["toolType"] = _pyavrdbg_raw.ConnectionInfo_toolType_set
    __swig_getmethods__["toolType"] = _pyavrdbg_raw.ConnectionInfo_toolType_get
    if _newclass:toolType = _swig_property(_pyavrdbg_raw.ConnectionInfo_toolType_get, _pyavrdbg_raw.ConnectionInfo_toolType_set)
    __swig_setmethods__["connectionType"] = _pyavrdbg_raw.ConnectionInfo_connectionType_set
    __swig_getmethods__["connectionType"] = _pyavrdbg_raw.ConnectionInfo_connectionType_get
    if _newclass:connectionType = _swig_property(_pyavrdbg_raw.ConnectionInfo_connectionType_get, _pyavrdbg_raw.ConnectionInfo_connectionType_set)
    __swig_setmethods__["serialNumber"] = _pyavrdbg_raw.ConnectionInfo_serialNumber_set
    __swig_getmethods__["serialNumber"] = _pyavrdbg_raw.ConnectionInfo_serialNumber_get
    if _newclass:serialNumber = _swig_property(_pyavrdbg_raw.ConnectionInfo_serialNumber_get, _pyavrdbg_raw.ConnectionInfo_serialNumber_set)
    __swig_setmethods__["connectionProperties"] = _pyavrdbg_raw.ConnectionInfo_connectionProperties_set
    __swig_getmethods__["connectionProperties"] = _pyavrdbg_raw.ConnectionInfo_connectionProperties_get
    if _newclass:connectionProperties = _swig_property(_pyavrdbg_raw.ConnectionInfo_connectionProperties_get, _pyavrdbg_raw.ConnectionInfo_connectionProperties_set)
    def __init__(self): 
        this = _pyavrdbg_raw.new_ConnectionInfo()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyavrdbg_raw.delete_ConnectionInfo
    __del__ = lambda self : None;
ConnectionInfo_swigregister = _pyavrdbg_raw.ConnectionInfo_swigregister
ConnectionInfo_swigregister(ConnectionInfo)

class IToolService(IServiceBase):
    __swig_setmethods__ = {}
    for _s in [IServiceBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IToolService, name, value)
    __swig_getmethods__ = {}
    for _s in [IServiceBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, IToolService, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _pyavrdbg_raw.delete_IToolService
    __del__ = lambda self : None;
    def getSupportedToolTypes(self): return _pyavrdbg_raw.IToolService_getSupportedToolTypes(self)
    def setupTool(self, *args): return _pyavrdbg_raw.IToolService_setupTool(self, *args)
    def tearDownTool(self, *args): return _pyavrdbg_raw.IToolService_tearDownTool(self, *args)
    def getAttachedTools(self, *args): return _pyavrdbg_raw.IToolService_getAttachedTools(self, *args)
    def startPollingForTools(self, *args): return _pyavrdbg_raw.IToolService_startPollingForTools(self, *args)
    def addAttachedToolsListChangedHandler(self, *args): return _pyavrdbg_raw.IToolService_addAttachedToolsListChangedHandler(self, *args)
    __swig_getmethods__["SWIGSharedPtrUpcast"] = lambda x: _pyavrdbg_raw.IToolService_SWIGSharedPtrUpcast
    if _newclass:SWIGSharedPtrUpcast = staticmethod(_pyavrdbg_raw.IToolService_SWIGSharedPtrUpcast)
    def pyAddAttachedToolsListChangedHandler(self, *args): return _pyavrdbg_raw.IToolService_pyAddAttachedToolsListChangedHandler(self, *args)
IToolService_swigregister = _pyavrdbg_raw.IToolService_swigregister
IToolService_swigregister(IToolService)

def IToolService_SWIGSharedPtrUpcast(*args):
  return _pyavrdbg_raw.IToolService_SWIGSharedPtrUpcast(*args)
IToolService_SWIGSharedPtrUpcast = _pyavrdbg_raw.IToolService_SWIGSharedPtrUpcast

class IPhysicalInterface(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IPhysicalInterface, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IPhysicalInterface, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _pyavrdbg_raw.delete_IPhysicalInterface
    __del__ = lambda self : None;
    def getName(self): return _pyavrdbg_raw.IPhysicalInterface_getName(self)
    def getProperties(self): return _pyavrdbg_raw.IPhysicalInterface_getProperties(self)
    def setProperties(self, *args): return _pyavrdbg_raw.IPhysicalInterface_setProperties(self, *args)
    def getDevices(self): return _pyavrdbg_raw.IPhysicalInterface_getDevices(self)
    def setDevice(self, *args): return _pyavrdbg_raw.IPhysicalInterface_setDevice(self, *args)
    def activate(self, *args): return _pyavrdbg_raw.IPhysicalInterface_activate(self, *args)
    def deactivate(self, *args): return _pyavrdbg_raw.IPhysicalInterface_deactivate(self, *args)
    def detectDevices(self, *args): return _pyavrdbg_raw.IPhysicalInterface_detectDevices(self, *args)
    def isActivated(self): return _pyavrdbg_raw.IPhysicalInterface_isActivated(self)
IPhysicalInterface_swigregister = _pyavrdbg_raw.IPhysicalInterface_swigregister
IPhysicalInterface_swigregister(IPhysicalInterface)
TOOL_PROP_NAME = cvar.TOOL_PROP_NAME
TOOL_PROP_STATE = cvar.TOOL_PROP_STATE
TOOL_PROP_INTERFACE_TYPE = cvar.TOOL_PROP_INTERFACE_TYPE
TOOL_PROP_INTERFACE_NAME = cvar.TOOL_PROP_INTERFACE_NAME
TOOL_PROP_INTERFACE_PROPS = cvar.TOOL_PROP_INTERFACE_PROPS
TOOL_PROP_BOARD_PROPS = cvar.TOOL_PROP_BOARD_PROPS
TOOL_PROP_SUPPORTED_DEVICES = cvar.TOOL_PROP_SUPPORTED_DEVICES
TOOL_PROP_DEVICE_NAME = cvar.TOOL_PROP_DEVICE_NAME
TOOL_PROP_DEVICE_ID = cvar.TOOL_PROP_DEVICE_ID
TOOL_STATE_IDLE = cvar.TOOL_STATE_IDLE
TOOL_STATE_READY = cvar.TOOL_STATE_READY
TOOL_STATE_BUSY = cvar.TOOL_STATE_BUSY
TOOL_INTERFACE_NAME_ISP = cvar.TOOL_INTERFACE_NAME_ISP
TOOL_INTERFACE_NAME_HVPP = cvar.TOOL_INTERFACE_NAME_HVPP
TOOL_INTERFACE_NAME_HVSP = cvar.TOOL_INTERFACE_NAME_HVSP
TOOL_INTERFACE_NAME_PDI = cvar.TOOL_INTERFACE_NAME_PDI
TOOL_INTERFACE_NAME_JTAG = cvar.TOOL_INTERFACE_NAME_JTAG
TOOL_INTERFACE_NAME_AWIRE = cvar.TOOL_INTERFACE_NAME_AWIRE
TOOL_INTERFACE_NAME_DEBUGWIRE = cvar.TOOL_INTERFACE_NAME_DEBUGWIRE
TOOL_INTERFACE_NAME_TPI = cvar.TOOL_INTERFACE_NAME_TPI
TOOL_INTERFACE_NAME_SWD = cvar.TOOL_INTERFACE_NAME_SWD
TOOL_CONNECTION_USB = cvar.TOOL_CONNECTION_USB
TOOL_CONNECTION_COM = cvar.TOOL_CONNECTION_COM
TOOL_INTERFACE_ISP_CLOCK = cvar.TOOL_INTERFACE_ISP_CLOCK
TOOL_INTERFACE_JTAG_PROG_CLOCK = cvar.TOOL_INTERFACE_JTAG_PROG_CLOCK
TOOL_INTERFACE_JTAG_DEBUG_CLOCK = cvar.TOOL_INTERFACE_JTAG_DEBUG_CLOCK
TOOL_INTERFACE_JTAG_IN_CHAIN = cvar.TOOL_INTERFACE_JTAG_IN_CHAIN
TOOL_INTERFACE_JTAG_DEVS_BEFORE = cvar.TOOL_INTERFACE_JTAG_DEVS_BEFORE
TOOL_INTERFACE_JTAG_DEVS_AFTER = cvar.TOOL_INTERFACE_JTAG_DEVS_AFTER
TOOL_INTERFACE_JTAG_IBITS_BEFORE = cvar.TOOL_INTERFACE_JTAG_IBITS_BEFORE
TOOL_INTERFACE_JTAG_IBITS_AFTER = cvar.TOOL_INTERFACE_JTAG_IBITS_AFTER
TOOL_INTERFACE_TOTAL_DEVICES_CHAINED = cvar.TOOL_INTERFACE_TOTAL_DEVICES_CHAINED
TOOL_INTERFACE_SEL_DEVICE_INDEX_CHAIN = cvar.TOOL_INTERFACE_SEL_DEVICE_INDEX_CHAIN
TOOL_INTERFACE_JTAG_DAISYCHAIN_IRLENGTH_LIST = cvar.TOOL_INTERFACE_JTAG_DAISYCHAIN_IRLENGTH_LIST
TOOL_INTERFACE_JTAG_DAISYCHAIN_DEVICE_LIST = cvar.TOOL_INTERFACE_JTAG_DAISYCHAIN_DEVICE_LIST
TOOL_INTERFACE_JTAG_ENABLE_EXT_RESET_ON_START_SESSION = cvar.TOOL_INTERFACE_JTAG_ENABLE_EXT_RESET_ON_START_SESSION
TOOL_INTERFACE_AWIRE_MAX_BAUD = cvar.TOOL_INTERFACE_AWIRE_MAX_BAUD
TOOL_INTERFACE_PDI_CLOCK = cvar.TOOL_INTERFACE_PDI_CLOCK
TOOL_INTERFACE_DEBUGWIRE_CLOCK_DIV = cvar.TOOL_INTERFACE_DEBUGWIRE_CLOCK_DIV
TOOL_INTERFACE_SWD_CLOCK = cvar.TOOL_INTERFACE_SWD_CLOCK

class IToolContext(IContextBase):
    __swig_setmethods__ = {}
    for _s in [IContextBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IToolContext, name, value)
    __swig_getmethods__ = {}
    for _s in [IContextBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, IToolContext, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _pyavrdbg_raw.delete_IToolContext
    __del__ = lambda self : None;
    def getName(self): return _pyavrdbg_raw.IToolContext_getName(self)
    def getPhysicalInterface(self, *args): return _pyavrdbg_raw.IToolContext_getPhysicalInterface(self, *args)
    def getPhysicalInterfaces(self): return _pyavrdbg_raw.IToolContext_getPhysicalInterfaces(self)
    def getDevice(self, *args): return _pyavrdbg_raw.IToolContext_getDevice(self, *args)
    def getToolDevices(self): return _pyavrdbg_raw.IToolContext_getToolDevices(self)
    def setProperties(self, *args): return _pyavrdbg_raw.IToolContext_setProperties(self, *args)
    def getTargetVoltage(self): return _pyavrdbg_raw.IToolContext_getTargetVoltage(self)
    def connect(self, *args): return _pyavrdbg_raw.IToolContext_connect(self, *args)
    def disconnect(self, *args): return _pyavrdbg_raw.IToolContext_disconnect(self, *args)
    def detectDevices(self, *args): return _pyavrdbg_raw.IToolContext_detectDevices(self, *args)
    def startUpgrade(self, *args): return _pyavrdbg_raw.IToolContext_startUpgrade(self, *args)
    def checkFirmware(self, *args): return _pyavrdbg_raw.IToolContext_checkFirmware(self, *args)
    def setBootMode(self, *args): return _pyavrdbg_raw.IToolContext_setBootMode(self, *args)
    def cancel(self): return _pyavrdbg_raw.IToolContext_cancel(self)
    def genericCommand(self, *args): return _pyavrdbg_raw.IToolContext_genericCommand(self, *args)
    def getConnection(self): return _pyavrdbg_raw.IToolContext_getConnection(self)
    def selfTest(self, *args): return _pyavrdbg_raw.IToolContext_selfTest(self, *args)
    def calibrate(self, *args): return _pyavrdbg_raw.IToolContext_calibrate(self, *args)
    def setDetachedConnectionCallback(self, *args): return _pyavrdbg_raw.IToolContext_setDetachedConnectionCallback(self, *args)
    __swig_setmethods__["detachCb"] = _pyavrdbg_raw.IToolContext_detachCb_set
    __swig_getmethods__["detachCb"] = _pyavrdbg_raw.IToolContext_detachCb_get
    if _newclass:detachCb = _swig_property(_pyavrdbg_raw.IToolContext_detachCb_get, _pyavrdbg_raw.IToolContext_detachCb_set)
    def onConnectionDetached(self): return _pyavrdbg_raw.IToolContext_onConnectionDetached(self)
    def SpecialOperation(self, *args): return _pyavrdbg_raw.IToolContext_SpecialOperation(self, *args)
    __swig_getmethods__["SWIGSharedPtrUpcast"] = lambda x: _pyavrdbg_raw.IToolContext_SWIGSharedPtrUpcast
    if _newclass:SWIGSharedPtrUpcast = staticmethod(_pyavrdbg_raw.IToolContext_SWIGSharedPtrUpcast)
IToolContext_swigregister = _pyavrdbg_raw.IToolContext_swigregister
IToolContext_swigregister(IToolContext)

def IToolContext_SWIGSharedPtrUpcast(*args):
  return _pyavrdbg_raw.IToolContext_SWIGSharedPtrUpcast(*args)
IToolContext_SWIGSharedPtrUpcast = _pyavrdbg_raw.IToolContext_SWIGSharedPtrUpcast

class Connection(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Connection, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Connection, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _pyavrdbg_raw.delete_Connection
    __del__ = lambda self : None;
    def getType(self): return _pyavrdbg_raw.Connection_getType(self)
    def getProperties(self): return _pyavrdbg_raw.Connection_getProperties(self)
    def connect(self, detachCallback = None): return _pyavrdbg_raw.Connection_connect(self, detachCallback)
    def disconnect(self): return _pyavrdbg_raw.Connection_disconnect(self)
    def connected(self): return _pyavrdbg_raw.Connection_connected(self)
Connection_swigregister = _pyavrdbg_raw.Connection_swigregister
Connection_swigregister(Connection)
CONNECTION_PROP_TYPE = cvar.CONNECTION_PROP_TYPE
CONNECTION_PROP_SERIAL_NUMBER = cvar.CONNECTION_PROP_SERIAL_NUMBER
CONNECTION_PROP_USB_VENDOR_ID = cvar.CONNECTION_PROP_USB_VENDOR_ID
CONNECTION_PROP_USB_PRODUCT_ID = cvar.CONNECTION_PROP_USB_PRODUCT_ID
CONNECTION_PROP_DAP_ID_PRODUCT = cvar.CONNECTION_PROP_DAP_ID_PRODUCT
CONNECTION_TYPE_USB = cvar.CONNECTION_TYPE_USB
CONNECTION_TYPE_SEGGER = cvar.CONNECTION_TYPE_SEGGER
CONNECTION_TYPE_SERIALPORT = cvar.CONNECTION_TYPE_SERIALPORT
CONNECTION_TYPE_CMSIS_DAP = cvar.CONNECTION_TYPE_CMSIS_DAP
CONNECTION_TYPE_HID = cvar.CONNECTION_TYPE_HID
CONNECTION_TYPE_LIBUSB0 = cvar.CONNECTION_TYPE_LIBUSB0

class Transport(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Transport, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Transport, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _pyavrdbg_raw.delete_Transport
    __del__ = lambda self : None;
    def sendCommand(self, *args): return _pyavrdbg_raw.Transport_sendCommand(self, *args)
    def getEvent(self, *args): return _pyavrdbg_raw.Transport_getEvent(self, *args)
    DEFAULT_EVENT_READ_SLEEP_MS = _pyavrdbg_raw.Transport_DEFAULT_EVENT_READ_SLEEP_MS
Transport_swigregister = _pyavrdbg_raw.Transport_swigregister
Transport_swigregister(Transport)

class vector_of_IBreakpointContextSharedPtr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vector_of_IBreakpointContextSharedPtr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vector_of_IBreakpointContextSharedPtr, name)
    __repr__ = _swig_repr
    def iterator(self): return _pyavrdbg_raw.vector_of_IBreakpointContextSharedPtr_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _pyavrdbg_raw.vector_of_IBreakpointContextSharedPtr___nonzero__(self)
    def __bool__(self): return _pyavrdbg_raw.vector_of_IBreakpointContextSharedPtr___bool__(self)
    def __len__(self): return _pyavrdbg_raw.vector_of_IBreakpointContextSharedPtr___len__(self)
    def pop(self): return _pyavrdbg_raw.vector_of_IBreakpointContextSharedPtr_pop(self)
    def __getslice__(self, *args): return _pyavrdbg_raw.vector_of_IBreakpointContextSharedPtr___getslice__(self, *args)
    def __setslice__(self, *args): return _pyavrdbg_raw.vector_of_IBreakpointContextSharedPtr___setslice__(self, *args)
    def __delslice__(self, *args): return _pyavrdbg_raw.vector_of_IBreakpointContextSharedPtr___delslice__(self, *args)
    def __delitem__(self, *args): return _pyavrdbg_raw.vector_of_IBreakpointContextSharedPtr___delitem__(self, *args)
    def __getitem__(self, *args): return _pyavrdbg_raw.vector_of_IBreakpointContextSharedPtr___getitem__(self, *args)
    def __setitem__(self, *args): return _pyavrdbg_raw.vector_of_IBreakpointContextSharedPtr___setitem__(self, *args)
    def append(self, *args): return _pyavrdbg_raw.vector_of_IBreakpointContextSharedPtr_append(self, *args)
    def empty(self): return _pyavrdbg_raw.vector_of_IBreakpointContextSharedPtr_empty(self)
    def size(self): return _pyavrdbg_raw.vector_of_IBreakpointContextSharedPtr_size(self)
    def clear(self): return _pyavrdbg_raw.vector_of_IBreakpointContextSharedPtr_clear(self)
    def swap(self, *args): return _pyavrdbg_raw.vector_of_IBreakpointContextSharedPtr_swap(self, *args)
    def get_allocator(self): return _pyavrdbg_raw.vector_of_IBreakpointContextSharedPtr_get_allocator(self)
    def begin(self): return _pyavrdbg_raw.vector_of_IBreakpointContextSharedPtr_begin(self)
    def end(self): return _pyavrdbg_raw.vector_of_IBreakpointContextSharedPtr_end(self)
    def rbegin(self): return _pyavrdbg_raw.vector_of_IBreakpointContextSharedPtr_rbegin(self)
    def rend(self): return _pyavrdbg_raw.vector_of_IBreakpointContextSharedPtr_rend(self)
    def pop_back(self): return _pyavrdbg_raw.vector_of_IBreakpointContextSharedPtr_pop_back(self)
    def erase(self, *args): return _pyavrdbg_raw.vector_of_IBreakpointContextSharedPtr_erase(self, *args)
    def __init__(self, *args): 
        this = _pyavrdbg_raw.new_vector_of_IBreakpointContextSharedPtr(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _pyavrdbg_raw.vector_of_IBreakpointContextSharedPtr_push_back(self, *args)
    def front(self): return _pyavrdbg_raw.vector_of_IBreakpointContextSharedPtr_front(self)
    def back(self): return _pyavrdbg_raw.vector_of_IBreakpointContextSharedPtr_back(self)
    def assign(self, *args): return _pyavrdbg_raw.vector_of_IBreakpointContextSharedPtr_assign(self, *args)
    def resize(self, *args): return _pyavrdbg_raw.vector_of_IBreakpointContextSharedPtr_resize(self, *args)
    def insert(self, *args): return _pyavrdbg_raw.vector_of_IBreakpointContextSharedPtr_insert(self, *args)
    def reserve(self, *args): return _pyavrdbg_raw.vector_of_IBreakpointContextSharedPtr_reserve(self, *args)
    def capacity(self): return _pyavrdbg_raw.vector_of_IBreakpointContextSharedPtr_capacity(self)
    __swig_destroy__ = _pyavrdbg_raw.delete_vector_of_IBreakpointContextSharedPtr
    __del__ = lambda self : None;
vector_of_IBreakpointContextSharedPtr_swigregister = _pyavrdbg_raw.vector_of_IBreakpointContextSharedPtr_swigregister
vector_of_IBreakpointContextSharedPtr_swigregister(vector_of_IBreakpointContextSharedPtr)

class IBreakpointsService(IServiceBase):
    __swig_setmethods__ = {}
    for _s in [IServiceBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IBreakpointsService, name, value)
    __swig_getmethods__ = {}
    for _s in [IServiceBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, IBreakpointsService, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def create(self, *args): return _pyavrdbg_raw.IBreakpointsService_create(self, *args)
    def set(self, *args): return _pyavrdbg_raw.IBreakpointsService_set(self, *args)
    def add(self, *args): return _pyavrdbg_raw.IBreakpointsService_add(self, *args)
    def remove(self, *args): return _pyavrdbg_raw.IBreakpointsService_remove(self, *args)
    def removeAllBreakpoints(self, *args): return _pyavrdbg_raw.IBreakpointsService_removeAllBreakpoints(self, *args)
    def enable(self, *args): return _pyavrdbg_raw.IBreakpointsService_enable(self, *args)
    def disable(self, *args): return _pyavrdbg_raw.IBreakpointsService_disable(self, *args)
    def getBreakpoints(self): return _pyavrdbg_raw.IBreakpointsService_getBreakpoints(self)
    def getCapabilities(self, *args): return _pyavrdbg_raw.IBreakpointsService_getCapabilities(self, *args)
    __swig_getmethods__["SWIGSharedPtrUpcast"] = lambda x: _pyavrdbg_raw.IBreakpointsService_SWIGSharedPtrUpcast
    if _newclass:SWIGSharedPtrUpcast = staticmethod(_pyavrdbg_raw.IBreakpointsService_SWIGSharedPtrUpcast)
    __swig_destroy__ = _pyavrdbg_raw.delete_IBreakpointsService
    __del__ = lambda self : None;
IBreakpointsService_swigregister = _pyavrdbg_raw.IBreakpointsService_swigregister
IBreakpointsService_swigregister(IBreakpointsService)
BREAKPOINTS_CAPABILITY_CONTEXT_ID = cvar.BREAKPOINTS_CAPABILITY_CONTEXT_ID
BREAKPOINTS_CAPABILITY_HAS_CHILDREN = cvar.BREAKPOINTS_CAPABILITY_HAS_CHILDREN
BREAKPOINTS_CAPABILITY_LOCATION = cvar.BREAKPOINTS_CAPABILITY_LOCATION
BREAKPOINTS_CAPABILITY_CONDITION = cvar.BREAKPOINTS_CAPABILITY_CONDITION
BREAKPOINTS_CAPABILITY_FILE_LINE = cvar.BREAKPOINTS_CAPABILITY_FILE_LINE
BREAKPOINTS_CAPABILITY_CONTEXTIDS = cvar.BREAKPOINTS_CAPABILITY_CONTEXTIDS
BREAKPOINTS_CAPABILITY_STOP_GROUP = cvar.BREAKPOINTS_CAPABILITY_STOP_GROUP
BREAKPOINTS_CAPABILITY_IGNORECOUNT = cvar.BREAKPOINTS_CAPABILITY_IGNORECOUNT

def IBreakpointsService_SWIGSharedPtrUpcast(*args):
  return _pyavrdbg_raw.IBreakpointsService_SWIGSharedPtrUpcast(*args)
IBreakpointsService_SWIGSharedPtrUpcast = _pyavrdbg_raw.IBreakpointsService_SWIGSharedPtrUpcast

class IBreakpointsTarget(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IBreakpointsTarget, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IBreakpointsTarget, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def addBreakpoint(self, *args): return _pyavrdbg_raw.IBreakpointsTarget_addBreakpoint(self, *args)
    def removeBreakpoint(self, *args): return _pyavrdbg_raw.IBreakpointsTarget_removeBreakpoint(self, *args)
    def getBreakpointCapabilities(self): return _pyavrdbg_raw.IBreakpointsTarget_getBreakpointCapabilities(self)
    __swig_destroy__ = _pyavrdbg_raw.delete_IBreakpointsTarget
    __del__ = lambda self : None;
IBreakpointsTarget_swigregister = _pyavrdbg_raw.IBreakpointsTarget_swigregister
IBreakpointsTarget_swigregister(IBreakpointsTarget)

class IBreakpointContext(IContextBase):
    __swig_setmethods__ = {}
    for _s in [IContextBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IBreakpointContext, name, value)
    __swig_getmethods__ = {}
    for _s in [IContextBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, IBreakpointContext, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    Auto = _pyavrdbg_raw.IBreakpointContext_Auto
    Software = _pyavrdbg_raw.IBreakpointContext_Software
    Hardware = _pyavrdbg_raw.IBreakpointContext_Hardware
    def getBreakpointType(self): return _pyavrdbg_raw.IBreakpointContext_getBreakpointType(self)
    def isDataBreakpoint(self): return _pyavrdbg_raw.IBreakpointContext_isDataBreakpoint(self)
    def getTargetNames(self): return _pyavrdbg_raw.IBreakpointContext_getTargetNames(self)
    def getExecutablePaths(self): return _pyavrdbg_raw.IBreakpointContext_getExecutablePaths(self)
    def getFile(self): return _pyavrdbg_raw.IBreakpointContext_getFile(self)
    def getLine(self): return _pyavrdbg_raw.IBreakpointContext_getLine(self)
    def getColumn(self): return _pyavrdbg_raw.IBreakpointContext_getColumn(self)
    def getLocation(self): return _pyavrdbg_raw.IBreakpointContext_getLocation(self)
    Read = _pyavrdbg_raw.IBreakpointContext_Read
    Write = _pyavrdbg_raw.IBreakpointContext_Write
    Access = _pyavrdbg_raw.IBreakpointContext_Access
    Execute = _pyavrdbg_raw.IBreakpointContext_Execute
    Change = _pyavrdbg_raw.IBreakpointContext_Change
    def getAccessMode(self): return _pyavrdbg_raw.IBreakpointContext_getAccessMode(self)
    def getSize(self): return _pyavrdbg_raw.IBreakpointContext_getSize(self)
    def isMaskValueSet(self): return _pyavrdbg_raw.IBreakpointContext_isMaskValueSet(self)
    def getMaskValue(self): return _pyavrdbg_raw.IBreakpointContext_getMaskValue(self)
    def getMask(self): return _pyavrdbg_raw.IBreakpointContext_getMask(self)
    def getEnabled(self): return _pyavrdbg_raw.IBreakpointContext_getEnabled(self)
    def getCondition(self): return _pyavrdbg_raw.IBreakpointContext_getCondition(self)
    def getIgnoreCount(self): return _pyavrdbg_raw.IBreakpointContext_getIgnoreCount(self)
    def getNonIntrusiveCondition(self): return _pyavrdbg_raw.IBreakpointContext_getNonIntrusiveCondition(self)
    def getConditionInput1(self): return _pyavrdbg_raw.IBreakpointContext_getConditionInput1(self)
    def getConditionInput2(self): return _pyavrdbg_raw.IBreakpointContext_getConditionInput2(self)
    def getStopGroup(self): return _pyavrdbg_raw.IBreakpointContext_getStopGroup(self)
    def change(self, *args): return _pyavrdbg_raw.IBreakpointContext_change(self, *args)
    def getProperties(self): return _pyavrdbg_raw.IBreakpointContext_getProperties(self)
    def getInstances(self): return _pyavrdbg_raw.IBreakpointContext_getInstances(self)
    def getError(self): return _pyavrdbg_raw.IBreakpointContext_getError(self)
    def getCurrentHitCount(self): return _pyavrdbg_raw.IBreakpointContext_getCurrentHitCount(self)
    def getStatus(self): return _pyavrdbg_raw.IBreakpointContext_getStatus(self)
    def bind(self, *args): return _pyavrdbg_raw.IBreakpointContext_bind(self, *args)
    def unbind(self): return _pyavrdbg_raw.IBreakpointContext_unbind(self)
    def checkCondition(self, *args): return _pyavrdbg_raw.IBreakpointContext_checkCondition(self, *args)
    def addStatusChangedHandler(self, *args): return _pyavrdbg_raw.IBreakpointContext_addStatusChangedHandler(self, *args)
    def setEnabledFlag(self, *args): return _pyavrdbg_raw.IBreakpointContext_setEnabledFlag(self, *args)
    __swig_getmethods__["SWIGSharedPtrUpcast"] = lambda x: _pyavrdbg_raw.IBreakpointContext_SWIGSharedPtrUpcast
    if _newclass:SWIGSharedPtrUpcast = staticmethod(_pyavrdbg_raw.IBreakpointContext_SWIGSharedPtrUpcast)
    __swig_destroy__ = _pyavrdbg_raw.delete_IBreakpointContext
    __del__ = lambda self : None;
IBreakpointContext_swigregister = _pyavrdbg_raw.IBreakpointContext_swigregister
IBreakpointContext_swigregister(IBreakpointContext)
BREAKPOINTS_PROP_ID = cvar.BREAKPOINTS_PROP_ID
BREAKPOINTS_PROP_ENABLED = cvar.BREAKPOINTS_PROP_ENABLED
BREAKPOINTS_PROP_TYPE = cvar.BREAKPOINTS_PROP_TYPE
BREAKPOINTS_PROP_CONTEXTNAMES = cvar.BREAKPOINTS_PROP_CONTEXTNAMES
BREAKPOINTS_PROP_CONTEXTIDS = cvar.BREAKPOINTS_PROP_CONTEXTIDS
BREAKPOINTS_PROP_EXECUTABLEPATHS = cvar.BREAKPOINTS_PROP_EXECUTABLEPATHS
BREAKPOINTS_PROP_LOCATION = cvar.BREAKPOINTS_PROP_LOCATION
BREAKPOINTS_PROP_SIZE = cvar.BREAKPOINTS_PROP_SIZE
BREAKPOINTS_PROP_ACCESSMODE = cvar.BREAKPOINTS_PROP_ACCESSMODE
BREAKPOINTS_PROP_FILE = cvar.BREAKPOINTS_PROP_FILE
BREAKPOINTS_PROP_LINE = cvar.BREAKPOINTS_PROP_LINE
BREAKPOINTS_PROP_COLUMN = cvar.BREAKPOINTS_PROP_COLUMN
BREAKPOINTS_PROP_PATTERN = cvar.BREAKPOINTS_PROP_PATTERN
BREAKPOINTS_PROP_MASK = cvar.BREAKPOINTS_PROP_MASK
BREAKPOINTS_PROP_STOP_GROUP = cvar.BREAKPOINTS_PROP_STOP_GROUP
BREAKPOINTS_PROP_IGNORECOUNT = cvar.BREAKPOINTS_PROP_IGNORECOUNT
BREAKPOINTS_PROP_IGNORETYPE = cvar.BREAKPOINTS_PROP_IGNORETYPE
BREAKPOINTS_PROP_HITCOUNT = cvar.BREAKPOINTS_PROP_HITCOUNT
BREAKPOINTS_PROP_TIME = cvar.BREAKPOINTS_PROP_TIME
BREAKPOINTS_PROP_SCALE = cvar.BREAKPOINTS_PROP_SCALE
BREAKPOINTS_PROP_UNITS = cvar.BREAKPOINTS_PROP_UNITS
BREAKPOINTS_PROP_CONDITION = cvar.BREAKPOINTS_PROP_CONDITION
BREAKPOINTS_PROP_TEMPORARY = cvar.BREAKPOINTS_PROP_TEMPORARY
BREAKPOINTS_PROP_FUNCTION = cvar.BREAKPOINTS_PROP_FUNCTION
BREAKPOINTS_PROP_FUNCTIONLINE = cvar.BREAKPOINTS_PROP_FUNCTIONLINE
BREAKPOINTS_PROP_FUNCTIONCOLUMN = cvar.BREAKPOINTS_PROP_FUNCTIONCOLUMN
BREAKPOINTS_PROP_FUNCTIONSTARTADDRESS = cvar.BREAKPOINTS_PROP_FUNCTIONSTARTADDRESS
BREAKPOINTS_PROP_FUNCTIONENDADDRESS = cvar.BREAKPOINTS_PROP_FUNCTIONENDADDRESS
BREAKPOINTS_CONDITION_TRUE = cvar.BREAKPOINTS_CONDITION_TRUE
BREAKPOINTS_CONDITION_CHANGED = cvar.BREAKPOINTS_CONDITION_CHANGED
BREAKPOINTS_PROP_NONINTRUSIVE_CONDITION = cvar.BREAKPOINTS_PROP_NONINTRUSIVE_CONDITION
BREAKPOINTS_PROP_CONDITION_INPUT1 = cvar.BREAKPOINTS_PROP_CONDITION_INPUT1
BREAKPOINTS_PROP_CONDITION_INPUT2 = cvar.BREAKPOINTS_PROP_CONDITION_INPUT2
BREAKPOINTS_IGNORETYPE_VALUE_ALWAYS = cvar.BREAKPOINTS_IGNORETYPE_VALUE_ALWAYS
BREAKPOINTS_IGNORETYPE_VALUE_EQUALS = cvar.BREAKPOINTS_IGNORETYPE_VALUE_EQUALS
BREAKPOINTS_IGNORETYPE_VALUE_EQUALSORGREATER = cvar.BREAKPOINTS_IGNORETYPE_VALUE_EQUALSORGREATER
BREAKPOINTS_IGNORETYPE_VALUE_MULTIPLE = cvar.BREAKPOINTS_IGNORETYPE_VALUE_MULTIPLE
BREAKPOINTS_TYPE_RELATIVE = cvar.BREAKPOINTS_TYPE_RELATIVE
BREAKPOINTS_TYPE_ABSOLUTE = cvar.BREAKPOINTS_TYPE_ABSOLUTE
BREAKPOINTS_TYPE_AUTO = cvar.BREAKPOINTS_TYPE_AUTO
BREAKPOINTS_STATUS_INSTANCES = cvar.BREAKPOINTS_STATUS_INSTANCES
BREAKPOINTS_STATUS_ERROR = cvar.BREAKPOINTS_STATUS_ERROR
BREAKPOINTS_STATUS_FILE = cvar.BREAKPOINTS_STATUS_FILE
BREAKPOINTS_STATUS_LINE = cvar.BREAKPOINTS_STATUS_LINE
BREAKPOINTS_STATUS_COLUMN = cvar.BREAKPOINTS_STATUS_COLUMN
BREAKPOINTS_INSTANCE_ERROR = cvar.BREAKPOINTS_INSTANCE_ERROR
BREAKPOINTS_INSTANCE_CONTEXT = cvar.BREAKPOINTS_INSTANCE_CONTEXT
BREAKPOINTS_INSTANCE_ADDRESS = cvar.BREAKPOINTS_INSTANCE_ADDRESS

def IBreakpointContext_SWIGSharedPtrUpcast(*args):
  return _pyavrdbg_raw.IBreakpointContext_SWIGSharedPtrUpcast(*args)
IBreakpointContext_SWIGSharedPtrUpcast = _pyavrdbg_raw.IBreakpointContext_SWIGSharedPtrUpcast

class IBreakpointInstance(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IBreakpointInstance, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IBreakpointInstance, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def getBreakpoint(self): return _pyavrdbg_raw.IBreakpointInstance_getBreakpoint(self)
    def getBreakpointType(self): return _pyavrdbg_raw.IBreakpointInstance_getBreakpointType(self)
    def getProcess(self): return _pyavrdbg_raw.IBreakpointInstance_getProcess(self)
    def getBoundAddress(self): return _pyavrdbg_raw.IBreakpointInstance_getBoundAddress(self)
    def getError(self): return _pyavrdbg_raw.IBreakpointInstance_getError(self)
    def setError(self, *args): return _pyavrdbg_raw.IBreakpointInstance_setError(self, *args)
    def getProperties(self): return _pyavrdbg_raw.IBreakpointInstance_getProperties(self)
    __swig_destroy__ = _pyavrdbg_raw.delete_IBreakpointInstance
    __del__ = lambda self : None;
IBreakpointInstance_swigregister = _pyavrdbg_raw.IBreakpointInstance_swigregister
IBreakpointInstance_swigregister(IBreakpointInstance)

class vector_of_IDeviceContextSharedPtr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vector_of_IDeviceContextSharedPtr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vector_of_IDeviceContextSharedPtr, name)
    __repr__ = _swig_repr
    def iterator(self): return _pyavrdbg_raw.vector_of_IDeviceContextSharedPtr_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _pyavrdbg_raw.vector_of_IDeviceContextSharedPtr___nonzero__(self)
    def __bool__(self): return _pyavrdbg_raw.vector_of_IDeviceContextSharedPtr___bool__(self)
    def __len__(self): return _pyavrdbg_raw.vector_of_IDeviceContextSharedPtr___len__(self)
    def pop(self): return _pyavrdbg_raw.vector_of_IDeviceContextSharedPtr_pop(self)
    def __getslice__(self, *args): return _pyavrdbg_raw.vector_of_IDeviceContextSharedPtr___getslice__(self, *args)
    def __setslice__(self, *args): return _pyavrdbg_raw.vector_of_IDeviceContextSharedPtr___setslice__(self, *args)
    def __delslice__(self, *args): return _pyavrdbg_raw.vector_of_IDeviceContextSharedPtr___delslice__(self, *args)
    def __delitem__(self, *args): return _pyavrdbg_raw.vector_of_IDeviceContextSharedPtr___delitem__(self, *args)
    def __getitem__(self, *args): return _pyavrdbg_raw.vector_of_IDeviceContextSharedPtr___getitem__(self, *args)
    def __setitem__(self, *args): return _pyavrdbg_raw.vector_of_IDeviceContextSharedPtr___setitem__(self, *args)
    def append(self, *args): return _pyavrdbg_raw.vector_of_IDeviceContextSharedPtr_append(self, *args)
    def empty(self): return _pyavrdbg_raw.vector_of_IDeviceContextSharedPtr_empty(self)
    def size(self): return _pyavrdbg_raw.vector_of_IDeviceContextSharedPtr_size(self)
    def clear(self): return _pyavrdbg_raw.vector_of_IDeviceContextSharedPtr_clear(self)
    def swap(self, *args): return _pyavrdbg_raw.vector_of_IDeviceContextSharedPtr_swap(self, *args)
    def get_allocator(self): return _pyavrdbg_raw.vector_of_IDeviceContextSharedPtr_get_allocator(self)
    def begin(self): return _pyavrdbg_raw.vector_of_IDeviceContextSharedPtr_begin(self)
    def end(self): return _pyavrdbg_raw.vector_of_IDeviceContextSharedPtr_end(self)
    def rbegin(self): return _pyavrdbg_raw.vector_of_IDeviceContextSharedPtr_rbegin(self)
    def rend(self): return _pyavrdbg_raw.vector_of_IDeviceContextSharedPtr_rend(self)
    def pop_back(self): return _pyavrdbg_raw.vector_of_IDeviceContextSharedPtr_pop_back(self)
    def erase(self, *args): return _pyavrdbg_raw.vector_of_IDeviceContextSharedPtr_erase(self, *args)
    def __init__(self, *args): 
        this = _pyavrdbg_raw.new_vector_of_IDeviceContextSharedPtr(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _pyavrdbg_raw.vector_of_IDeviceContextSharedPtr_push_back(self, *args)
    def front(self): return _pyavrdbg_raw.vector_of_IDeviceContextSharedPtr_front(self)
    def back(self): return _pyavrdbg_raw.vector_of_IDeviceContextSharedPtr_back(self)
    def assign(self, *args): return _pyavrdbg_raw.vector_of_IDeviceContextSharedPtr_assign(self, *args)
    def resize(self, *args): return _pyavrdbg_raw.vector_of_IDeviceContextSharedPtr_resize(self, *args)
    def insert(self, *args): return _pyavrdbg_raw.vector_of_IDeviceContextSharedPtr_insert(self, *args)
    def reserve(self, *args): return _pyavrdbg_raw.vector_of_IDeviceContextSharedPtr_reserve(self, *args)
    def capacity(self): return _pyavrdbg_raw.vector_of_IDeviceContextSharedPtr_capacity(self)
    __swig_destroy__ = _pyavrdbg_raw.delete_vector_of_IDeviceContextSharedPtr
    __del__ = lambda self : None;
vector_of_IDeviceContextSharedPtr_swigregister = _pyavrdbg_raw.vector_of_IDeviceContextSharedPtr_swigregister
vector_of_IDeviceContextSharedPtr_swigregister(vector_of_IDeviceContextSharedPtr)

class IDeviceService(IServiceBase):
    __swig_setmethods__ = {}
    for _s in [IServiceBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IDeviceService, name, value)
    __swig_getmethods__ = {}
    for _s in [IServiceBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, IDeviceService, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def getSupportedDevices(self): return _pyavrdbg_raw.IDeviceService_getSupportedDevices(self)
    def getDeviceConfigurationFile(self, *args): return _pyavrdbg_raw.IDeviceService_getDeviceConfigurationFile(self, *args)
    def getDeviceInfo(self, *args): return _pyavrdbg_raw.IDeviceService_getDeviceInfo(self, *args)
    __swig_getmethods__["SWIGSharedPtrUpcast"] = lambda x: _pyavrdbg_raw.IDeviceService_SWIGSharedPtrUpcast
    if _newclass:SWIGSharedPtrUpcast = staticmethod(_pyavrdbg_raw.IDeviceService_SWIGSharedPtrUpcast)
    __swig_destroy__ = _pyavrdbg_raw.delete_IDeviceService
    __del__ = lambda self : None;
IDeviceService_swigregister = _pyavrdbg_raw.IDeviceService_swigregister
IDeviceService_swigregister(IDeviceService)

def IDeviceService_SWIGSharedPtrUpcast(*args):
  return _pyavrdbg_raw.IDeviceService_SWIGSharedPtrUpcast(*args)
IDeviceService_SWIGSharedPtrUpcast = _pyavrdbg_raw.IDeviceService_SWIGSharedPtrUpcast

class DeviceId(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DeviceId, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DeviceId, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pyavrdbg_raw.new_DeviceId(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_setmethods__["jtagId"] = _pyavrdbg_raw.DeviceId_jtagId_set
    __swig_getmethods__["jtagId"] = _pyavrdbg_raw.DeviceId_jtagId_get
    if _newclass:jtagId = _swig_property(_pyavrdbg_raw.DeviceId_jtagId_get, _pyavrdbg_raw.DeviceId_jtagId_set)
    __swig_setmethods__["signature"] = _pyavrdbg_raw.DeviceId_signature_set
    __swig_getmethods__["signature"] = _pyavrdbg_raw.DeviceId_signature_get
    if _newclass:signature = _swig_property(_pyavrdbg_raw.DeviceId_signature_get, _pyavrdbg_raw.DeviceId_signature_set)
    __swig_setmethods__["revision"] = _pyavrdbg_raw.DeviceId_revision_set
    __swig_getmethods__["revision"] = _pyavrdbg_raw.DeviceId_revision_get
    if _newclass:revision = _swig_property(_pyavrdbg_raw.DeviceId_revision_get, _pyavrdbg_raw.DeviceId_revision_set)
    __swig_destroy__ = _pyavrdbg_raw.delete_DeviceId
    __del__ = lambda self : None;
DeviceId_swigregister = _pyavrdbg_raw.DeviceId_swigregister
DeviceId_swigregister(DeviceId)
DEVICE_PROP_NAME = cvar.DEVICE_PROP_NAME
DEVICE_PROP_SESSION = cvar.DEVICE_PROP_SESSION
DEVICE_PROP_MEMORY_IDS = cvar.DEVICE_PROP_MEMORY_IDS
DEVICE_PROP_RUNCONTROL_ID = cvar.DEVICE_PROP_RUNCONTROL_ID
DEVICE_PROP_REGISTERS_ID = cvar.DEVICE_PROP_REGISTERS_ID
DEVICE_PROP_TRACE_ID = cvar.DEVICE_PROP_TRACE_ID
DEVICE_PROP_KEEP_TIMERS_RUNNING = cvar.DEVICE_PROP_KEEP_TIMERS_RUNNING
DEVICE_PROP_JTAGID = cvar.DEVICE_PROP_JTAGID
DEVICE_PROP_SIGNATURE = cvar.DEVICE_PROP_SIGNATURE
DEVICE_AVR32_FLASHC_BASE_ADDRESS = cvar.DEVICE_AVR32_FLASHC_BASE_ADDRESS
DEVICE_AVR32_FLASH_SIZE = cvar.DEVICE_AVR32_FLASH_SIZE
DEVICE_AVR32_FLASH_PAGE_SIZE = cvar.DEVICE_AVR32_FLASH_PAGE_SIZE
DEVICE_AVR32_NUM_RESET_DOMAINS = cvar.DEVICE_AVR32_NUM_RESET_DOMAINS
DEVICE_AVR32_BUGGY_AWIRE_BLOCK_READ = cvar.DEVICE_AVR32_BUGGY_AWIRE_BLOCK_READ
DEVICE_AVR32_BUGGY_AWIRE_BLOCK_WRITE = cvar.DEVICE_AVR32_BUGGY_AWIRE_BLOCK_WRITE

class MaskedIODetails(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MaskedIODetails, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MaskedIODetails, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pyavrdbg_raw.new_MaskedIODetails()
        try: self.this.append(this)
        except: self.this = this
    __swig_setmethods__["startAddress"] = _pyavrdbg_raw.MaskedIODetails_startAddress_set
    __swig_getmethods__["startAddress"] = _pyavrdbg_raw.MaskedIODetails_startAddress_get
    if _newclass:startAddress = _swig_property(_pyavrdbg_raw.MaskedIODetails_startAddress_get, _pyavrdbg_raw.MaskedIODetails_startAddress_set)
    __swig_setmethods__["sizeOfIOMemory"] = _pyavrdbg_raw.MaskedIODetails_sizeOfIOMemory_set
    __swig_getmethods__["sizeOfIOMemory"] = _pyavrdbg_raw.MaskedIODetails_sizeOfIOMemory_get
    if _newclass:sizeOfIOMemory = _swig_property(_pyavrdbg_raw.MaskedIODetails_sizeOfIOMemory_get, _pyavrdbg_raw.MaskedIODetails_sizeOfIOMemory_set)
    __swig_setmethods__["unreadableAddresses"] = _pyavrdbg_raw.MaskedIODetails_unreadableAddresses_set
    __swig_getmethods__["unreadableAddresses"] = _pyavrdbg_raw.MaskedIODetails_unreadableAddresses_get
    if _newclass:unreadableAddresses = _swig_property(_pyavrdbg_raw.MaskedIODetails_unreadableAddresses_get, _pyavrdbg_raw.MaskedIODetails_unreadableAddresses_set)
    __swig_setmethods__["unwritableAddresses"] = _pyavrdbg_raw.MaskedIODetails_unwritableAddresses_set
    __swig_getmethods__["unwritableAddresses"] = _pyavrdbg_raw.MaskedIODetails_unwritableAddresses_get
    if _newclass:unwritableAddresses = _swig_property(_pyavrdbg_raw.MaskedIODetails_unwritableAddresses_get, _pyavrdbg_raw.MaskedIODetails_unwritableAddresses_set)
    __swig_destroy__ = _pyavrdbg_raw.delete_MaskedIODetails
    __del__ = lambda self : None;
MaskedIODetails_swigregister = _pyavrdbg_raw.MaskedIODetails_swigregister
MaskedIODetails_swigregister(MaskedIODetails)

class IDeviceContext(IContextBase):
    __swig_setmethods__ = {}
    for _s in [IContextBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IDeviceContext, name, value)
    __swig_getmethods__ = {}
    for _s in [IContextBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, IDeviceContext, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    NoSession = _pyavrdbg_raw.IDeviceContext_NoSession
    ProgrammingSession = _pyavrdbg_raw.IDeviceContext_ProgrammingSession
    DebuggingSession = _pyavrdbg_raw.IDeviceContext_DebuggingSession
    OPERATION_DISABLE_DEBUGWIRE = _pyavrdbg_raw.IDeviceContext_OPERATION_DISABLE_DEBUGWIRE
    OPERATION_DISABLE_CLOCKOPTIMIZATION = _pyavrdbg_raw.IDeviceContext_OPERATION_DISABLE_CLOCKOPTIMIZATION
    OPERATION_SECURE_FLASH = _pyavrdbg_raw.IDeviceContext_OPERATION_SECURE_FLASH
    OPERATION_ENABLE_OCD = _pyavrdbg_raw.IDeviceContext_OPERATION_ENABLE_OCD
    OPERATION_ALLOW_FLASH_CACHING = _pyavrdbg_raw.IDeviceContext_OPERATION_ALLOW_FLASH_CACHING
    OPERATION_DISABLE_OCD = _pyavrdbg_raw.IDeviceContext_OPERATION_DISABLE_OCD
    SECUREBIT_SET = _pyavrdbg_raw.IDeviceContext_SECUREBIT_SET
    NAME = _pyavrdbg_raw.IDeviceContext_NAME
    FAMILY = _pyavrdbg_raw.IDeviceContext_FAMILY
    ADDRESS_SPACES = _pyavrdbg_raw.IDeviceContext_ADDRESS_SPACES
    CHIP = _pyavrdbg_raw.IDeviceContext_CHIP
    FLASH = _pyavrdbg_raw.IDeviceContext_FLASH
    XMEGA_APPLICATION = _pyavrdbg_raw.IDeviceContext_XMEGA_APPLICATION
    XMEGA_BOOT_SECTION = _pyavrdbg_raw.IDeviceContext_XMEGA_BOOT_SECTION
    XMEGA_EEPROM = _pyavrdbg_raw.IDeviceContext_XMEGA_EEPROM
    XMEGA_APPLICATION_PAGE = _pyavrdbg_raw.IDeviceContext_XMEGA_APPLICATION_PAGE
    XMEGA_EEPROM_PAGE = _pyavrdbg_raw.IDeviceContext_XMEGA_EEPROM_PAGE
    XMEGA_BOOT_PAGE = _pyavrdbg_raw.IDeviceContext_XMEGA_BOOT_PAGE
    XMEGA_USER_SIGNATURE = _pyavrdbg_raw.IDeviceContext_XMEGA_USER_SIGNATURE
    UC3_USERPAGE = _pyavrdbg_raw.IDeviceContext_UC3_USERPAGE
    ARM_USER_SIGNATURES = _pyavrdbg_raw.IDeviceContext_ARM_USER_SIGNATURES
    CHIP_PRESERVE_EEPROM = _pyavrdbg_raw.IDeviceContext_CHIP_PRESERVE_EEPROM
    CHIP_OVERWRITE_EEPROM = _pyavrdbg_raw.IDeviceContext_CHIP_OVERWRITE_EEPROM
    def getName(self): return _pyavrdbg_raw.IDeviceContext_getName(self)
    def startSession(self, *args): return _pyavrdbg_raw.IDeviceContext_startSession(self, *args)
    def endSession(self): return _pyavrdbg_raw.IDeviceContext_endSession(self)
    def getSessionType(self): return _pyavrdbg_raw.IDeviceContext_getSessionType(self)
    def getProcess(self): return _pyavrdbg_raw.IDeviceContext_getProcess(self)
    def getRunControl(self): return _pyavrdbg_raw.IDeviceContext_getRunControl(self)
    def getMemories(self): return _pyavrdbg_raw.IDeviceContext_getMemories(self)
    def getMemory(self, *args): return _pyavrdbg_raw.IDeviceContext_getMemory(self, *args)
    def getRegisters(self): return _pyavrdbg_raw.IDeviceContext_getRegisters(self)
    def getRegister(self, *args): return _pyavrdbg_raw.IDeviceContext_getRegister(self, *args)
    def getBreakpointsTarget(self): return _pyavrdbg_raw.IDeviceContext_getBreakpointsTarget(self)
    def getStimuliTarget(self): return _pyavrdbg_raw.IDeviceContext_getStimuliTarget(self)
    def getTraceContext(self): return _pyavrdbg_raw.IDeviceContext_getTraceContext(self)
    def getTraceTarget(self): return _pyavrdbg_raw.IDeviceContext_getTraceTarget(self)
    def getResourceInfoProvider(self): return _pyavrdbg_raw.IDeviceContext_getResourceInfoProvider(self)
    def erase(self, *args): return _pyavrdbg_raw.IDeviceContext_erase(self, *args)
    VERIFY_NOT_SUPPORTED = _pyavrdbg_raw.IDeviceContext_VERIFY_NOT_SUPPORTED
    VERIFY_OK = _pyavrdbg_raw.IDeviceContext_VERIFY_OK
    VERIFY_FAILED = _pyavrdbg_raw.IDeviceContext_VERIFY_FAILED
    def verifyMemory(self, *args): return _pyavrdbg_raw.IDeviceContext_verifyMemory(self, *args)
    def getDeviceInfo(self): return _pyavrdbg_raw.IDeviceContext_getDeviceInfo(self)
    def getInfo(self, *args): return _pyavrdbg_raw.IDeviceContext_getInfo(self, *args)
    def getDeviceConfigurationPacket(self): return _pyavrdbg_raw.IDeviceContext_getDeviceConfigurationPacket(self)
    def getOcdMaskedIOAddresses(self, *args): return _pyavrdbg_raw.IDeviceContext_getOcdMaskedIOAddresses(self, *args)
    def specialOperation(self, *args): return _pyavrdbg_raw.IDeviceContext_specialOperation(self, *args)
    def addExternalResetHandler(self, *args): return _pyavrdbg_raw.IDeviceContext_addExternalResetHandler(self, *args)
    def addPowerStateHandler(self, *args): return _pyavrdbg_raw.IDeviceContext_addPowerStateHandler(self, *args)
    def addTargetEventHandler(self, *args): return _pyavrdbg_raw.IDeviceContext_addTargetEventHandler(self, *args)
    def getProperty(self, *args): return _pyavrdbg_raw.IDeviceContext_getProperty(self, *args)
    __swig_getmethods__["SWIGSharedPtrUpcast"] = lambda x: _pyavrdbg_raw.IDeviceContext_SWIGSharedPtrUpcast
    if _newclass:SWIGSharedPtrUpcast = staticmethod(_pyavrdbg_raw.IDeviceContext_SWIGSharedPtrUpcast)
    __swig_destroy__ = _pyavrdbg_raw.delete_IDeviceContext
    __del__ = lambda self : None;
IDeviceContext_swigregister = _pyavrdbg_raw.IDeviceContext_swigregister
IDeviceContext_swigregister(IDeviceContext)

def IDeviceContext_SWIGSharedPtrUpcast(*args):
  return _pyavrdbg_raw.IDeviceContext_SWIGSharedPtrUpcast(*args)
IDeviceContext_SWIGSharedPtrUpcast = _pyavrdbg_raw.IDeviceContext_SWIGSharedPtrUpcast

class vector_of_IProcessContextSharedPtr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vector_of_IProcessContextSharedPtr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vector_of_IProcessContextSharedPtr, name)
    __repr__ = _swig_repr
    def iterator(self): return _pyavrdbg_raw.vector_of_IProcessContextSharedPtr_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _pyavrdbg_raw.vector_of_IProcessContextSharedPtr___nonzero__(self)
    def __bool__(self): return _pyavrdbg_raw.vector_of_IProcessContextSharedPtr___bool__(self)
    def __len__(self): return _pyavrdbg_raw.vector_of_IProcessContextSharedPtr___len__(self)
    def pop(self): return _pyavrdbg_raw.vector_of_IProcessContextSharedPtr_pop(self)
    def __getslice__(self, *args): return _pyavrdbg_raw.vector_of_IProcessContextSharedPtr___getslice__(self, *args)
    def __setslice__(self, *args): return _pyavrdbg_raw.vector_of_IProcessContextSharedPtr___setslice__(self, *args)
    def __delslice__(self, *args): return _pyavrdbg_raw.vector_of_IProcessContextSharedPtr___delslice__(self, *args)
    def __delitem__(self, *args): return _pyavrdbg_raw.vector_of_IProcessContextSharedPtr___delitem__(self, *args)
    def __getitem__(self, *args): return _pyavrdbg_raw.vector_of_IProcessContextSharedPtr___getitem__(self, *args)
    def __setitem__(self, *args): return _pyavrdbg_raw.vector_of_IProcessContextSharedPtr___setitem__(self, *args)
    def append(self, *args): return _pyavrdbg_raw.vector_of_IProcessContextSharedPtr_append(self, *args)
    def empty(self): return _pyavrdbg_raw.vector_of_IProcessContextSharedPtr_empty(self)
    def size(self): return _pyavrdbg_raw.vector_of_IProcessContextSharedPtr_size(self)
    def clear(self): return _pyavrdbg_raw.vector_of_IProcessContextSharedPtr_clear(self)
    def swap(self, *args): return _pyavrdbg_raw.vector_of_IProcessContextSharedPtr_swap(self, *args)
    def get_allocator(self): return _pyavrdbg_raw.vector_of_IProcessContextSharedPtr_get_allocator(self)
    def begin(self): return _pyavrdbg_raw.vector_of_IProcessContextSharedPtr_begin(self)
    def end(self): return _pyavrdbg_raw.vector_of_IProcessContextSharedPtr_end(self)
    def rbegin(self): return _pyavrdbg_raw.vector_of_IProcessContextSharedPtr_rbegin(self)
    def rend(self): return _pyavrdbg_raw.vector_of_IProcessContextSharedPtr_rend(self)
    def pop_back(self): return _pyavrdbg_raw.vector_of_IProcessContextSharedPtr_pop_back(self)
    def erase(self, *args): return _pyavrdbg_raw.vector_of_IProcessContextSharedPtr_erase(self, *args)
    def __init__(self, *args): 
        this = _pyavrdbg_raw.new_vector_of_IProcessContextSharedPtr(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _pyavrdbg_raw.vector_of_IProcessContextSharedPtr_push_back(self, *args)
    def front(self): return _pyavrdbg_raw.vector_of_IProcessContextSharedPtr_front(self)
    def back(self): return _pyavrdbg_raw.vector_of_IProcessContextSharedPtr_back(self)
    def assign(self, *args): return _pyavrdbg_raw.vector_of_IProcessContextSharedPtr_assign(self, *args)
    def resize(self, *args): return _pyavrdbg_raw.vector_of_IProcessContextSharedPtr_resize(self, *args)
    def insert(self, *args): return _pyavrdbg_raw.vector_of_IProcessContextSharedPtr_insert(self, *args)
    def reserve(self, *args): return _pyavrdbg_raw.vector_of_IProcessContextSharedPtr_reserve(self, *args)
    def capacity(self): return _pyavrdbg_raw.vector_of_IProcessContextSharedPtr_capacity(self)
    __swig_destroy__ = _pyavrdbg_raw.delete_vector_of_IProcessContextSharedPtr
    __del__ = lambda self : None;
vector_of_IProcessContextSharedPtr_swigregister = _pyavrdbg_raw.vector_of_IProcessContextSharedPtr_swigregister
vector_of_IProcessContextSharedPtr_swigregister(vector_of_IProcessContextSharedPtr)

class IProcessesService(IServiceBase):
    __swig_setmethods__ = {}
    for _s in [IServiceBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IProcessesService, name, value)
    __swig_getmethods__ = {}
    for _s in [IServiceBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, IProcessesService, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def getProcessContextFromId(self, *args): return _pyavrdbg_raw.IProcessesService_getProcessContextFromId(self, *args)
    def getProcessChildren(self, *args): return _pyavrdbg_raw.IProcessesService_getProcessChildren(self, *args)
    def start(self, *args): return _pyavrdbg_raw.IProcessesService_start(self, *args)
    def launch(self, *args): return _pyavrdbg_raw.IProcessesService_launch(self, *args)
    def terminate(self, *args): return _pyavrdbg_raw.IProcessesService_terminate(self, *args)
    def addExitHandler(self, *args): return _pyavrdbg_raw.IProcessesService_addExitHandler(self, *args)
    __swig_getmethods__["SWIGSharedPtrUpcast"] = lambda x: _pyavrdbg_raw.IProcessesService_SWIGSharedPtrUpcast
    if _newclass:SWIGSharedPtrUpcast = staticmethod(_pyavrdbg_raw.IProcessesService_SWIGSharedPtrUpcast)
    __swig_destroy__ = _pyavrdbg_raw.delete_IProcessesService
    __del__ = lambda self : None;
IProcessesService_swigregister = _pyavrdbg_raw.IProcessesService_swigregister
IProcessesService_swigregister(IProcessesService)
LAUNCH_SUSPENDED = cvar.LAUNCH_SUSPENDED
LAUNCH_ATTACHED = cvar.LAUNCH_ATTACHED
LAUNCH_PRESERVE_EEPROM = cvar.LAUNCH_PRESERVE_EEPROM
LAUNCH_PROGRAM_ERASE_RULE = cvar.LAUNCH_PROGRAM_ERASE_RULE
LAUNCH_LOADMODULE_PARAMS = cvar.LAUNCH_LOADMODULE_PARAMS
DEBUG_CACHE_FLASH = cvar.DEBUG_CACHE_FLASH
DEBUG_USE_GDB = cvar.DEBUG_USE_GDB
DEBUG_GDB_LOCATION = cvar.DEBUG_GDB_LOCATION
DEBUG_UNCACHE_REGION = cvar.DEBUG_UNCACHE_REGION
PROGRAM_USE_RAM_SNIPPET = cvar.PROGRAM_USE_RAM_SNIPPET
PROGRAM_RAM_SNIPPET_ADR = cvar.PROGRAM_RAM_SNIPPET_ADR
PROGRAM_BOOT_SEGMENT = cvar.PROGRAM_BOOT_SEGMENT

def IProcessesService_SWIGSharedPtrUpcast(*args):
  return _pyavrdbg_raw.IProcessesService_SWIGSharedPtrUpcast(*args)
IProcessesService_SWIGSharedPtrUpcast = _pyavrdbg_raw.IProcessesService_SWIGSharedPtrUpcast

class IProcessContext(IContextBase):
    __swig_setmethods__ = {}
    for _s in [IContextBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IProcessContext, name, value)
    __swig_getmethods__ = {}
    for _s in [IContextBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, IProcessContext, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def getName(self): return _pyavrdbg_raw.IProcessContext_getName(self)
    def isAttached(self): return _pyavrdbg_raw.IProcessContext_isAttached(self)
    def canTerminate(self): return _pyavrdbg_raw.IProcessContext_canTerminate(self)
    def attach(self, *args): return _pyavrdbg_raw.IProcessContext_attach(self, *args)
    def detach(self): return _pyavrdbg_raw.IProcessContext_detach(self)
    def loadModule(self, *args): return _pyavrdbg_raw.IProcessContext_loadModule(self, *args)
    def unloadModule(self, *args): return _pyavrdbg_raw.IProcessContext_unloadModule(self, *args)
    def getModules(self): return _pyavrdbg_raw.IProcessContext_getModules(self)
    def getRegisters(self): return _pyavrdbg_raw.IProcessContext_getRegisters(self)
    def getMemories(self): return _pyavrdbg_raw.IProcessContext_getMemories(self)
    def getMemory(self, *args): return _pyavrdbg_raw.IProcessContext_getMemory(self, *args)
    def getRunControl(self): return _pyavrdbg_raw.IProcessContext_getRunControl(self)
    def getBreakpointsTarget(self): return _pyavrdbg_raw.IProcessContext_getBreakpointsTarget(self)
    def getDeviceContext(self): return _pyavrdbg_raw.IProcessContext_getDeviceContext(self)
    def getLineNumberService(self): return _pyavrdbg_raw.IProcessContext_getLineNumberService(self)
    def getStackService(self): return _pyavrdbg_raw.IProcessContext_getStackService(self)
    def getExpressionsService(self): return _pyavrdbg_raw.IProcessContext_getExpressionsService(self)
    def removeBreakpointInstanceFromProcess(self, *args): return _pyavrdbg_raw.IProcessContext_removeBreakpointInstanceFromProcess(self, *args)
    def addBreakpointInstanceToProcess(self, *args): return _pyavrdbg_raw.IProcessContext_addBreakpointInstanceToProcess(self, *args)
    __swig_getmethods__["SWIGSharedPtrUpcast"] = lambda x: _pyavrdbg_raw.IProcessContext_SWIGSharedPtrUpcast
    if _newclass:SWIGSharedPtrUpcast = staticmethod(_pyavrdbg_raw.IProcessContext_SWIGSharedPtrUpcast)
    __swig_destroy__ = _pyavrdbg_raw.delete_IProcessContext
    __del__ = lambda self : None;
IProcessContext_swigregister = _pyavrdbg_raw.IProcessContext_swigregister
IProcessContext_swigregister(IProcessContext)
PROCESS_PROP_ID = cvar.PROCESS_PROP_ID
PROCESS_PROP_PARENT_ID = cvar.PROCESS_PROP_PARENT_ID
PROCESS_PROP_ATTACHED = cvar.PROCESS_PROP_ATTACHED
PROCESS_PROP_CAN_TERMINATE = cvar.PROCESS_PROP_CAN_TERMINATE
PROCESS_PROP_NAME = cvar.PROCESS_PROP_NAME
PROCESS_PROP_STDIN_ID = cvar.PROCESS_PROP_STDIN_ID
PROCESS_PROP_STDOUT_ID = cvar.PROCESS_PROP_STDOUT_ID
PROCESS_PROP_STDERR_ID = cvar.PROCESS_PROP_STDERR_ID
PROCESS_PROP_RUNCTRL_ID = cvar.PROCESS_PROP_RUNCTRL_ID
PROCESS_PROP_TRACE_ID = cvar.PROCESS_PROP_TRACE_ID
PROCESS_PROP_MODULE_MEMORY_TYPE = cvar.PROCESS_PROP_MODULE_MEMORY_TYPE
PROCESS_PROP_MODULE_LOAD_ADDRESS = cvar.PROCESS_PROP_MODULE_LOAD_ADDRESS
PROCESS_PROP_MODULE_USE_SYMBOLS = cvar.PROCESS_PROP_MODULE_USE_SYMBOLS

def IProcessContext_SWIGSharedPtrUpcast(*args):
  return _pyavrdbg_raw.IProcessContext_SWIGSharedPtrUpcast(*args)
IProcessContext_SWIGSharedPtrUpcast = _pyavrdbg_raw.IProcessContext_SWIGSharedPtrUpcast

class vector_of_IRunControlContextSharedPtr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vector_of_IRunControlContextSharedPtr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vector_of_IRunControlContextSharedPtr, name)
    __repr__ = _swig_repr
    def iterator(self): return _pyavrdbg_raw.vector_of_IRunControlContextSharedPtr_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _pyavrdbg_raw.vector_of_IRunControlContextSharedPtr___nonzero__(self)
    def __bool__(self): return _pyavrdbg_raw.vector_of_IRunControlContextSharedPtr___bool__(self)
    def __len__(self): return _pyavrdbg_raw.vector_of_IRunControlContextSharedPtr___len__(self)
    def pop(self): return _pyavrdbg_raw.vector_of_IRunControlContextSharedPtr_pop(self)
    def __getslice__(self, *args): return _pyavrdbg_raw.vector_of_IRunControlContextSharedPtr___getslice__(self, *args)
    def __setslice__(self, *args): return _pyavrdbg_raw.vector_of_IRunControlContextSharedPtr___setslice__(self, *args)
    def __delslice__(self, *args): return _pyavrdbg_raw.vector_of_IRunControlContextSharedPtr___delslice__(self, *args)
    def __delitem__(self, *args): return _pyavrdbg_raw.vector_of_IRunControlContextSharedPtr___delitem__(self, *args)
    def __getitem__(self, *args): return _pyavrdbg_raw.vector_of_IRunControlContextSharedPtr___getitem__(self, *args)
    def __setitem__(self, *args): return _pyavrdbg_raw.vector_of_IRunControlContextSharedPtr___setitem__(self, *args)
    def append(self, *args): return _pyavrdbg_raw.vector_of_IRunControlContextSharedPtr_append(self, *args)
    def empty(self): return _pyavrdbg_raw.vector_of_IRunControlContextSharedPtr_empty(self)
    def size(self): return _pyavrdbg_raw.vector_of_IRunControlContextSharedPtr_size(self)
    def clear(self): return _pyavrdbg_raw.vector_of_IRunControlContextSharedPtr_clear(self)
    def swap(self, *args): return _pyavrdbg_raw.vector_of_IRunControlContextSharedPtr_swap(self, *args)
    def get_allocator(self): return _pyavrdbg_raw.vector_of_IRunControlContextSharedPtr_get_allocator(self)
    def begin(self): return _pyavrdbg_raw.vector_of_IRunControlContextSharedPtr_begin(self)
    def end(self): return _pyavrdbg_raw.vector_of_IRunControlContextSharedPtr_end(self)
    def rbegin(self): return _pyavrdbg_raw.vector_of_IRunControlContextSharedPtr_rbegin(self)
    def rend(self): return _pyavrdbg_raw.vector_of_IRunControlContextSharedPtr_rend(self)
    def pop_back(self): return _pyavrdbg_raw.vector_of_IRunControlContextSharedPtr_pop_back(self)
    def erase(self, *args): return _pyavrdbg_raw.vector_of_IRunControlContextSharedPtr_erase(self, *args)
    def __init__(self, *args): 
        this = _pyavrdbg_raw.new_vector_of_IRunControlContextSharedPtr(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _pyavrdbg_raw.vector_of_IRunControlContextSharedPtr_push_back(self, *args)
    def front(self): return _pyavrdbg_raw.vector_of_IRunControlContextSharedPtr_front(self)
    def back(self): return _pyavrdbg_raw.vector_of_IRunControlContextSharedPtr_back(self)
    def assign(self, *args): return _pyavrdbg_raw.vector_of_IRunControlContextSharedPtr_assign(self, *args)
    def resize(self, *args): return _pyavrdbg_raw.vector_of_IRunControlContextSharedPtr_resize(self, *args)
    def insert(self, *args): return _pyavrdbg_raw.vector_of_IRunControlContextSharedPtr_insert(self, *args)
    def reserve(self, *args): return _pyavrdbg_raw.vector_of_IRunControlContextSharedPtr_reserve(self, *args)
    def capacity(self): return _pyavrdbg_raw.vector_of_IRunControlContextSharedPtr_capacity(self)
    __swig_destroy__ = _pyavrdbg_raw.delete_vector_of_IRunControlContextSharedPtr
    __del__ = lambda self : None;
vector_of_IRunControlContextSharedPtr_swigregister = _pyavrdbg_raw.vector_of_IRunControlContextSharedPtr_swigregister
vector_of_IRunControlContextSharedPtr_swigregister(vector_of_IRunControlContextSharedPtr)

class IRunControlService(IServiceBase):
    __swig_setmethods__ = {}
    for _s in [IServiceBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IRunControlService, name, value)
    __swig_getmethods__ = {}
    for _s in [IServiceBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, IRunControlService, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_getmethods__["SWIGSharedPtrUpcast"] = lambda x: _pyavrdbg_raw.IRunControlService_SWIGSharedPtrUpcast
    if _newclass:SWIGSharedPtrUpcast = staticmethod(_pyavrdbg_raw.IRunControlService_SWIGSharedPtrUpcast)
    __swig_destroy__ = _pyavrdbg_raw.delete_IRunControlService
    __del__ = lambda self : None;
IRunControlService_swigregister = _pyavrdbg_raw.IRunControlService_swigregister
IRunControlService_swigregister(IRunControlService)

def IRunControlService_SWIGSharedPtrUpcast(*args):
  return _pyavrdbg_raw.IRunControlService_SWIGSharedPtrUpcast(*args)
IRunControlService_SWIGSharedPtrUpcast = _pyavrdbg_raw.IRunControlService_SWIGSharedPtrUpcast

REASON_USER_REQUEST = _pyavrdbg_raw.REASON_USER_REQUEST
REASON_STEP = _pyavrdbg_raw.REASON_STEP
REASON_BREAKPOINT = _pyavrdbg_raw.REASON_BREAKPOINT
REASON_EXCEPTION = _pyavrdbg_raw.REASON_EXCEPTION
REASON_CONTAINER = _pyavrdbg_raw.REASON_CONTAINER
REASON_WATCHPOINT = _pyavrdbg_raw.REASON_WATCHPOINT
REASON_SIGNAL = _pyavrdbg_raw.REASON_SIGNAL
REASON_SHAREDLIB = _pyavrdbg_raw.REASON_SHAREDLIB
REASON_ERROR = _pyavrdbg_raw.REASON_ERROR
REASON_RESET = _pyavrdbg_raw.REASON_RESET
REASON_RUN = _pyavrdbg_raw.REASON_RUN
REASON_STEP_INTO = _pyavrdbg_raw.REASON_STEP_INTO
REASON_GOTO = _pyavrdbg_raw.REASON_GOTO
AUTO_DISABLE_INT = _pyavrdbg_raw.AUTO_DISABLE_INT
STEP_INTO_INT = _pyavrdbg_raw.STEP_INTO_INT
AUTO_STEP_OUT = _pyavrdbg_raw.AUTO_STEP_OUT
USE_RUNTO = _pyavrdbg_raw.USE_RUNTO
AUTO_DISABLE_INT_WAS_0 = _pyavrdbg_raw.AUTO_DISABLE_INT_WAS_0
AUTO_DISABLE_INT_WAS_1 = _pyavrdbg_raw.AUTO_DISABLE_INT_WAS_1
AUTO_DISABLE_INTDISABLED = _pyavrdbg_raw.AUTO_DISABLE_INTDISABLED
class RunControlState(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RunControlState, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RunControlState, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pyavrdbg_raw.new_RunControlState()
        try: self.this.append(this)
        except: self.this = this
    __swig_setmethods__["suspended"] = _pyavrdbg_raw.RunControlState_suspended_set
    __swig_getmethods__["suspended"] = _pyavrdbg_raw.RunControlState_suspended_get
    if _newclass:suspended = _swig_property(_pyavrdbg_raw.RunControlState_suspended_get, _pyavrdbg_raw.RunControlState_suspended_set)
    __swig_setmethods__["pc"] = _pyavrdbg_raw.RunControlState_pc_set
    __swig_getmethods__["pc"] = _pyavrdbg_raw.RunControlState_pc_get
    if _newclass:pc = _swig_property(_pyavrdbg_raw.RunControlState_pc_get, _pyavrdbg_raw.RunControlState_pc_set)
    __swig_setmethods__["reason"] = _pyavrdbg_raw.RunControlState_reason_set
    __swig_getmethods__["reason"] = _pyavrdbg_raw.RunControlState_reason_get
    if _newclass:reason = _swig_property(_pyavrdbg_raw.RunControlState_reason_get, _pyavrdbg_raw.RunControlState_reason_set)
    __swig_setmethods__["params"] = _pyavrdbg_raw.RunControlState_params_set
    __swig_getmethods__["params"] = _pyavrdbg_raw.RunControlState_params_get
    if _newclass:params = _swig_property(_pyavrdbg_raw.RunControlState_params_get, _pyavrdbg_raw.RunControlState_params_set)
    __swig_destroy__ = _pyavrdbg_raw.delete_RunControlState
    __del__ = lambda self : None;
RunControlState_swigregister = _pyavrdbg_raw.RunControlState_swigregister
RunControlState_swigregister(RunControlState)
RUN_CTRL_PROP_IS_CONTAINER = cvar.RUN_CTRL_PROP_IS_CONTAINER
RUN_CTRL_PROP_HAS_STATE = cvar.RUN_CTRL_PROP_HAS_STATE
RUN_CTRL_PROP_CAN_SUSPEND = cvar.RUN_CTRL_PROP_CAN_SUSPEND
RUN_CTRL_PROP_CAN_COUNT = cvar.RUN_CTRL_PROP_CAN_COUNT
RUN_CTRL_PROP_CAN_RESUME = cvar.RUN_CTRL_PROP_CAN_RESUME
RUN_CTRL_PROP_CAN_TERMINATE = cvar.RUN_CTRL_PROP_CAN_TERMINATE
RUN_CTRL_PROP_INTCTRL_STEP = cvar.RUN_CTRL_PROP_INTCTRL_STEP
RUN_CTRL_PARAM_BREAKPOINT_ID = cvar.RUN_CTRL_PARAM_BREAKPOINT_ID
RUN_CTRL_REASON_USER_REQUEST = cvar.RUN_CTRL_REASON_USER_REQUEST
RUN_CTRL_REASON_STEP = cvar.RUN_CTRL_REASON_STEP
RUN_CTRL_REASON_BREAKPOINT = cvar.RUN_CTRL_REASON_BREAKPOINT
RUN_CTRL_REASON_EXCEPTION = cvar.RUN_CTRL_REASON_EXCEPTION
RUN_CTRL_REASON_CONTAINER = cvar.RUN_CTRL_REASON_CONTAINER
RUN_CTRL_REASON_WATCHPOINT = cvar.RUN_CTRL_REASON_WATCHPOINT
RUN_CTRL_REASON_SIGNAL = cvar.RUN_CTRL_REASON_SIGNAL
RUN_CTRL_REASON_SHAREDLIB = cvar.RUN_CTRL_REASON_SHAREDLIB
RUN_CTRL_REASON_ERROR = cvar.RUN_CTRL_REASON_ERROR
RUN_CTRL_REASON_RESET = cvar.RUN_CTRL_REASON_RESET

class IRunControlContext(IContextBase):
    __swig_setmethods__ = {}
    for _s in [IContextBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IRunControlContext, name, value)
    __swig_getmethods__ = {}
    for _s in [IContextBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, IRunControlContext, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    RUN_CTRL_RM_RESUME = _pyavrdbg_raw.IRunControlContext_RUN_CTRL_RM_RESUME
    RUN_CTRL_RM_STEP_OVER = _pyavrdbg_raw.IRunControlContext_RUN_CTRL_RM_STEP_OVER
    RUN_CTRL_RM_STEP_INTO = _pyavrdbg_raw.IRunControlContext_RUN_CTRL_RM_STEP_INTO
    RUN_CTRL_RM_STEP_OVER_LINE = _pyavrdbg_raw.IRunControlContext_RUN_CTRL_RM_STEP_OVER_LINE
    RUN_CTRL_RM_STEP_INTO_LINE = _pyavrdbg_raw.IRunControlContext_RUN_CTRL_RM_STEP_INTO_LINE
    RUN_CTRL_RM_STEP_OUT = _pyavrdbg_raw.IRunControlContext_RUN_CTRL_RM_STEP_OUT
    RUN_CTRL_RM_REVERSE_RESUME = _pyavrdbg_raw.IRunControlContext_RUN_CTRL_RM_REVERSE_RESUME
    RUN_CTRL_RM_REVERSE_STEP_OVER = _pyavrdbg_raw.IRunControlContext_RUN_CTRL_RM_REVERSE_STEP_OVER
    RUN_CTRL_RM_REVERSE_STEP_INTO = _pyavrdbg_raw.IRunControlContext_RUN_CTRL_RM_REVERSE_STEP_INTO
    RUN_CTRL_RM_REVERSE_STEP_OVER_LINE = _pyavrdbg_raw.IRunControlContext_RUN_CTRL_RM_REVERSE_STEP_OVER_LINE
    RUN_CTRL_RM_REVERSE_STEP_INTO_LINE = _pyavrdbg_raw.IRunControlContext_RUN_CTRL_RM_REVERSE_STEP_INTO_LINE
    RUN_CTRL_RM_REVERSE_STEP_OUT = _pyavrdbg_raw.IRunControlContext_RUN_CTRL_RM_REVERSE_STEP_OUT
    RUN_CTRL_RM_STEP_OVER_RANGE = _pyavrdbg_raw.IRunControlContext_RUN_CTRL_RM_STEP_OVER_RANGE
    RUN_CTRL_RM_STEP_INTO_RANGE = _pyavrdbg_raw.IRunControlContext_RUN_CTRL_RM_STEP_INTO_RANGE
    RUN_CTRL_RM_REVERSE_STEP_OVER_RANGE = _pyavrdbg_raw.IRunControlContext_RUN_CTRL_RM_REVERSE_STEP_OVER_RANGE
    RUN_CTRL_RM_REVERSE_STEP_INTO_RANGE = _pyavrdbg_raw.IRunControlContext_RUN_CTRL_RM_REVERSE_STEP_INTO_RANGE
    RUN_CTRL_RM_RESET = _pyavrdbg_raw.IRunControlContext_RUN_CTRL_RM_RESET
    RUN_CTRL_RM_GOTO = _pyavrdbg_raw.IRunControlContext_RUN_CTRL_RM_GOTO
    RUN_CTRL_RM_SIZE = _pyavrdbg_raw.IRunControlContext_RUN_CTRL_RM_SIZE
    RUN_CTRL_SUSPEND = _pyavrdbg_raw.IRunControlContext_RUN_CTRL_SUSPEND
    RUN_CTRL_RESET = _pyavrdbg_raw.IRunControlContext_RUN_CTRL_RESET
    RUNSTATE_UNKNOWN = _pyavrdbg_raw.IRunControlContext_RUNSTATE_UNKNOWN
    RUNSTATE_RUNNING = _pyavrdbg_raw.IRunControlContext_RUNSTATE_RUNNING
    RUNSTATE_HALTED = _pyavrdbg_raw.IRunControlContext_RUNSTATE_HALTED
    def isContainer(self): return _pyavrdbg_raw.IRunControlContext_isContainer(self)
    def hasState(self): return _pyavrdbg_raw.IRunControlContext_hasState(self)
    def canSuspend(self): return _pyavrdbg_raw.IRunControlContext_canSuspend(self)
    def canResume(self, *args): return _pyavrdbg_raw.IRunControlContext_canResume(self, *args)
    def canCount(self, *args): return _pyavrdbg_raw.IRunControlContext_canCount(self, *args)
    def canTerminate(self): return _pyavrdbg_raw.IRunControlContext_canTerminate(self)
    def getState(self, *args): return _pyavrdbg_raw.IRunControlContext_getState(self, *args)
    def setPc(self, *args): return _pyavrdbg_raw.IRunControlContext_setPc(self, *args)
    def suspend(self, *args): return _pyavrdbg_raw.IRunControlContext_suspend(self, *args)
    def resume(self, *args): return _pyavrdbg_raw.IRunControlContext_resume(self, *args)
    def terminate(self): return _pyavrdbg_raw.IRunControlContext_terminate(self)
    def detach(self): return _pyavrdbg_raw.IRunControlContext_detach(self)
    def attach(self): return _pyavrdbg_raw.IRunControlContext_attach(self)
    def addSuspendedHandler(self, *args): return _pyavrdbg_raw.IRunControlContext_addSuspendedHandler(self, *args)
    def addResumedHandler(self, *args): return _pyavrdbg_raw.IRunControlContext_addResumedHandler(self, *args)
    __swig_getmethods__["SWIGSharedPtrUpcast"] = lambda x: _pyavrdbg_raw.IRunControlContext_SWIGSharedPtrUpcast
    if _newclass:SWIGSharedPtrUpcast = staticmethod(_pyavrdbg_raw.IRunControlContext_SWIGSharedPtrUpcast)
    def pyAddResumedHandler(self, *args): return _pyavrdbg_raw.IRunControlContext_pyAddResumedHandler(self, *args)
    def pyAddSuspendedHandler(self, *args): return _pyavrdbg_raw.IRunControlContext_pyAddSuspendedHandler(self, *args)
    __swig_destroy__ = _pyavrdbg_raw.delete_IRunControlContext
    __del__ = lambda self : None;
IRunControlContext_swigregister = _pyavrdbg_raw.IRunControlContext_swigregister
IRunControlContext_swigregister(IRunControlContext)

def IRunControlContext_SWIGSharedPtrUpcast(*args):
  return _pyavrdbg_raw.IRunControlContext_SWIGSharedPtrUpcast(*args)
IRunControlContext_SWIGSharedPtrUpcast = _pyavrdbg_raw.IRunControlContext_SWIGSharedPtrUpcast

class vector_of_IMemoryContextSharedPtr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vector_of_IMemoryContextSharedPtr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vector_of_IMemoryContextSharedPtr, name)
    __repr__ = _swig_repr
    def iterator(self): return _pyavrdbg_raw.vector_of_IMemoryContextSharedPtr_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _pyavrdbg_raw.vector_of_IMemoryContextSharedPtr___nonzero__(self)
    def __bool__(self): return _pyavrdbg_raw.vector_of_IMemoryContextSharedPtr___bool__(self)
    def __len__(self): return _pyavrdbg_raw.vector_of_IMemoryContextSharedPtr___len__(self)
    def pop(self): return _pyavrdbg_raw.vector_of_IMemoryContextSharedPtr_pop(self)
    def __getslice__(self, *args): return _pyavrdbg_raw.vector_of_IMemoryContextSharedPtr___getslice__(self, *args)
    def __setslice__(self, *args): return _pyavrdbg_raw.vector_of_IMemoryContextSharedPtr___setslice__(self, *args)
    def __delslice__(self, *args): return _pyavrdbg_raw.vector_of_IMemoryContextSharedPtr___delslice__(self, *args)
    def __delitem__(self, *args): return _pyavrdbg_raw.vector_of_IMemoryContextSharedPtr___delitem__(self, *args)
    def __getitem__(self, *args): return _pyavrdbg_raw.vector_of_IMemoryContextSharedPtr___getitem__(self, *args)
    def __setitem__(self, *args): return _pyavrdbg_raw.vector_of_IMemoryContextSharedPtr___setitem__(self, *args)
    def append(self, *args): return _pyavrdbg_raw.vector_of_IMemoryContextSharedPtr_append(self, *args)
    def empty(self): return _pyavrdbg_raw.vector_of_IMemoryContextSharedPtr_empty(self)
    def size(self): return _pyavrdbg_raw.vector_of_IMemoryContextSharedPtr_size(self)
    def clear(self): return _pyavrdbg_raw.vector_of_IMemoryContextSharedPtr_clear(self)
    def swap(self, *args): return _pyavrdbg_raw.vector_of_IMemoryContextSharedPtr_swap(self, *args)
    def get_allocator(self): return _pyavrdbg_raw.vector_of_IMemoryContextSharedPtr_get_allocator(self)
    def begin(self): return _pyavrdbg_raw.vector_of_IMemoryContextSharedPtr_begin(self)
    def end(self): return _pyavrdbg_raw.vector_of_IMemoryContextSharedPtr_end(self)
    def rbegin(self): return _pyavrdbg_raw.vector_of_IMemoryContextSharedPtr_rbegin(self)
    def rend(self): return _pyavrdbg_raw.vector_of_IMemoryContextSharedPtr_rend(self)
    def pop_back(self): return _pyavrdbg_raw.vector_of_IMemoryContextSharedPtr_pop_back(self)
    def erase(self, *args): return _pyavrdbg_raw.vector_of_IMemoryContextSharedPtr_erase(self, *args)
    def __init__(self, *args): 
        this = _pyavrdbg_raw.new_vector_of_IMemoryContextSharedPtr(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _pyavrdbg_raw.vector_of_IMemoryContextSharedPtr_push_back(self, *args)
    def front(self): return _pyavrdbg_raw.vector_of_IMemoryContextSharedPtr_front(self)
    def back(self): return _pyavrdbg_raw.vector_of_IMemoryContextSharedPtr_back(self)
    def assign(self, *args): return _pyavrdbg_raw.vector_of_IMemoryContextSharedPtr_assign(self, *args)
    def resize(self, *args): return _pyavrdbg_raw.vector_of_IMemoryContextSharedPtr_resize(self, *args)
    def insert(self, *args): return _pyavrdbg_raw.vector_of_IMemoryContextSharedPtr_insert(self, *args)
    def reserve(self, *args): return _pyavrdbg_raw.vector_of_IMemoryContextSharedPtr_reserve(self, *args)
    def capacity(self): return _pyavrdbg_raw.vector_of_IMemoryContextSharedPtr_capacity(self)
    __swig_destroy__ = _pyavrdbg_raw.delete_vector_of_IMemoryContextSharedPtr
    __del__ = lambda self : None;
vector_of_IMemoryContextSharedPtr_swigregister = _pyavrdbg_raw.vector_of_IMemoryContextSharedPtr_swigregister
vector_of_IMemoryContextSharedPtr_swigregister(vector_of_IMemoryContextSharedPtr)

class IMemoryService(IServiceBase):
    __swig_setmethods__ = {}
    for _s in [IServiceBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IMemoryService, name, value)
    __swig_getmethods__ = {}
    for _s in [IServiceBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, IMemoryService, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def getMemoryContextFromId(self, *args): return _pyavrdbg_raw.IMemoryService_getMemoryContextFromId(self, *args)
    def getMemoryChildren(self, *args): return _pyavrdbg_raw.IMemoryService_getMemoryChildren(self, *args)
    __swig_getmethods__["SWIGSharedPtrUpcast"] = lambda x: _pyavrdbg_raw.IMemoryService_SWIGSharedPtrUpcast
    if _newclass:SWIGSharedPtrUpcast = staticmethod(_pyavrdbg_raw.IMemoryService_SWIGSharedPtrUpcast)
    __swig_destroy__ = _pyavrdbg_raw.delete_IMemoryService
    __del__ = lambda self : None;
IMemoryService_swigregister = _pyavrdbg_raw.IMemoryService_swigregister
IMemoryService_swigregister(IMemoryService)

def IMemoryService_SWIGSharedPtrUpcast(*args):
  return _pyavrdbg_raw.IMemoryService_SWIGSharedPtrUpcast(*args)
IMemoryService_SWIGSharedPtrUpcast = _pyavrdbg_raw.IMemoryService_SWIGSharedPtrUpcast

MEMORY_ACCESS_NOTHING_SPECIAL = _pyavrdbg_raw.MEMORY_ACCESS_NOTHING_SPECIAL
MEMORY_ACCESS_CONTINUEONERROR = _pyavrdbg_raw.MEMORY_ACCESS_CONTINUEONERROR
MEMORY_ACCESS_VERIFY = _pyavrdbg_raw.MEMORY_ACCESS_VERIFY
MEMORY_ACCESS_READ_MODIFY_WRITE = _pyavrdbg_raw.MEMORY_ACCESS_READ_MODIFY_WRITE
MEMORY_ACCESS_READ_MODIFY_WRITE_NO_ERASE = _pyavrdbg_raw.MEMORY_ACCESS_READ_MODIFY_WRITE_NO_ERASE
MEMORY_ACCESS_READ_UNCACHED = _pyavrdbg_raw.MEMORY_ACCESS_READ_UNCACHED
MEMORY_ACCESS_POPULATE_CACHE = _pyavrdbg_raw.MEMORY_ACCESS_POPULATE_CACHE
class IMemoryError(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IMemoryError, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IMemoryError, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    BYTE_VALID = _pyavrdbg_raw.IMemoryError_BYTE_VALID
    BYTE_UNKNOWN = _pyavrdbg_raw.IMemoryError_BYTE_UNKNOWN
    BYTE_INVALID = _pyavrdbg_raw.IMemoryError_BYTE_INVALID
    BYTE_CANNOT_READ = _pyavrdbg_raw.IMemoryError_BYTE_CANNOT_READ
    BYTE_CANNOT_WRITE = _pyavrdbg_raw.IMemoryError_BYTE_CANNOT_WRITE
    def getStatus(self, *args): return _pyavrdbg_raw.IMemoryError_getStatus(self, *args)
    def getMessage(self, *args): return _pyavrdbg_raw.IMemoryError_getMessage(self, *args)
    def allLocationsAreValid(self, *args): return _pyavrdbg_raw.IMemoryError_allLocationsAreValid(self, *args)
    def isOk(self): return _pyavrdbg_raw.IMemoryError_isOk(self)
    __swig_destroy__ = _pyavrdbg_raw.delete_IMemoryError
    __del__ = lambda self : None;
IMemoryError_swigregister = _pyavrdbg_raw.IMemoryError_swigregister
IMemoryError_swigregister(IMemoryError)
MEMORY_PROP_ID = cvar.MEMORY_PROP_ID
MEMORY_PROP_PARENT_ID = cvar.MEMORY_PROP_PARENT_ID
MEMORY_PROP_PROCESS_ID = cvar.MEMORY_PROP_PROCESS_ID
MEMORY_PROP_BIG_ENDIAN = cvar.MEMORY_PROP_BIG_ENDIAN
MEMORY_PROP_ADDRESS_SIZE = cvar.MEMORY_PROP_ADDRESS_SIZE
MEMORY_PROP_NAME = cvar.MEMORY_PROP_NAME
MEMORY_PROP_START_BOUND = cvar.MEMORY_PROP_START_BOUND
MEMORY_PROP_END_BOUND = cvar.MEMORY_PROP_END_BOUND
MEMORY_PROP_ACCESS_TYPES = cvar.MEMORY_PROP_ACCESS_TYPES
MEMORY_ACCESS_INSTRUCTION = cvar.MEMORY_ACCESS_INSTRUCTION
MEMORY_ACCESS_DATA = cvar.MEMORY_ACCESS_DATA
MEMORY_ACCESS_IO = cvar.MEMORY_ACCESS_IO
MEMORY_ACCESS_USER = cvar.MEMORY_ACCESS_USER
MEMORY_ACCESS_SUPERVISOR = cvar.MEMORY_ACCESS_SUPERVISOR
MEMORY_ACCESS_HYPERVISOR = cvar.MEMORY_ACCESS_HYPERVISOR
MEMORY_ACCESS_VIRTUAL = cvar.MEMORY_ACCESS_VIRTUAL
MEMORY_ACCESS_PHYSICAL = cvar.MEMORY_ACCESS_PHYSICAL
MEMORY_ACCESS_CACHE = cvar.MEMORY_ACCESS_CACHE
MEMORY_ACCESS_TLB = cvar.MEMORY_ACCESS_TLB

class IMemoryContext(IContextBase):
    __swig_setmethods__ = {}
    for _s in [IContextBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IMemoryContext, name, value)
    __swig_getmethods__ = {}
    for _s in [IContextBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, IMemoryContext, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def getProcess(self): return _pyavrdbg_raw.IMemoryContext_getProcess(self)
    def isMemoryBigEndian(self): return _pyavrdbg_raw.IMemoryContext_isMemoryBigEndian(self)
    def getMemoryAddressSize(self): return _pyavrdbg_raw.IMemoryContext_getMemoryAddressSize(self)
    def getMemoryName(self): return _pyavrdbg_raw.IMemoryContext_getMemoryName(self)
    def getMemoryStartBound(self): return _pyavrdbg_raw.IMemoryContext_getMemoryStartBound(self)
    def getMemoryEndBound(self): return _pyavrdbg_raw.IMemoryContext_getMemoryEndBound(self)
    def getMemoryAccessTypes(self): return _pyavrdbg_raw.IMemoryContext_getMemoryAccessTypes(self)
    def setMemory(self, *args): return _pyavrdbg_raw.IMemoryContext_setMemory(self, *args)
    def getMemory(self, *args): return _pyavrdbg_raw.IMemoryContext_getMemory(self, *args)
    def fillMemory(self, *args): return _pyavrdbg_raw.IMemoryContext_fillMemory(self, *args)
    def addMemoryChangedHandler(self, *args): return _pyavrdbg_raw.IMemoryContext_addMemoryChangedHandler(self, *args)
    def SetChipLocked(self, *args): return _pyavrdbg_raw.IMemoryContext_SetChipLocked(self, *args)
    def defineCacheRegion(self, *args): return _pyavrdbg_raw.IMemoryContext_defineCacheRegion(self, *args)
    def defineUncacheableRegion(self, *args): return _pyavrdbg_raw.IMemoryContext_defineUncacheableRegion(self, *args)
    def commitCachedChanges(self, *args): return _pyavrdbg_raw.IMemoryContext_commitCachedChanges(self, *args)
    def getPersistedSegments(self, *args): return _pyavrdbg_raw.IMemoryContext_getPersistedSegments(self, *args)
    __swig_getmethods__["SWIGSharedPtrUpcast"] = lambda x: _pyavrdbg_raw.IMemoryContext_SWIGSharedPtrUpcast
    if _newclass:SWIGSharedPtrUpcast = staticmethod(_pyavrdbg_raw.IMemoryContext_SWIGSharedPtrUpcast)
    __swig_destroy__ = _pyavrdbg_raw.delete_IMemoryContext
    __del__ = lambda self : None;
IMemoryContext_swigregister = _pyavrdbg_raw.IMemoryContext_swigregister
IMemoryContext_swigregister(IMemoryContext)

def IMemoryContext_SWIGSharedPtrUpcast(*args):
  return _pyavrdbg_raw.IMemoryContext_SWIGSharedPtrUpcast(*args)
IMemoryContext_SWIGSharedPtrUpcast = _pyavrdbg_raw.IMemoryContext_SWIGSharedPtrUpcast

class vector_of_IRegistersContextSharedPtr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vector_of_IRegistersContextSharedPtr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vector_of_IRegistersContextSharedPtr, name)
    __repr__ = _swig_repr
    def iterator(self): return _pyavrdbg_raw.vector_of_IRegistersContextSharedPtr_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _pyavrdbg_raw.vector_of_IRegistersContextSharedPtr___nonzero__(self)
    def __bool__(self): return _pyavrdbg_raw.vector_of_IRegistersContextSharedPtr___bool__(self)
    def __len__(self): return _pyavrdbg_raw.vector_of_IRegistersContextSharedPtr___len__(self)
    def pop(self): return _pyavrdbg_raw.vector_of_IRegistersContextSharedPtr_pop(self)
    def __getslice__(self, *args): return _pyavrdbg_raw.vector_of_IRegistersContextSharedPtr___getslice__(self, *args)
    def __setslice__(self, *args): return _pyavrdbg_raw.vector_of_IRegistersContextSharedPtr___setslice__(self, *args)
    def __delslice__(self, *args): return _pyavrdbg_raw.vector_of_IRegistersContextSharedPtr___delslice__(self, *args)
    def __delitem__(self, *args): return _pyavrdbg_raw.vector_of_IRegistersContextSharedPtr___delitem__(self, *args)
    def __getitem__(self, *args): return _pyavrdbg_raw.vector_of_IRegistersContextSharedPtr___getitem__(self, *args)
    def __setitem__(self, *args): return _pyavrdbg_raw.vector_of_IRegistersContextSharedPtr___setitem__(self, *args)
    def append(self, *args): return _pyavrdbg_raw.vector_of_IRegistersContextSharedPtr_append(self, *args)
    def empty(self): return _pyavrdbg_raw.vector_of_IRegistersContextSharedPtr_empty(self)
    def size(self): return _pyavrdbg_raw.vector_of_IRegistersContextSharedPtr_size(self)
    def clear(self): return _pyavrdbg_raw.vector_of_IRegistersContextSharedPtr_clear(self)
    def swap(self, *args): return _pyavrdbg_raw.vector_of_IRegistersContextSharedPtr_swap(self, *args)
    def get_allocator(self): return _pyavrdbg_raw.vector_of_IRegistersContextSharedPtr_get_allocator(self)
    def begin(self): return _pyavrdbg_raw.vector_of_IRegistersContextSharedPtr_begin(self)
    def end(self): return _pyavrdbg_raw.vector_of_IRegistersContextSharedPtr_end(self)
    def rbegin(self): return _pyavrdbg_raw.vector_of_IRegistersContextSharedPtr_rbegin(self)
    def rend(self): return _pyavrdbg_raw.vector_of_IRegistersContextSharedPtr_rend(self)
    def pop_back(self): return _pyavrdbg_raw.vector_of_IRegistersContextSharedPtr_pop_back(self)
    def erase(self, *args): return _pyavrdbg_raw.vector_of_IRegistersContextSharedPtr_erase(self, *args)
    def __init__(self, *args): 
        this = _pyavrdbg_raw.new_vector_of_IRegistersContextSharedPtr(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _pyavrdbg_raw.vector_of_IRegistersContextSharedPtr_push_back(self, *args)
    def front(self): return _pyavrdbg_raw.vector_of_IRegistersContextSharedPtr_front(self)
    def back(self): return _pyavrdbg_raw.vector_of_IRegistersContextSharedPtr_back(self)
    def assign(self, *args): return _pyavrdbg_raw.vector_of_IRegistersContextSharedPtr_assign(self, *args)
    def resize(self, *args): return _pyavrdbg_raw.vector_of_IRegistersContextSharedPtr_resize(self, *args)
    def insert(self, *args): return _pyavrdbg_raw.vector_of_IRegistersContextSharedPtr_insert(self, *args)
    def reserve(self, *args): return _pyavrdbg_raw.vector_of_IRegistersContextSharedPtr_reserve(self, *args)
    def capacity(self): return _pyavrdbg_raw.vector_of_IRegistersContextSharedPtr_capacity(self)
    __swig_destroy__ = _pyavrdbg_raw.delete_vector_of_IRegistersContextSharedPtr
    __del__ = lambda self : None;
vector_of_IRegistersContextSharedPtr_swigregister = _pyavrdbg_raw.vector_of_IRegistersContextSharedPtr_swigregister
vector_of_IRegistersContextSharedPtr_swigregister(vector_of_IRegistersContextSharedPtr)

class IRegistersService(IServiceBase):
    __swig_setmethods__ = {}
    for _s in [IServiceBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IRegistersService, name, value)
    __swig_getmethods__ = {}
    for _s in [IServiceBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, IRegistersService, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_getmethods__["SWIGSharedPtrUpcast"] = lambda x: _pyavrdbg_raw.IRegistersService_SWIGSharedPtrUpcast
    if _newclass:SWIGSharedPtrUpcast = staticmethod(_pyavrdbg_raw.IRegistersService_SWIGSharedPtrUpcast)
    __swig_destroy__ = _pyavrdbg_raw.delete_IRegistersService
    __del__ = lambda self : None;
IRegistersService_swigregister = _pyavrdbg_raw.IRegistersService_swigregister
IRegistersService_swigregister(IRegistersService)

def IRegistersService_SWIGSharedPtrUpcast(*args):
  return _pyavrdbg_raw.IRegistersService_SWIGSharedPtrUpcast(*args)
IRegistersService_SWIGSharedPtrUpcast = _pyavrdbg_raw.IRegistersService_SWIGSharedPtrUpcast

class IRegistersContext(IContextBase):
    __swig_setmethods__ = {}
    for _s in [IContextBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IRegistersContext, name, value)
    __swig_getmethods__ = {}
    for _s in [IContextBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, IRegistersContext, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SPECIAL_INDEX = _pyavrdbg_raw.IRegistersContext_SPECIAL_INDEX
    __swig_destroy__ = _pyavrdbg_raw.delete_IRegistersContext
    __del__ = lambda self : None;
    def getName(self): return _pyavrdbg_raw.IRegistersContext_getName(self)
    def getDescription(self): return _pyavrdbg_raw.IRegistersContext_getDescription(self)
    def getSize(self): return _pyavrdbg_raw.IRegistersContext_getSize(self)
    def isReadable(self): return _pyavrdbg_raw.IRegistersContext_isReadable(self)
    def isReadOnce(self): return _pyavrdbg_raw.IRegistersContext_isReadOnce(self)
    def isWriteable(self): return _pyavrdbg_raw.IRegistersContext_isWriteable(self)
    def isWriteOnce(self): return _pyavrdbg_raw.IRegistersContext_isWriteOnce(self)
    def hasSideEffects(self): return _pyavrdbg_raw.IRegistersContext_hasSideEffects(self)
    def isVolatile(self): return _pyavrdbg_raw.IRegistersContext_isVolatile(self)
    def isFloat(self): return _pyavrdbg_raw.IRegistersContext_isFloat(self)
    def isBigEndian(self): return _pyavrdbg_raw.IRegistersContext_isBigEndian(self)
    def isLeftToRight(self): return _pyavrdbg_raw.IRegistersContext_isLeftToRight(self)
    def getFirstBitNumber(self): return _pyavrdbg_raw.IRegistersContext_getFirstBitNumber(self)
    def getBitNumbers(self): return _pyavrdbg_raw.IRegistersContext_getBitNumbers(self)
    def getNamedValues(self): return _pyavrdbg_raw.IRegistersContext_getNamedValues(self)
    def getMemoryAddress(self): return _pyavrdbg_raw.IRegistersContext_getMemoryAddress(self)
    def getMemoryContext(self): return _pyavrdbg_raw.IRegistersContext_getMemoryContext(self)
    def canSearch(self): return _pyavrdbg_raw.IRegistersContext_canSearch(self)
    def getRole(self): return _pyavrdbg_raw.IRegistersContext_getRole(self)
    def get(self): return _pyavrdbg_raw.IRegistersContext_get(self)
    def set(self, *args): return _pyavrdbg_raw.IRegistersContext_set(self, *args)
    def search(self, *args): return _pyavrdbg_raw.IRegistersContext_search(self, *args)
    def getValue(self): return _pyavrdbg_raw.IRegistersContext_getValue(self)
    def getIndex(self): return _pyavrdbg_raw.IRegistersContext_getIndex(self)
    def addRegisterChangedHandler(self, *args): return _pyavrdbg_raw.IRegistersContext_addRegisterChangedHandler(self, *args)
    __swig_getmethods__["SWIGSharedPtrUpcast"] = lambda x: _pyavrdbg_raw.IRegistersContext_SWIGSharedPtrUpcast
    if _newclass:SWIGSharedPtrUpcast = staticmethod(_pyavrdbg_raw.IRegistersContext_SWIGSharedPtrUpcast)
IRegistersContext_swigregister = _pyavrdbg_raw.IRegistersContext_swigregister
IRegistersContext_swigregister(IRegistersContext)
REGISTERS_PROP_ID = cvar.REGISTERS_PROP_ID
REGISTERS_PROP_PARENT_ID = cvar.REGISTERS_PROP_PARENT_ID
REGISTERS_PROP_PROCESS_ID = cvar.REGISTERS_PROP_PROCESS_ID
REGISTERS_PROP_NAME = cvar.REGISTERS_PROP_NAME
REGISTERS_PROP_DESCRIPTION = cvar.REGISTERS_PROP_DESCRIPTION
REGISTERS_PROP_SIZE = cvar.REGISTERS_PROP_SIZE
REGISTERS_PROP_READABLE = cvar.REGISTERS_PROP_READABLE
REGISTERS_PROP_READ_ONCE = cvar.REGISTERS_PROP_READ_ONCE
REGISTERS_PROP_WRITEABLE = cvar.REGISTERS_PROP_WRITEABLE
REGISTERS_PROP_WRITE_ONCE = cvar.REGISTERS_PROP_WRITE_ONCE
REGISTERS_PROP_SIDE_EFFECTS = cvar.REGISTERS_PROP_SIDE_EFFECTS
REGISTERS_PROP_VOLATILE = cvar.REGISTERS_PROP_VOLATILE
REGISTERS_PROP_FLOAT = cvar.REGISTERS_PROP_FLOAT
REGISTERS_PROP_BIG_ENDIAN = cvar.REGISTERS_PROP_BIG_ENDIAN
REGISTERS_PROP_LEFT_TO_RIGHT = cvar.REGISTERS_PROP_LEFT_TO_RIGHT
REGISTERS_PROP_FIST_BIT = cvar.REGISTERS_PROP_FIST_BIT
REGISTERS_PROP_BITS = cvar.REGISTERS_PROP_BITS
REGISTERS_PROP_VALUES = cvar.REGISTERS_PROP_VALUES
REGISTERS_PROP_MEMORY_ADDRESS = cvar.REGISTERS_PROP_MEMORY_ADDRESS
REGISTERS_PROP_MEMORY_CONTEXT = cvar.REGISTERS_PROP_MEMORY_CONTEXT
REGISTERS_PROP_CAN_SEARCH = cvar.REGISTERS_PROP_CAN_SEARCH
REGISTERS_PROP_ROLE = cvar.REGISTERS_PROP_ROLE
REGISTERS_ROLE_PC = cvar.REGISTERS_ROLE_PC
REGISTERS_ROLE_SP = cvar.REGISTERS_ROLE_SP
REGISTERS_ROLE_FP = cvar.REGISTERS_ROLE_FP
REGISTERS_ROLE_RET = cvar.REGISTERS_ROLE_RET
REGISTERS_ROLE_CORE = cvar.REGISTERS_ROLE_CORE
REGISTERS_ROLE_SREG = cvar.REGISTERS_ROLE_SREG
REGISTERS_ROLE_ALIAS = cvar.REGISTERS_ROLE_ALIAS
REGISTERS_ROLE_CYCLECOUNTER = cvar.REGISTERS_ROLE_CYCLECOUNTER
REGISTERS_SEARCH_NAME = cvar.REGISTERS_SEARCH_NAME
REGISTERS_SEARCH_EQUAL_VALUE = cvar.REGISTERS_SEARCH_EQUAL_VALUE

def IRegistersContext_SWIGSharedPtrUpcast(*args):
  return _pyavrdbg_raw.IRegistersContext_SWIGSharedPtrUpcast(*args)
IRegistersContext_SWIGSharedPtrUpcast = _pyavrdbg_raw.IRegistersContext_SWIGSharedPtrUpcast

class vector_of_ISymbolContextSharedPtr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vector_of_ISymbolContextSharedPtr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vector_of_ISymbolContextSharedPtr, name)
    __repr__ = _swig_repr
    def iterator(self): return _pyavrdbg_raw.vector_of_ISymbolContextSharedPtr_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _pyavrdbg_raw.vector_of_ISymbolContextSharedPtr___nonzero__(self)
    def __bool__(self): return _pyavrdbg_raw.vector_of_ISymbolContextSharedPtr___bool__(self)
    def __len__(self): return _pyavrdbg_raw.vector_of_ISymbolContextSharedPtr___len__(self)
    def pop(self): return _pyavrdbg_raw.vector_of_ISymbolContextSharedPtr_pop(self)
    def __getslice__(self, *args): return _pyavrdbg_raw.vector_of_ISymbolContextSharedPtr___getslice__(self, *args)
    def __setslice__(self, *args): return _pyavrdbg_raw.vector_of_ISymbolContextSharedPtr___setslice__(self, *args)
    def __delslice__(self, *args): return _pyavrdbg_raw.vector_of_ISymbolContextSharedPtr___delslice__(self, *args)
    def __delitem__(self, *args): return _pyavrdbg_raw.vector_of_ISymbolContextSharedPtr___delitem__(self, *args)
    def __getitem__(self, *args): return _pyavrdbg_raw.vector_of_ISymbolContextSharedPtr___getitem__(self, *args)
    def __setitem__(self, *args): return _pyavrdbg_raw.vector_of_ISymbolContextSharedPtr___setitem__(self, *args)
    def append(self, *args): return _pyavrdbg_raw.vector_of_ISymbolContextSharedPtr_append(self, *args)
    def empty(self): return _pyavrdbg_raw.vector_of_ISymbolContextSharedPtr_empty(self)
    def size(self): return _pyavrdbg_raw.vector_of_ISymbolContextSharedPtr_size(self)
    def clear(self): return _pyavrdbg_raw.vector_of_ISymbolContextSharedPtr_clear(self)
    def swap(self, *args): return _pyavrdbg_raw.vector_of_ISymbolContextSharedPtr_swap(self, *args)
    def get_allocator(self): return _pyavrdbg_raw.vector_of_ISymbolContextSharedPtr_get_allocator(self)
    def begin(self): return _pyavrdbg_raw.vector_of_ISymbolContextSharedPtr_begin(self)
    def end(self): return _pyavrdbg_raw.vector_of_ISymbolContextSharedPtr_end(self)
    def rbegin(self): return _pyavrdbg_raw.vector_of_ISymbolContextSharedPtr_rbegin(self)
    def rend(self): return _pyavrdbg_raw.vector_of_ISymbolContextSharedPtr_rend(self)
    def pop_back(self): return _pyavrdbg_raw.vector_of_ISymbolContextSharedPtr_pop_back(self)
    def erase(self, *args): return _pyavrdbg_raw.vector_of_ISymbolContextSharedPtr_erase(self, *args)
    def __init__(self, *args): 
        this = _pyavrdbg_raw.new_vector_of_ISymbolContextSharedPtr(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _pyavrdbg_raw.vector_of_ISymbolContextSharedPtr_push_back(self, *args)
    def front(self): return _pyavrdbg_raw.vector_of_ISymbolContextSharedPtr_front(self)
    def back(self): return _pyavrdbg_raw.vector_of_ISymbolContextSharedPtr_back(self)
    def assign(self, *args): return _pyavrdbg_raw.vector_of_ISymbolContextSharedPtr_assign(self, *args)
    def resize(self, *args): return _pyavrdbg_raw.vector_of_ISymbolContextSharedPtr_resize(self, *args)
    def insert(self, *args): return _pyavrdbg_raw.vector_of_ISymbolContextSharedPtr_insert(self, *args)
    def reserve(self, *args): return _pyavrdbg_raw.vector_of_ISymbolContextSharedPtr_reserve(self, *args)
    def capacity(self): return _pyavrdbg_raw.vector_of_ISymbolContextSharedPtr_capacity(self)
    __swig_destroy__ = _pyavrdbg_raw.delete_vector_of_ISymbolContextSharedPtr
    __del__ = lambda self : None;
vector_of_ISymbolContextSharedPtr_swigregister = _pyavrdbg_raw.vector_of_ISymbolContextSharedPtr_swigregister
vector_of_ISymbolContextSharedPtr_swigregister(vector_of_ISymbolContextSharedPtr)

class ISymbolsService(IService):
    __swig_setmethods__ = {}
    for _s in [IService]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ISymbolsService, name, value)
    __swig_getmethods__ = {}
    for _s in [IService]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ISymbolsService, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def getContextFromId(self, *args): return _pyavrdbg_raw.ISymbolsService_getContextFromId(self, *args)
    def getChildren(self, *args): return _pyavrdbg_raw.ISymbolsService_getChildren(self, *args)
    __swig_destroy__ = _pyavrdbg_raw.delete_ISymbolsService
    __del__ = lambda self : None;
ISymbolsService_swigregister = _pyavrdbg_raw.ISymbolsService_swigregister
ISymbolsService_swigregister(ISymbolsService)

class ISymbolContext(IContextBase):
    __swig_setmethods__ = {}
    for _s in [IContextBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ISymbolContext, name, value)
    __swig_getmethods__ = {}
    for _s in [IContextBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ISymbolContext, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    UNKNOWN_VARIABLE = _pyavrdbg_raw.ISymbolContext_UNKNOWN_VARIABLE
    PROCESS_VARIABLE = _pyavrdbg_raw.ISymbolContext_PROCESS_VARIABLE
    THREAD_VARIABLE = _pyavrdbg_raw.ISymbolContext_THREAD_VARIABLE
    MEMBER_VARIABLE = _pyavrdbg_raw.ISymbolContext_MEMBER_VARIABLE
    UNKNOWN_SYMBOL_CLASS = _pyavrdbg_raw.ISymbolContext_UNKNOWN_SYMBOL_CLASS
    VALUE_CLASS = _pyavrdbg_raw.ISymbolContext_VALUE_CLASS
    REFERENCE_CLASS = _pyavrdbg_raw.ISymbolContext_REFERENCE_CLASS
    FUNCTION_BODY_CLASS = _pyavrdbg_raw.ISymbolContext_FUNCTION_BODY_CLASS
    TYPE_CLASS = _pyavrdbg_raw.ISymbolContext_TYPE_CLASS
    MODIFIER_CLASS = _pyavrdbg_raw.ISymbolContext_MODIFIER_CLASS
    UNKNOWN_TYPE_CLASS = _pyavrdbg_raw.ISymbolContext_UNKNOWN_TYPE_CLASS
    CARDINAL_TYPE_CLASS = _pyavrdbg_raw.ISymbolContext_CARDINAL_TYPE_CLASS
    INTEGER_TYPE_CLASS = _pyavrdbg_raw.ISymbolContext_INTEGER_TYPE_CLASS
    REAL_TYPE_CLASS = _pyavrdbg_raw.ISymbolContext_REAL_TYPE_CLASS
    POINTER_TYPE_CLASS = _pyavrdbg_raw.ISymbolContext_POINTER_TYPE_CLASS
    ARRAY_TYPE_CLASS = _pyavrdbg_raw.ISymbolContext_ARRAY_TYPE_CLASS
    COMPOSITE_TYPE_CLASS = _pyavrdbg_raw.ISymbolContext_COMPOSITE_TYPE_CLASS
    ENUMERATION_TYPE_CLASS = _pyavrdbg_raw.ISymbolContext_ENUMERATION_TYPE_CLASS
    FUNCTION_TYPE_CLASS = _pyavrdbg_raw.ISymbolContext_FUNCTION_TYPE_CLASS
    REFERENCE_TYPE_CLASS = _pyavrdbg_raw.ISymbolContext_REFERENCE_TYPE_CLASS
    def getName(self): return _pyavrdbg_raw.ISymbolContext_getName(self)
    def getSymbolClass(self): return _pyavrdbg_raw.ISymbolContext_getSymbolClass(self)
    def getStorageClass(self): return _pyavrdbg_raw.ISymbolContext_getStorageClass(self)
    def getTypeClass(self): return _pyavrdbg_raw.ISymbolContext_getTypeClass(self)
    def getTypeContext(self): return _pyavrdbg_raw.ISymbolContext_getTypeContext(self)
    def getBaseTypeContext(self): return _pyavrdbg_raw.ISymbolContext_getBaseTypeContext(self)
    def getIndexTypeContext(self): return _pyavrdbg_raw.ISymbolContext_getIndexTypeContext(self)
    def getSize(self): return _pyavrdbg_raw.ISymbolContext_getSize(self)
    def getLength(self): return _pyavrdbg_raw.ISymbolContext_getLength(self)
    def getOffset(self): return _pyavrdbg_raw.ISymbolContext_getOffset(self)
    def getAddress(self): return _pyavrdbg_raw.ISymbolContext_getAddress(self)
    def getValue(self): return _pyavrdbg_raw.ISymbolContext_getValue(self)
    def isBitField(self): return _pyavrdbg_raw.ISymbolContext_isBitField(self)
    def getBitSize(self): return _pyavrdbg_raw.ISymbolContext_getBitSize(self)
    def getBitOffset(self): return _pyavrdbg_raw.ISymbolContext_getBitOffset(self)
    def getArrayDimensions(self): return _pyavrdbg_raw.ISymbolContext_getArrayDimensions(self)
    def getLocation(self, *args): return _pyavrdbg_raw.ISymbolContext_getLocation(self, *args)
    def getChildren(self, *args): return _pyavrdbg_raw.ISymbolContext_getChildren(self, *args)
    def lookupChild(self, *args): return _pyavrdbg_raw.ISymbolContext_lookupChild(self, *args)
    def isEquivalent(self, *args): return _pyavrdbg_raw.ISymbolContext_isEquivalent(self, *args)
    __swig_getmethods__["SWIGSharedPtrUpcast"] = lambda x: _pyavrdbg_raw.ISymbolContext_SWIGSharedPtrUpcast
    if _newclass:SWIGSharedPtrUpcast = staticmethod(_pyavrdbg_raw.ISymbolContext_SWIGSharedPtrUpcast)
    __swig_destroy__ = _pyavrdbg_raw.delete_ISymbolContext
    __del__ = lambda self : None;
ISymbolContext_swigregister = _pyavrdbg_raw.ISymbolContext_swigregister
ISymbolContext_swigregister(ISymbolContext)
SYMBOL_PROP_ID = cvar.SYMBOL_PROP_ID
SYMBOL_PROP_EXE_ID = cvar.SYMBOL_PROP_EXE_ID
SYMBOL_PROP_NAME = cvar.SYMBOL_PROP_NAME
SYMBOL_PROP_SYMBOL_CLASS = cvar.SYMBOL_PROP_SYMBOL_CLASS
SYMBOL_PROP_TYPE_CLASS = cvar.SYMBOL_PROP_TYPE_CLASS
SYMBOL_PROP_TYPE_ID = cvar.SYMBOL_PROP_TYPE_ID
SYMBOL_PROP_BASE_TYPE_ID = cvar.SYMBOL_PROP_BASE_TYPE_ID
SYMBOL_PROP_INDEX_TYPE_ID = cvar.SYMBOL_PROP_INDEX_TYPE_ID
SYMBOL_PROP_SIZE = cvar.SYMBOL_PROP_SIZE
SYMBOL_PROP_LENGTH = cvar.SYMBOL_PROP_LENGTH
SYMBOL_PROP_OFFSET = cvar.SYMBOL_PROP_OFFSET
SYMBOL_PROP_ADDRESS = cvar.SYMBOL_PROP_ADDRESS
SYMBOL_PROP_VALUE = cvar.SYMBOL_PROP_VALUE
SYMBOL_PROP_MEMORY = cvar.SYMBOL_PROP_MEMORY
SYMBOL_PROP_MULTILOCATION = cvar.SYMBOL_PROP_MULTILOCATION

def ISymbolContext_SWIGSharedPtrUpcast(*args):
  return _pyavrdbg_raw.ISymbolContext_SWIGSharedPtrUpcast(*args)
ISymbolContext_SWIGSharedPtrUpcast = _pyavrdbg_raw.ISymbolContext_SWIGSharedPtrUpcast

class IStackTraceService(IService):
    __swig_setmethods__ = {}
    for _s in [IService]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IStackTraceService, name, value)
    __swig_getmethods__ = {}
    for _s in [IService]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, IStackTraceService, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def getChildren(self, *args): return _pyavrdbg_raw.IStackTraceService_getChildren(self, *args)
    def getReturnAddress(self, *args): return _pyavrdbg_raw.IStackTraceService_getReturnAddress(self, *args)
    __swig_destroy__ = _pyavrdbg_raw.delete_IStackTraceService
    __del__ = lambda self : None;
IStackTraceService_swigregister = _pyavrdbg_raw.IStackTraceService_swigregister
IStackTraceService_swigregister(IStackTraceService)

class IStackTraceContext(IContextBase):
    __swig_setmethods__ = {}
    for _s in [IContextBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IStackTraceContext, name, value)
    __swig_getmethods__ = {}
    for _s in [IContextBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, IStackTraceContext, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def getProcess(self): return _pyavrdbg_raw.IStackTraceContext_getProcess(self)
    def getName(self): return _pyavrdbg_raw.IStackTraceContext_getName(self)
    def getFrameAddress(self): return _pyavrdbg_raw.IStackTraceContext_getFrameAddress(self)
    def getReturnAddress(self): return _pyavrdbg_raw.IStackTraceContext_getReturnAddress(self)
    def getInstructionAddress(self): return _pyavrdbg_raw.IStackTraceContext_getInstructionAddress(self)
    def getArgumentsCount(self): return _pyavrdbg_raw.IStackTraceContext_getArgumentsCount(self)
    def getArgumentsAddress(self): return _pyavrdbg_raw.IStackTraceContext_getArgumentsAddress(self)
    def getLevel(self): return _pyavrdbg_raw.IStackTraceContext_getLevel(self)
    def getRegisters(self): return _pyavrdbg_raw.IStackTraceContext_getRegisters(self)
    def getMemory(self, *args): return _pyavrdbg_raw.IStackTraceContext_getMemory(self, *args)
    def getRegisterValueCache(self, *args): return _pyavrdbg_raw.IStackTraceContext_getRegisterValueCache(self, *args)
    __swig_getmethods__["SWIGSharedPtrUpcast"] = lambda x: _pyavrdbg_raw.IStackTraceContext_SWIGSharedPtrUpcast
    if _newclass:SWIGSharedPtrUpcast = staticmethod(_pyavrdbg_raw.IStackTraceContext_SWIGSharedPtrUpcast)
    __swig_destroy__ = _pyavrdbg_raw.delete_IStackTraceContext
    __del__ = lambda self : None;
IStackTraceContext_swigregister = _pyavrdbg_raw.IStackTraceContext_swigregister
IStackTraceContext_swigregister(IStackTraceContext)
STACKTRACE_PROP_ID = cvar.STACKTRACE_PROP_ID
STACKTRACE_PROP_PARENT_ID = cvar.STACKTRACE_PROP_PARENT_ID
STACKTRACE_PROP_PROCESS_ID = cvar.STACKTRACE_PROP_PROCESS_ID
STACKTRACE_PROP_NAME = cvar.STACKTRACE_PROP_NAME
STACKTRACE_PROP_FRAME_ADDRESS = cvar.STACKTRACE_PROP_FRAME_ADDRESS
STACKTRACE_PROP_RETURN_ADDRESS = cvar.STACKTRACE_PROP_RETURN_ADDRESS
STACKTRACE_PROP_INSTRUCTION_ADDRESS = cvar.STACKTRACE_PROP_INSTRUCTION_ADDRESS
STACKTRACE_PROP_ARGUMENTS_COUNT = cvar.STACKTRACE_PROP_ARGUMENTS_COUNT
STACKTRACE_PROP_ARGUMENTS_ADDRESS = cvar.STACKTRACE_PROP_ARGUMENTS_ADDRESS
STACKTRACE_PROP_FUNCNAME = cvar.STACKTRACE_PROP_FUNCNAME
STACKTRACE_PROP_FILE = cvar.STACKTRACE_PROP_FILE
STACKTRACE_PROP_LINE = cvar.STACKTRACE_PROP_LINE
STACKTRACE_PROP_LEVEL = cvar.STACKTRACE_PROP_LEVEL

def IStackTraceContext_SWIGSharedPtrUpcast(*args):
  return _pyavrdbg_raw.IStackTraceContext_SWIGSharedPtrUpcast(*args)
IStackTraceContext_SWIGSharedPtrUpcast = _pyavrdbg_raw.IStackTraceContext_SWIGSharedPtrUpcast

class vector_of_IModuleContextSharedPtr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vector_of_IModuleContextSharedPtr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vector_of_IModuleContextSharedPtr, name)
    __repr__ = _swig_repr
    def iterator(self): return _pyavrdbg_raw.vector_of_IModuleContextSharedPtr_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _pyavrdbg_raw.vector_of_IModuleContextSharedPtr___nonzero__(self)
    def __bool__(self): return _pyavrdbg_raw.vector_of_IModuleContextSharedPtr___bool__(self)
    def __len__(self): return _pyavrdbg_raw.vector_of_IModuleContextSharedPtr___len__(self)
    def pop(self): return _pyavrdbg_raw.vector_of_IModuleContextSharedPtr_pop(self)
    def __getslice__(self, *args): return _pyavrdbg_raw.vector_of_IModuleContextSharedPtr___getslice__(self, *args)
    def __setslice__(self, *args): return _pyavrdbg_raw.vector_of_IModuleContextSharedPtr___setslice__(self, *args)
    def __delslice__(self, *args): return _pyavrdbg_raw.vector_of_IModuleContextSharedPtr___delslice__(self, *args)
    def __delitem__(self, *args): return _pyavrdbg_raw.vector_of_IModuleContextSharedPtr___delitem__(self, *args)
    def __getitem__(self, *args): return _pyavrdbg_raw.vector_of_IModuleContextSharedPtr___getitem__(self, *args)
    def __setitem__(self, *args): return _pyavrdbg_raw.vector_of_IModuleContextSharedPtr___setitem__(self, *args)
    def append(self, *args): return _pyavrdbg_raw.vector_of_IModuleContextSharedPtr_append(self, *args)
    def empty(self): return _pyavrdbg_raw.vector_of_IModuleContextSharedPtr_empty(self)
    def size(self): return _pyavrdbg_raw.vector_of_IModuleContextSharedPtr_size(self)
    def clear(self): return _pyavrdbg_raw.vector_of_IModuleContextSharedPtr_clear(self)
    def swap(self, *args): return _pyavrdbg_raw.vector_of_IModuleContextSharedPtr_swap(self, *args)
    def get_allocator(self): return _pyavrdbg_raw.vector_of_IModuleContextSharedPtr_get_allocator(self)
    def begin(self): return _pyavrdbg_raw.vector_of_IModuleContextSharedPtr_begin(self)
    def end(self): return _pyavrdbg_raw.vector_of_IModuleContextSharedPtr_end(self)
    def rbegin(self): return _pyavrdbg_raw.vector_of_IModuleContextSharedPtr_rbegin(self)
    def rend(self): return _pyavrdbg_raw.vector_of_IModuleContextSharedPtr_rend(self)
    def pop_back(self): return _pyavrdbg_raw.vector_of_IModuleContextSharedPtr_pop_back(self)
    def erase(self, *args): return _pyavrdbg_raw.vector_of_IModuleContextSharedPtr_erase(self, *args)
    def __init__(self, *args): 
        this = _pyavrdbg_raw.new_vector_of_IModuleContextSharedPtr(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _pyavrdbg_raw.vector_of_IModuleContextSharedPtr_push_back(self, *args)
    def front(self): return _pyavrdbg_raw.vector_of_IModuleContextSharedPtr_front(self)
    def back(self): return _pyavrdbg_raw.vector_of_IModuleContextSharedPtr_back(self)
    def assign(self, *args): return _pyavrdbg_raw.vector_of_IModuleContextSharedPtr_assign(self, *args)
    def resize(self, *args): return _pyavrdbg_raw.vector_of_IModuleContextSharedPtr_resize(self, *args)
    def insert(self, *args): return _pyavrdbg_raw.vector_of_IModuleContextSharedPtr_insert(self, *args)
    def reserve(self, *args): return _pyavrdbg_raw.vector_of_IModuleContextSharedPtr_reserve(self, *args)
    def capacity(self): return _pyavrdbg_raw.vector_of_IModuleContextSharedPtr_capacity(self)
    __swig_destroy__ = _pyavrdbg_raw.delete_vector_of_IModuleContextSharedPtr
    __del__ = lambda self : None;
vector_of_IModuleContextSharedPtr_swigregister = _pyavrdbg_raw.vector_of_IModuleContextSharedPtr_swigregister
vector_of_IModuleContextSharedPtr_swigregister(vector_of_IModuleContextSharedPtr)

class IModulesService(IServiceBase):
    __swig_setmethods__ = {}
    for _s in [IServiceBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IModulesService, name, value)
    __swig_getmethods__ = {}
    for _s in [IServiceBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, IModulesService, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    InputModeAuto = _pyavrdbg_raw.IModulesService_InputModeAuto
    OutputModeIntelHex = _pyavrdbg_raw.IModulesService_OutputModeIntelHex
    OutputModeELF = _pyavrdbg_raw.IModulesService_OutputModeELF
    def add(self, *args): return _pyavrdbg_raw.IModulesService_add(self, *args)
    def remove(self, *args): return _pyavrdbg_raw.IModulesService_remove(self, *args)
    def getSourceFiles(self, *args): return _pyavrdbg_raw.IModulesService_getSourceFiles(self, *args)
    __swig_getmethods__["SWIGSharedPtrUpcast"] = lambda x: _pyavrdbg_raw.IModulesService_SWIGSharedPtrUpcast
    if _newclass:SWIGSharedPtrUpcast = staticmethod(_pyavrdbg_raw.IModulesService_SWIGSharedPtrUpcast)
    __swig_destroy__ = _pyavrdbg_raw.delete_IModulesService
    __del__ = lambda self : None;
IModulesService_swigregister = _pyavrdbg_raw.IModulesService_swigregister
IModulesService_swigregister(IModulesService)

def IModulesService_SWIGSharedPtrUpcast(*args):
  return _pyavrdbg_raw.IModulesService_SWIGSharedPtrUpcast(*args)
IModulesService_SWIGSharedPtrUpcast = _pyavrdbg_raw.IModulesService_SWIGSharedPtrUpcast

class IModuleContext(IContextBase):
    __swig_setmethods__ = {}
    for _s in [IContextBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IModuleContext, name, value)
    __swig_getmethods__ = {}
    for _s in [IContextBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, IModuleContext, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def getModuleName(self): return _pyavrdbg_raw.IModuleContext_getModuleName(self)
    def getObjectFilePath(self): return _pyavrdbg_raw.IModuleContext_getObjectFilePath(self)
    def getSourceInformation(self): return _pyavrdbg_raw.IModuleContext_getSourceInformation(self)
    def getBinaryContent(self): return _pyavrdbg_raw.IModuleContext_getBinaryContent(self)
    def getSymbolInformation(self): return _pyavrdbg_raw.IModuleContext_getSymbolInformation(self)
    def getCompilerInformation(self): return _pyavrdbg_raw.IModuleContext_getCompilerInformation(self)
    def encompassesPc(self, *args): return _pyavrdbg_raw.IModuleContext_encompassesPc(self, *args)
    Write = _pyavrdbg_raw.IModuleContext_Write
    WriteAndCompare = _pyavrdbg_raw.IModuleContext_WriteAndCompare
    NoEraseThenWrite = _pyavrdbg_raw.IModuleContext_NoEraseThenWrite
    NoEraseThenWriteAndCompare = _pyavrdbg_raw.IModuleContext_NoEraseThenWriteAndCompare
    def writeToMemory(self, *args): return _pyavrdbg_raw.IModuleContext_writeToMemory(self, *args)
    def readFromMemory(self, *args): return _pyavrdbg_raw.IModuleContext_readFromMemory(self, *args)
    def verifyMemory(self, *args): return _pyavrdbg_raw.IModuleContext_verifyMemory(self, *args)
    def flushMemory(self, *args): return _pyavrdbg_raw.IModuleContext_flushMemory(self, *args)
    __swig_getmethods__["SWIGSharedPtrUpcast"] = lambda x: _pyavrdbg_raw.IModuleContext_SWIGSharedPtrUpcast
    if _newclass:SWIGSharedPtrUpcast = staticmethod(_pyavrdbg_raw.IModuleContext_SWIGSharedPtrUpcast)
    __swig_destroy__ = _pyavrdbg_raw.delete_IModuleContext
    __del__ = lambda self : None;
IModuleContext_swigregister = _pyavrdbg_raw.IModuleContext_swigregister
IModuleContext_swigregister(IModuleContext)
MODULE_PROP_ID = cvar.MODULE_PROP_ID
MODULE_PROP_PARENT_ID = cvar.MODULE_PROP_PARENT_ID
MODULE_PROP_PATH = cvar.MODULE_PROP_PATH
MODULE_PROP_MODE = cvar.MODULE_PROP_MODE

def IModuleContext_SWIGSharedPtrUpcast(*args):
  return _pyavrdbg_raw.IModuleContext_SWIGSharedPtrUpcast(*args)
IModuleContext_SWIGSharedPtrUpcast = _pyavrdbg_raw.IModuleContext_SWIGSharedPtrUpcast

class vector_of_IExpressionContextSharedPtr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vector_of_IExpressionContextSharedPtr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vector_of_IExpressionContextSharedPtr, name)
    __repr__ = _swig_repr
    def iterator(self): return _pyavrdbg_raw.vector_of_IExpressionContextSharedPtr_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _pyavrdbg_raw.vector_of_IExpressionContextSharedPtr___nonzero__(self)
    def __bool__(self): return _pyavrdbg_raw.vector_of_IExpressionContextSharedPtr___bool__(self)
    def __len__(self): return _pyavrdbg_raw.vector_of_IExpressionContextSharedPtr___len__(self)
    def pop(self): return _pyavrdbg_raw.vector_of_IExpressionContextSharedPtr_pop(self)
    def __getslice__(self, *args): return _pyavrdbg_raw.vector_of_IExpressionContextSharedPtr___getslice__(self, *args)
    def __setslice__(self, *args): return _pyavrdbg_raw.vector_of_IExpressionContextSharedPtr___setslice__(self, *args)
    def __delslice__(self, *args): return _pyavrdbg_raw.vector_of_IExpressionContextSharedPtr___delslice__(self, *args)
    def __delitem__(self, *args): return _pyavrdbg_raw.vector_of_IExpressionContextSharedPtr___delitem__(self, *args)
    def __getitem__(self, *args): return _pyavrdbg_raw.vector_of_IExpressionContextSharedPtr___getitem__(self, *args)
    def __setitem__(self, *args): return _pyavrdbg_raw.vector_of_IExpressionContextSharedPtr___setitem__(self, *args)
    def append(self, *args): return _pyavrdbg_raw.vector_of_IExpressionContextSharedPtr_append(self, *args)
    def empty(self): return _pyavrdbg_raw.vector_of_IExpressionContextSharedPtr_empty(self)
    def size(self): return _pyavrdbg_raw.vector_of_IExpressionContextSharedPtr_size(self)
    def clear(self): return _pyavrdbg_raw.vector_of_IExpressionContextSharedPtr_clear(self)
    def swap(self, *args): return _pyavrdbg_raw.vector_of_IExpressionContextSharedPtr_swap(self, *args)
    def get_allocator(self): return _pyavrdbg_raw.vector_of_IExpressionContextSharedPtr_get_allocator(self)
    def begin(self): return _pyavrdbg_raw.vector_of_IExpressionContextSharedPtr_begin(self)
    def end(self): return _pyavrdbg_raw.vector_of_IExpressionContextSharedPtr_end(self)
    def rbegin(self): return _pyavrdbg_raw.vector_of_IExpressionContextSharedPtr_rbegin(self)
    def rend(self): return _pyavrdbg_raw.vector_of_IExpressionContextSharedPtr_rend(self)
    def pop_back(self): return _pyavrdbg_raw.vector_of_IExpressionContextSharedPtr_pop_back(self)
    def erase(self, *args): return _pyavrdbg_raw.vector_of_IExpressionContextSharedPtr_erase(self, *args)
    def __init__(self, *args): 
        this = _pyavrdbg_raw.new_vector_of_IExpressionContextSharedPtr(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _pyavrdbg_raw.vector_of_IExpressionContextSharedPtr_push_back(self, *args)
    def front(self): return _pyavrdbg_raw.vector_of_IExpressionContextSharedPtr_front(self)
    def back(self): return _pyavrdbg_raw.vector_of_IExpressionContextSharedPtr_back(self)
    def assign(self, *args): return _pyavrdbg_raw.vector_of_IExpressionContextSharedPtr_assign(self, *args)
    def resize(self, *args): return _pyavrdbg_raw.vector_of_IExpressionContextSharedPtr_resize(self, *args)
    def insert(self, *args): return _pyavrdbg_raw.vector_of_IExpressionContextSharedPtr_insert(self, *args)
    def reserve(self, *args): return _pyavrdbg_raw.vector_of_IExpressionContextSharedPtr_reserve(self, *args)
    def capacity(self): return _pyavrdbg_raw.vector_of_IExpressionContextSharedPtr_capacity(self)
    __swig_destroy__ = _pyavrdbg_raw.delete_vector_of_IExpressionContextSharedPtr
    __del__ = lambda self : None;
vector_of_IExpressionContextSharedPtr_swigregister = _pyavrdbg_raw.vector_of_IExpressionContextSharedPtr_swigregister
vector_of_IExpressionContextSharedPtr_swigregister(vector_of_IExpressionContextSharedPtr)

class IExpressionsService(IService):
    __swig_setmethods__ = {}
    for _s in [IService]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IExpressionsService, name, value)
    __swig_getmethods__ = {}
    for _s in [IService]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, IExpressionsService, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def getContextFromId(self, *args): return _pyavrdbg_raw.IExpressionsService_getContextFromId(self, *args)
    def getChildren(self, *args): return _pyavrdbg_raw.IExpressionsService_getChildren(self, *args)
    def addValueChangedHandler(self, *args): return _pyavrdbg_raw.IExpressionsService_addValueChangedHandler(self, *args)
    def create(self, *args): return _pyavrdbg_raw.IExpressionsService_create(self, *args)
    __swig_destroy__ = _pyavrdbg_raw.delete_IExpressionsService
    __del__ = lambda self : None;
IExpressionsService_swigregister = _pyavrdbg_raw.IExpressionsService_swigregister
IExpressionsService_swigregister(IExpressionsService)

class IExpressionContext(IContextBase):
    __swig_setmethods__ = {}
    for _s in [IContextBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IExpressionContext, name, value)
    __swig_getmethods__ = {}
    for _s in [IContextBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, IExpressionContext, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def getLanguage(self): return _pyavrdbg_raw.IExpressionContext_getLanguage(self)
    def getExpression(self): return _pyavrdbg_raw.IExpressionContext_getExpression(self)
    def getFormatString(self): return _pyavrdbg_raw.IExpressionContext_getFormatString(self)
    def getBits(self): return _pyavrdbg_raw.IExpressionContext_getBits(self)
    def getSize(self): return _pyavrdbg_raw.IExpressionContext_getSize(self)
    def getStaticExpressionType(self): return _pyavrdbg_raw.IExpressionContext_getStaticExpressionType(self)
    def canAssign(self): return _pyavrdbg_raw.IExpressionContext_canAssign(self)
    def assign(self, *args): return _pyavrdbg_raw.IExpressionContext_assign(self, *args)
    def dispose(self): return _pyavrdbg_raw.IExpressionContext_dispose(self)
    def evaluate(self): return _pyavrdbg_raw.IExpressionContext_evaluate(self)
    def getChildrenRange(self, *args): return _pyavrdbg_raw.IExpressionContext_getChildrenRange(self, *args)
    def evaluateAsInt64(self, *args): return _pyavrdbg_raw.IExpressionContext_evaluateAsInt64(self, *args)
    def evaluateAsAbsoluteDataAddress(self, *args): return _pyavrdbg_raw.IExpressionContext_evaluateAsAbsoluteDataAddress(self, *args)
    __swig_getmethods__["SWIGSharedPtrUpcast"] = lambda x: _pyavrdbg_raw.IExpressionContext_SWIGSharedPtrUpcast
    if _newclass:SWIGSharedPtrUpcast = staticmethod(_pyavrdbg_raw.IExpressionContext_SWIGSharedPtrUpcast)
    __swig_destroy__ = _pyavrdbg_raw.delete_IExpressionContext
    __del__ = lambda self : None;
IExpressionContext_swigregister = _pyavrdbg_raw.IExpressionContext_swigregister
IExpressionContext_swigregister(IExpressionContext)
EXPRESSION_PROP_ID = cvar.EXPRESSION_PROP_ID
EXPRESSION_PROP_PARENT_ID = cvar.EXPRESSION_PROP_PARENT_ID
EXPRESSION_PROP_LANGUAGE = cvar.EXPRESSION_PROP_LANGUAGE
EXPRESSION_PROP_EXPRESSION = cvar.EXPRESSION_PROP_EXPRESSION
EXPRESSION_PROP_EXPRESSION_PATH = cvar.EXPRESSION_PROP_EXPRESSION_PATH
EXPRESSION_PROP_FORMATSTRING = cvar.EXPRESSION_PROP_FORMATSTRING
EXPRESSION_PROP_BITS = cvar.EXPRESSION_PROP_BITS
EXPRESSION_PROP_SIZE = cvar.EXPRESSION_PROP_SIZE
EXPRESSION_PROP_TYPE = cvar.EXPRESSION_PROP_TYPE
EXPRESSION_PROP_CAN_ASSIGN = cvar.EXPRESSION_PROP_CAN_ASSIGN
EXPRESSION_PROP_NUMCHILDREN = cvar.EXPRESSION_PROP_NUMCHILDREN
EXPRESSION_PROP_VAL = cvar.EXPRESSION_PROP_VAL

def IExpressionContext_SWIGSharedPtrUpcast(*args):
  return _pyavrdbg_raw.IExpressionContext_SWIGSharedPtrUpcast(*args)
IExpressionContext_SWIGSharedPtrUpcast = _pyavrdbg_raw.IExpressionContext_SWIGSharedPtrUpcast

DF_DOCUMENTCHANGE = _pyavrdbg_raw.DF_DOCUMENTCHANGE
DF_DISABLED = _pyavrdbg_raw.DF_DISABLED
DF_INSTRUCTION_ACTIVE = _pyavrdbg_raw.DF_INSTRUCTION_ACTIVE
DF_DATA = _pyavrdbg_raw.DF_DATA
DF_HASSOURCE = _pyavrdbg_raw.DF_HASSOURCE
DF_DOCUMENT_CHECKSUM = _pyavrdbg_raw.DF_DOCUMENT_CHECKSUM
class DisassemblyData(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DisassemblyData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DisassemblyData, name)
    __repr__ = _swig_repr
    __swig_setmethods__["activeFields"] = _pyavrdbg_raw.DisassemblyData_activeFields_set
    __swig_getmethods__["activeFields"] = _pyavrdbg_raw.DisassemblyData_activeFields_get
    if _newclass:activeFields = _swig_property(_pyavrdbg_raw.DisassemblyData_activeFields_get, _pyavrdbg_raw.DisassemblyData_activeFields_set)
    __swig_setmethods__["address"] = _pyavrdbg_raw.DisassemblyData_address_set
    __swig_getmethods__["address"] = _pyavrdbg_raw.DisassemblyData_address_get
    if _newclass:address = _swig_property(_pyavrdbg_raw.DisassemblyData_address_get, _pyavrdbg_raw.DisassemblyData_address_set)
    __swig_setmethods__["codeBytes"] = _pyavrdbg_raw.DisassemblyData_codeBytes_set
    __swig_getmethods__["codeBytes"] = _pyavrdbg_raw.DisassemblyData_codeBytes_get
    if _newclass:codeBytes = _swig_property(_pyavrdbg_raw.DisassemblyData_codeBytes_get, _pyavrdbg_raw.DisassemblyData_codeBytes_set)
    __swig_setmethods__["opCode"] = _pyavrdbg_raw.DisassemblyData_opCode_set
    __swig_getmethods__["opCode"] = _pyavrdbg_raw.DisassemblyData_opCode_get
    if _newclass:opCode = _swig_property(_pyavrdbg_raw.DisassemblyData_opCode_get, _pyavrdbg_raw.DisassemblyData_opCode_set)
    __swig_setmethods__["operands"] = _pyavrdbg_raw.DisassemblyData_operands_set
    __swig_getmethods__["operands"] = _pyavrdbg_raw.DisassemblyData_operands_get
    if _newclass:operands = _swig_property(_pyavrdbg_raw.DisassemblyData_operands_get, _pyavrdbg_raw.DisassemblyData_operands_set)
    __swig_setmethods__["symbol"] = _pyavrdbg_raw.DisassemblyData_symbol_set
    __swig_getmethods__["symbol"] = _pyavrdbg_raw.DisassemblyData_symbol_get
    if _newclass:symbol = _swig_property(_pyavrdbg_raw.DisassemblyData_symbol_get, _pyavrdbg_raw.DisassemblyData_symbol_set)
    __swig_setmethods__["sLin"] = _pyavrdbg_raw.DisassemblyData_sLin_set
    __swig_getmethods__["sLin"] = _pyavrdbg_raw.DisassemblyData_sLin_get
    if _newclass:sLin = _swig_property(_pyavrdbg_raw.DisassemblyData_sLin_get, _pyavrdbg_raw.DisassemblyData_sLin_set)
    __swig_setmethods__["eLin"] = _pyavrdbg_raw.DisassemblyData_eLin_set
    __swig_getmethods__["eLin"] = _pyavrdbg_raw.DisassemblyData_eLin_get
    if _newclass:eLin = _swig_property(_pyavrdbg_raw.DisassemblyData_eLin_get, _pyavrdbg_raw.DisassemblyData_eLin_set)
    __swig_setmethods__["sCol"] = _pyavrdbg_raw.DisassemblyData_sCol_set
    __swig_getmethods__["sCol"] = _pyavrdbg_raw.DisassemblyData_sCol_get
    if _newclass:sCol = _swig_property(_pyavrdbg_raw.DisassemblyData_sCol_get, _pyavrdbg_raw.DisassemblyData_sCol_set)
    __swig_setmethods__["eCol"] = _pyavrdbg_raw.DisassemblyData_eCol_set
    __swig_getmethods__["eCol"] = _pyavrdbg_raw.DisassemblyData_eCol_get
    if _newclass:eCol = _swig_property(_pyavrdbg_raw.DisassemblyData_eCol_get, _pyavrdbg_raw.DisassemblyData_eCol_set)
    __swig_setmethods__["documentUrl"] = _pyavrdbg_raw.DisassemblyData_documentUrl_set
    __swig_getmethods__["documentUrl"] = _pyavrdbg_raw.DisassemblyData_documentUrl_get
    if _newclass:documentUrl = _swig_property(_pyavrdbg_raw.DisassemblyData_documentUrl_get, _pyavrdbg_raw.DisassemblyData_documentUrl_set)
    __swig_setmethods__["byteOffsetFromCodeLine"] = _pyavrdbg_raw.DisassemblyData_byteOffsetFromCodeLine_set
    __swig_getmethods__["byteOffsetFromCodeLine"] = _pyavrdbg_raw.DisassemblyData_byteOffsetFromCodeLine_get
    if _newclass:byteOffsetFromCodeLine = _swig_property(_pyavrdbg_raw.DisassemblyData_byteOffsetFromCodeLine_get, _pyavrdbg_raw.DisassemblyData_byteOffsetFromCodeLine_set)
    __swig_setmethods__["disassemblyFlags"] = _pyavrdbg_raw.DisassemblyData_disassemblyFlags_set
    __swig_getmethods__["disassemblyFlags"] = _pyavrdbg_raw.DisassemblyData_disassemblyFlags_get
    if _newclass:disassemblyFlags = _swig_property(_pyavrdbg_raw.DisassemblyData_disassemblyFlags_get, _pyavrdbg_raw.DisassemblyData_disassemblyFlags_set)
    __swig_setmethods__["cycles"] = _pyavrdbg_raw.DisassemblyData_cycles_set
    __swig_getmethods__["cycles"] = _pyavrdbg_raw.DisassemblyData_cycles_get
    if _newclass:cycles = _swig_property(_pyavrdbg_raw.DisassemblyData_cycles_get, _pyavrdbg_raw.DisassemblyData_cycles_set)
    __swig_setmethods__["description"] = _pyavrdbg_raw.DisassemblyData_description_set
    __swig_getmethods__["description"] = _pyavrdbg_raw.DisassemblyData_description_get
    if _newclass:description = _swig_property(_pyavrdbg_raw.DisassemblyData_description_get, _pyavrdbg_raw.DisassemblyData_description_set)
    def __init__(self): 
        this = _pyavrdbg_raw.new_DisassemblyData()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyavrdbg_raw.delete_DisassemblyData
    __del__ = lambda self : None;
DisassemblyData_swigregister = _pyavrdbg_raw.DisassemblyData_swigregister
DisassemblyData_swigregister(DisassemblyData)

class IDisassemblyService(IService):
    __swig_setmethods__ = {}
    for _s in [IService]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IDisassemblyService, name, value)
    __swig_getmethods__ = {}
    for _s in [IService]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, IDisassemblyService, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def disassemble(self, *args): return _pyavrdbg_raw.IDisassemblyService_disassemble(self, *args)
    def disassembleBuffer(self, *args): return _pyavrdbg_raw.IDisassemblyService_disassembleBuffer(self, *args)
    __swig_destroy__ = _pyavrdbg_raw.delete_IDisassemblyService
    __del__ = lambda self : None;
IDisassemblyService_swigregister = _pyavrdbg_raw.IDisassemblyService_swigregister
IDisassemblyService_swigregister(IDisassemblyService)

class IStimuliProviderFactory(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IStimuliProviderFactory, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IStimuliProviderFactory, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _pyavrdbg_raw.delete_IStimuliProviderFactory
    __del__ = lambda self : None;
    def create(self, *args): return _pyavrdbg_raw.IStimuliProviderFactory_create(self, *args)
IStimuliProviderFactory_swigregister = _pyavrdbg_raw.IStimuliProviderFactory_swigregister
IStimuliProviderFactory_swigregister(IStimuliProviderFactory)

class IStimuliService(IServiceBase):
    __swig_setmethods__ = {}
    for _s in [IServiceBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IStimuliService, name, value)
    __swig_getmethods__ = {}
    for _s in [IServiceBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, IStimuliService, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _pyavrdbg_raw.delete_IStimuliService
    __del__ = lambda self : None;
    def getSupportedStimuliTypes(self): return _pyavrdbg_raw.IStimuliService_getSupportedStimuliTypes(self)
    def setupProvider(self, *args): return _pyavrdbg_raw.IStimuliService_setupProvider(self, *args)
    def addStimuliProvider(self, *args): return _pyavrdbg_raw.IStimuliService_addStimuliProvider(self, *args)
    def removeStimuliProvider(self, *args): return _pyavrdbg_raw.IStimuliService_removeStimuliProvider(self, *args)
    def getStimuliProviders(self): return _pyavrdbg_raw.IStimuliService_getStimuliProviders(self)
    def connect(self, *args): return _pyavrdbg_raw.IStimuliService_connect(self, *args)
    def disconnect(self, *args): return _pyavrdbg_raw.IStimuliService_disconnect(self, *args)
    def setDesignator(self, *args): return _pyavrdbg_raw.IStimuliService_setDesignator(self, *args)
IStimuliService_swigregister = _pyavrdbg_raw.IStimuliService_swigregister
IStimuliService_swigregister(IStimuliService)

class IStimuliProvider(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IStimuliProvider, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IStimuliProvider, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _pyavrdbg_raw.delete_IStimuliProvider
    __del__ = lambda self : None;
    def getName(self): return _pyavrdbg_raw.IStimuliProvider_getName(self)
    def getDescription(self): return _pyavrdbg_raw.IStimuliProvider_getDescription(self)
    def getStimulators(self): return _pyavrdbg_raw.IStimuliProvider_getStimulators(self)
    def __init__(self): 
        if self.__class__ == IStimuliProvider:
            _self = None
        else:
            _self = self
        this = _pyavrdbg_raw.new_IStimuliProvider(_self, )
        try: self.this.append(this)
        except: self.this = this
    def __disown__(self):
        self.this.disown()
        _pyavrdbg_raw.disown_IStimuliProvider(self)
        return weakref_proxy(self)
IStimuliProvider_swigregister = _pyavrdbg_raw.IStimuliProvider_swigregister
IStimuliProvider_swigregister(IStimuliProvider)

PinUnknown = _pyavrdbg_raw.PinUnknown
PinDigitalIn = _pyavrdbg_raw.PinDigitalIn
PinDigitalOut = _pyavrdbg_raw.PinDigitalOut
PinAnalogIn = _pyavrdbg_raw.PinAnalogIn
PinAnalogOut = _pyavrdbg_raw.PinAnalogOut
class IStimuliTarget(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IStimuliTarget, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IStimuliTarget, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _pyavrdbg_raw.delete_IStimuliTarget
    __del__ = lambda self : None;
    def setStimulator(self, *args): return _pyavrdbg_raw.IStimuliTarget_setStimulator(self, *args)
    def removeStimulator(self): return _pyavrdbg_raw.IStimuliTarget_removeStimulator(self)
    def registerLookup(self, *args): return _pyavrdbg_raw.IStimuliTarget_registerLookup(self, *args)
    def registerReverseLookup(self, *args): return _pyavrdbg_raw.IStimuliTarget_registerReverseLookup(self, *args)
    def writeRegister(self, *args): return _pyavrdbg_raw.IStimuliTarget_writeRegister(self, *args)
    def readRegister(self, *args): return _pyavrdbg_raw.IStimuliTarget_readRegister(self, *args)
    def writeFuses(self, *args): return _pyavrdbg_raw.IStimuliTarget_writeFuses(self, *args)
    def readFuses(self, *args): return _pyavrdbg_raw.IStimuliTarget_readFuses(self, *args)
    def readMemory(self, *args): return _pyavrdbg_raw.IStimuliTarget_readMemory(self, *args)
    def writeMemory(self, *args): return _pyavrdbg_raw.IStimuliTarget_writeMemory(self, *args)
    def traceRegister(self, *args): return _pyavrdbg_raw.IStimuliTarget_traceRegister(self, *args)
    def untraceRegister(self, *args): return _pyavrdbg_raw.IStimuliTarget_untraceRegister(self, *args)
    def untraceAllRegs(self): return _pyavrdbg_raw.IStimuliTarget_untraceAllRegs(self)
    def getPinVoltage(self, *args): return _pyavrdbg_raw.IStimuliTarget_getPinVoltage(self, *args)
    def setPinVoltage(self, *args): return _pyavrdbg_raw.IStimuliTarget_setPinVoltage(self, *args)
    def pinLookup(self, *args): return _pyavrdbg_raw.IStimuliTarget_pinLookup(self, *args)
    def pinReverseLookup(self, *args): return _pyavrdbg_raw.IStimuliTarget_pinReverseLookup(self, *args)
    def getPinConfig(self, *args): return _pyavrdbg_raw.IStimuliTarget_getPinConfig(self, *args)
    def tracePin(self, *args): return _pyavrdbg_raw.IStimuliTarget_tracePin(self, *args)
    def untracePin(self, *args): return _pyavrdbg_raw.IStimuliTarget_untracePin(self, *args)
    def untraceAllPins(self): return _pyavrdbg_raw.IStimuliTarget_untraceAllPins(self)
    def getCpuFrequency(self): return _pyavrdbg_raw.IStimuliTarget_getCpuFrequency(self)
    def getDeviceName(self): return _pyavrdbg_raw.IStimuliTarget_getDeviceName(self)
    def getDesignator(self): return _pyavrdbg_raw.IStimuliTarget_getDesignator(self)
    def getCycle(self): return _pyavrdbg_raw.IStimuliTarget_getCycle(self)
    def getRegList(self): return _pyavrdbg_raw.IStimuliTarget_getRegList(self)
    def setDesignator(self, *args): return _pyavrdbg_raw.IStimuliTarget_setDesignator(self, *args)
    def suspend(self): return _pyavrdbg_raw.IStimuliTarget_suspend(self)
    def resume(self): return _pyavrdbg_raw.IStimuliTarget_resume(self)
    def isSuspended(self): return _pyavrdbg_raw.IStimuliTarget_isSuspended(self)
    def devReset(self, *args): return _pyavrdbg_raw.IStimuliTarget_devReset(self, *args)
    def terminateSession(self): return _pyavrdbg_raw.IStimuliTarget_terminateSession(self)
    def debug(self, *args): return _pyavrdbg_raw.IStimuliTarget_debug(self, *args)
IStimuliTarget_swigregister = _pyavrdbg_raw.IStimuliTarget_swigregister
IStimuliTarget_swigregister(IStimuliTarget)

class IStimulator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IStimulator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IStimulator, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _pyavrdbg_raw.delete_IStimulator
    __del__ = lambda self : None;
    def getDesignator(self): return _pyavrdbg_raw.IStimulator_getDesignator(self)
    def setStimuliTarget(self, *args): return _pyavrdbg_raw.IStimulator_setStimuliTarget(self, *args)
    def removeStimuliTarget(self): return _pyavrdbg_raw.IStimulator_removeStimuliTarget(self)
    def stimulate(self, *args): return _pyavrdbg_raw.IStimulator_stimulate(self, *args)
    def registerChanged(self, *args): return _pyavrdbg_raw.IStimulator_registerChanged(self, *args)
    def pinChanged(self, *args): return _pyavrdbg_raw.IStimulator_pinChanged(self, *args)
    def cpuFrequencyChanged(self, *args): return _pyavrdbg_raw.IStimulator_cpuFrequencyChanged(self, *args)
    def __init__(self): 
        if self.__class__ == IStimulator:
            _self = None
        else:
            _self = self
        this = _pyavrdbg_raw.new_IStimulator(_self, )
        try: self.this.append(this)
        except: self.this = this
    def __disown__(self):
        self.this.disown()
        _pyavrdbg_raw.disown_IStimulator(self)
        return weakref_proxy(self)
IStimulator_swigregister = _pyavrdbg_raw.IStimulator_swigregister
IStimulator_swigregister(IStimulator)

class IAvrDebugger(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IAvrDebugger, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IAvrDebugger, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _pyavrdbg_raw.delete_IAvrDebugger
    __del__ = lambda self : None;
    def init(self): return _pyavrdbg_raw.IAvrDebugger_init(self)
    def uninit(self): return _pyavrdbg_raw.IAvrDebugger_uninit(self)
    def startServices(self): return _pyavrdbg_raw.IAvrDebugger_startServices(self)
    def stopServices(self): return _pyavrdbg_raw.IAvrDebugger_stopServices(self)
    def startNetwork(self, *args): return _pyavrdbg_raw.IAvrDebugger_startNetwork(self, *args)
    def stopNetwork(self): return _pyavrdbg_raw.IAvrDebugger_stopNetwork(self)
    def getFactoryManager(self): return _pyavrdbg_raw.IAvrDebugger_getFactoryManager(self)
    def getTcfService(self, *args): return _pyavrdbg_raw.IAvrDebugger_getTcfService(self, *args)
    def getToolService(self): return _pyavrdbg_raw.IAvrDebugger_getToolService(self)
    def getDeviceService(self): return _pyavrdbg_raw.IAvrDebugger_getDeviceService(self)
    def getProcessesService(self): return _pyavrdbg_raw.IAvrDebugger_getProcessesService(self)
    def getMemoryService(self): return _pyavrdbg_raw.IAvrDebugger_getMemoryService(self)
    def getMessageService(self): return _pyavrdbg_raw.IAvrDebugger_getMessageService(self)
    def getRegistersService(self): return _pyavrdbg_raw.IAvrDebugger_getRegistersService(self)
    def getRunControlService(self): return _pyavrdbg_raw.IAvrDebugger_getRunControlService(self)
    def getStackTraceService(self): return _pyavrdbg_raw.IAvrDebugger_getStackTraceService(self)
    def getExpressionsService(self): return _pyavrdbg_raw.IAvrDebugger_getExpressionsService(self)
    def getSymbolsService(self): return _pyavrdbg_raw.IAvrDebugger_getSymbolsService(self)
    def getLineNumbersService(self): return _pyavrdbg_raw.IAvrDebugger_getLineNumbersService(self)
    def getBreakpointsService(self): return _pyavrdbg_raw.IAvrDebugger_getBreakpointsService(self)
    def getDisassemblyService(self): return _pyavrdbg_raw.IAvrDebugger_getDisassemblyService(self)
    def getStimuliService(self): return _pyavrdbg_raw.IAvrDebugger_getStimuliService(self)
    def getTraceService(self): return _pyavrdbg_raw.IAvrDebugger_getTraceService(self)
    def getModulesService(self): return _pyavrdbg_raw.IAvrDebugger_getModulesService(self)
    def getThreadLocalOwner(self): return _pyavrdbg_raw.IAvrDebugger_getThreadLocalOwner(self)
    def getObjectRegistry(self): return _pyavrdbg_raw.IAvrDebugger_getObjectRegistry(self)
    def dumpContexts(self): return _pyavrdbg_raw.IAvrDebugger_dumpContexts(self)
    def getConfigurationParameter(self, *args): return _pyavrdbg_raw.IAvrDebugger_getConfigurationParameter(self, *args)
IAvrDebugger_swigregister = _pyavrdbg_raw.IAvrDebugger_swigregister
IAvrDebugger_swigregister(IAvrDebugger)

CLASS_NAME_BASE = _pyavrdbg_raw.CLASS_NAME_BASE
class IAdClassFactory(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IAdClassFactory, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IAdClassFactory, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _pyavrdbg_raw.delete_IAdClassFactory
    __del__ = lambda self : None;
    def getCategoryName(self): return _pyavrdbg_raw.IAdClassFactory_getCategoryName(self)
    def getClassName(self): return _pyavrdbg_raw.IAdClassFactory_getClassName(self)
IAdClassFactory_swigregister = _pyavrdbg_raw.IAdClassFactory_swigregister
IAdClassFactory_swigregister(IAdClassFactory)

class IAdClassFactoryManager(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IAdClassFactoryManager, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IAdClassFactoryManager, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _pyavrdbg_raw.delete_IAdClassFactoryManager
    __del__ = lambda self : None;
    def getFactoryByClassName(self, *args): return _pyavrdbg_raw.IAdClassFactoryManager_getFactoryByClassName(self, *args)
    def getFactoriesByCategoryName(self, *args): return _pyavrdbg_raw.IAdClassFactoryManager_getFactoriesByCategoryName(self, *args)
    def getClassNamesFromCategory(self, *args): return _pyavrdbg_raw.IAdClassFactoryManager_getClassNamesFromCategory(self, *args)
    def getProperty(self, *args): return _pyavrdbg_raw.IAdClassFactoryManager_getProperty(self, *args)
IAdClassFactoryManager_swigregister = _pyavrdbg_raw.IAdClassFactoryManager_swigregister
IAdClassFactoryManager_swigregister(IAdClassFactoryManager)

class IValue(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IValue, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IValue, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def getTypeClass(self): return _pyavrdbg_raw.IValue_getTypeClass(self)
    def getValueType(self): return _pyavrdbg_raw.IValue_getValueType(self)
    def getEvalContextId(self): return _pyavrdbg_raw.IValue_getEvalContextId(self)
    def isBigEndian(self): return _pyavrdbg_raw.IValue_isBigEndian(self)
    def getValue(self): return _pyavrdbg_raw.IValue_getValue(self)
    def pygetValue(self): return _pyavrdbg_raw.IValue_pygetValue(self)
    def getProperties(self): return _pyavrdbg_raw.IValue_getProperties(self)
    __swig_destroy__ = _pyavrdbg_raw.delete_IValue
    __del__ = lambda self : None;
IValue_swigregister = _pyavrdbg_raw.IValue_swigregister
IValue_swigregister(IValue)
EXPRESSION_VAL_CLASS = cvar.EXPRESSION_VAL_CLASS
EXPRESSION_VAL_TYPE = cvar.EXPRESSION_VAL_TYPE
EXPRESSION_VAL_EXE_ID = cvar.EXPRESSION_VAL_EXE_ID
EXPRESSION_VAL_BIG_ENDIAN = cvar.EXPRESSION_VAL_BIG_ENDIAN
EXPRESSION_VAL_STRING = cvar.EXPRESSION_VAL_STRING


def getAvrDbg():
  return _pyavrdbg_raw.getAvrDbg()
getAvrDbg = _pyavrdbg_raw.getAvrDbg

def mainfunc_proxy(*args):
  return _pyavrdbg_raw.mainfunc_proxy(*args)
mainfunc_proxy = _pyavrdbg_raw.mainfunc_proxy

def startupcompleted_proxy():
  return _pyavrdbg_raw.startupcompleted_proxy()
startupcompleted_proxy = _pyavrdbg_raw.startupcompleted_proxy

def shutdown_proxy():
  return _pyavrdbg_raw.shutdown_proxy()
shutdown_proxy = _pyavrdbg_raw.shutdown_proxy

def stringFromProps(*args):
  return _pyavrdbg_raw.stringFromProps(*args)
stringFromProps = _pyavrdbg_raw.stringFromProps

def propsFromString(*args):
  return _pyavrdbg_raw.propsFromString(*args)
propsFromString = _pyavrdbg_raw.propsFromString

def getStringProperty(*args):
  return _pyavrdbg_raw.getStringProperty(*args)
getStringProperty = _pyavrdbg_raw.getStringProperty

def getIntProperty(*args):
  return _pyavrdbg_raw.getIntProperty(*args)
getIntProperty = _pyavrdbg_raw.getIntProperty

def getBoolProperty(*args):
  return _pyavrdbg_raw.getBoolProperty(*args)
getBoolProperty = _pyavrdbg_raw.getBoolProperty

def getPropertiesProperty(*args):
  return _pyavrdbg_raw.getPropertiesProperty(*args)
getPropertiesProperty = _pyavrdbg_raw.getPropertiesProperty

def createProcessSharedPtr():
  return _pyavrdbg_raw.createProcessSharedPtr()
createProcessSharedPtr = _pyavrdbg_raw.createProcessSharedPtr

def createMemoryErrorSharedPtr():
  return _pyavrdbg_raw.createMemoryErrorSharedPtr()
createMemoryErrorSharedPtr = _pyavrdbg_raw.createMemoryErrorSharedPtr
class AvrdbgDriver(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AvrdbgDriver, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AvrdbgDriver, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pyavrdbg_raw.new_AvrdbgDriver(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyavrdbg_raw.delete_AvrdbgDriver
    __del__ = lambda self : None;
    def start(self): return _pyavrdbg_raw.AvrdbgDriver_start(self)
    def stop(self): return _pyavrdbg_raw.AvrdbgDriver_stop(self)
AvrdbgDriver_swigregister = _pyavrdbg_raw.AvrdbgDriver_swigregister
AvrdbgDriver_swigregister(AvrdbgDriver)


def createParser(*args):
  return _pyavrdbg_raw.createParser(*args)
createParser = _pyavrdbg_raw.createParser

def getLabelAddress(*args):
  return _pyavrdbg_raw.getLabelAddress(*args)
getLabelAddress = _pyavrdbg_raw.getLabelAddress

def getVersionString():
  return _pyavrdbg_raw.getVersionString()
getVersionString = _pyavrdbg_raw.getVersionString

def getMajorVersion():
  return _pyavrdbg_raw.getMajorVersion()
getMajorVersion = _pyavrdbg_raw.getMajorVersion

def getMinorVersion():
  return _pyavrdbg_raw.getMinorVersion()
getMinorVersion = _pyavrdbg_raw.getMinorVersion

def getBuildNumber():
  return _pyavrdbg_raw.getBuildNumber()
getBuildNumber = _pyavrdbg_raw.getBuildNumber
class Avr32DeviceContext(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Avr32DeviceContext, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Avr32DeviceContext, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _pyavrdbg_raw.delete_Avr32DeviceContext
    __del__ = lambda self : None;
    def startSession(self, *args): return _pyavrdbg_raw.Avr32DeviceContext_startSession(self, *args)
    def endSession(self): return _pyavrdbg_raw.Avr32DeviceContext_endSession(self)
    def getProcess(self): return _pyavrdbg_raw.Avr32DeviceContext_getProcess(self)
    def getMemories(self): return _pyavrdbg_raw.Avr32DeviceContext_getMemories(self)
    def getRegisters(self): return _pyavrdbg_raw.Avr32DeviceContext_getRegisters(self)
    def getRunControl(self): return _pyavrdbg_raw.Avr32DeviceContext_getRunControl(self)
    def getBreakpointsTarget(self): return _pyavrdbg_raw.Avr32DeviceContext_getBreakpointsTarget(self)
    def getTraceTarget(self): return _pyavrdbg_raw.Avr32DeviceContext_getTraceTarget(self)
    def getResourceInfoProvider(self): return _pyavrdbg_raw.Avr32DeviceContext_getResourceInfoProvider(self)
    def getProperties(self): return _pyavrdbg_raw.Avr32DeviceContext_getProperties(self)
    def erase(self, *args): return _pyavrdbg_raw.Avr32DeviceContext_erase(self, *args)
    def specialOperation(self, *args): return _pyavrdbg_raw.Avr32DeviceContext_specialOperation(self, *args)
    def getProperty(self, *args): return _pyavrdbg_raw.Avr32DeviceContext_getProperty(self, *args)
    def getDeviceConfigurationPacket(self): return _pyavrdbg_raw.Avr32DeviceContext_getDeviceConfigurationPacket(self)
    def getAvr32GenericProtocol(self): return _pyavrdbg_raw.Avr32DeviceContext_getAvr32GenericProtocol(self)
    def flushMemChanges(self): return _pyavrdbg_raw.Avr32DeviceContext_flushMemChanges(self)
    def verifyMemory(self, *args): return _pyavrdbg_raw.Avr32DeviceContext_verifyMemory(self, *args)
Avr32DeviceContext_swigregister = _pyavrdbg_raw.Avr32DeviceContext_swigregister
Avr32DeviceContext_swigregister(Avr32DeviceContext)
DEVICE_PROP_SECURITYBIT = cvar.DEVICE_PROP_SECURITYBIT

class IAvr32GenericProtocol(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IAvr32GenericProtocol, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IAvr32GenericProtocol, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def query(self, *args): return _pyavrdbg_raw.IAvr32GenericProtocol_query(self, *args)
    def set(self, *args): return _pyavrdbg_raw.IAvr32GenericProtocol_set(self, *args)
    def get(self, *args): return _pyavrdbg_raw.IAvr32GenericProtocol_get(self, *args)
    def activatePhysical(self, *args): return _pyavrdbg_raw.IAvr32GenericProtocol_activatePhysical(self, *args)
    def deactivatePhysical(self): return _pyavrdbg_raw.IAvr32GenericProtocol_deactivatePhysical(self)
    def getId(self): return _pyavrdbg_raw.IAvr32GenericProtocol_getId(self)
    def erase(self): return _pyavrdbg_raw.IAvr32GenericProtocol_erase(self)
    def halt(self, *args): return _pyavrdbg_raw.IAvr32GenericProtocol_halt(self, *args)
    def reset(self, *args): return _pyavrdbg_raw.IAvr32GenericProtocol_reset(self, *args)
    def step(self): return _pyavrdbg_raw.IAvr32GenericProtocol_step(self)
    def read(self, *args): return _pyavrdbg_raw.IAvr32GenericProtocol_read(self, *args)
    def write(self, *args): return _pyavrdbg_raw.IAvr32GenericProtocol_write(self, *args)
    def tap(self, *args): return _pyavrdbg_raw.IAvr32GenericProtocol_tap(self, *args)
    def isProtected(self): return _pyavrdbg_raw.IAvr32GenericProtocol_isProtected(self)
    def eraseSection(self, *args): return _pyavrdbg_raw.IAvr32GenericProtocol_eraseSection(self, *args)
    __swig_destroy__ = _pyavrdbg_raw.delete_IAvr32GenericProtocol
    __del__ = lambda self : None;
IAvr32GenericProtocol_swigregister = _pyavrdbg_raw.IAvr32GenericProtocol_swigregister
IAvr32GenericProtocol_swigregister(IAvr32GenericProtocol)


def avr32DeviceFromDeviceContext(*args):
  return _pyavrdbg_raw.avr32DeviceFromDeviceContext(*args)
avr32DeviceFromDeviceContext = _pyavrdbg_raw.avr32DeviceFromDeviceContext
class Avr8DeviceContext(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Avr8DeviceContext, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Avr8DeviceContext, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _pyavrdbg_raw.delete_Avr8DeviceContext
    __del__ = lambda self : None;
    def startSession(self, *args): return _pyavrdbg_raw.Avr8DeviceContext_startSession(self, *args)
    def endSession(self): return _pyavrdbg_raw.Avr8DeviceContext_endSession(self)
    def getProcess(self): return _pyavrdbg_raw.Avr8DeviceContext_getProcess(self)
    def getMemories(self): return _pyavrdbg_raw.Avr8DeviceContext_getMemories(self)
    def getRegisters(self): return _pyavrdbg_raw.Avr8DeviceContext_getRegisters(self)
    def getRegister(self, *args): return _pyavrdbg_raw.Avr8DeviceContext_getRegister(self, *args)
    def getRunControl(self): return _pyavrdbg_raw.Avr8DeviceContext_getRunControl(self)
    def getBreakpointsTarget(self): return _pyavrdbg_raw.Avr8DeviceContext_getBreakpointsTarget(self)
    def getTraceTarget(self): return _pyavrdbg_raw.Avr8DeviceContext_getTraceTarget(self)
    def getResourceInfoProvider(self): return _pyavrdbg_raw.Avr8DeviceContext_getResourceInfoProvider(self)
    def erase(self, *args): return _pyavrdbg_raw.Avr8DeviceContext_erase(self, *args)
    def getOcdMaskedIOAddresses(self, *args): return _pyavrdbg_raw.Avr8DeviceContext_getOcdMaskedIOAddresses(self, *args)
    def getProperties(self): return _pyavrdbg_raw.Avr8DeviceContext_getProperties(self)
    def getDeviceConfigurationPacket(self): return _pyavrdbg_raw.Avr8DeviceContext_getDeviceConfigurationPacket(self)
    def specialOperation(self, *args): return _pyavrdbg_raw.Avr8DeviceContext_specialOperation(self, *args)
    def getAvr8GenericProtocol(self): return _pyavrdbg_raw.Avr8DeviceContext_getAvr8GenericProtocol(self)
    def targetEventHandler(self, *args): return _pyavrdbg_raw.Avr8DeviceContext_targetEventHandler(self, *args)
    def flushMemChanges(self): return _pyavrdbg_raw.Avr8DeviceContext_flushMemChanges(self)
    def getEventListener(self): return _pyavrdbg_raw.Avr8DeviceContext_getEventListener(self)
Avr8DeviceContext_swigregister = _pyavrdbg_raw.Avr8DeviceContext_swigregister
Avr8DeviceContext_swigregister(Avr8DeviceContext)

class IAvr8GenericProtocol(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IAvr8GenericProtocol, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IAvr8GenericProtocol, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def set(self, *args): return _pyavrdbg_raw.IAvr8GenericProtocol_set(self, *args)
    def get(self, *args): return _pyavrdbg_raw.IAvr8GenericProtocol_get(self, *args)
    def activatePhysical(self, *args): return _pyavrdbg_raw.IAvr8GenericProtocol_activatePhysical(self, *args)
    def deactivatePhysical(self): return _pyavrdbg_raw.IAvr8GenericProtocol_deactivatePhysical(self)
    def getId(self): return _pyavrdbg_raw.IAvr8GenericProtocol_getId(self)
    def attach(self, *args): return _pyavrdbg_raw.IAvr8GenericProtocol_attach(self, *args)
    def detach(self): return _pyavrdbg_raw.IAvr8GenericProtocol_detach(self)
    def reset(self, *args): return _pyavrdbg_raw.IAvr8GenericProtocol_reset(self, *args)
    def stop(self, *args): return _pyavrdbg_raw.IAvr8GenericProtocol_stop(self, *args)
    def run(self): return _pyavrdbg_raw.IAvr8GenericProtocol_run(self)
    def runToAddress(self, *args): return _pyavrdbg_raw.IAvr8GenericProtocol_runToAddress(self, *args)
    def step(self, *args): return _pyavrdbg_raw.IAvr8GenericProtocol_step(self, *args)
    def pcRead(self): return _pyavrdbg_raw.IAvr8GenericProtocol_pcRead(self)
    def pcWrite(self, *args): return _pyavrdbg_raw.IAvr8GenericProtocol_pcWrite(self, *args)
    def progModeEnter(self): return _pyavrdbg_raw.IAvr8GenericProtocol_progModeEnter(self)
    def progModeLeave(self): return _pyavrdbg_raw.IAvr8GenericProtocol_progModeLeave(self)
    def erase(self, *args): return _pyavrdbg_raw.IAvr8GenericProtocol_erase(self, *args)
    def checkCrc(self, *args): return _pyavrdbg_raw.IAvr8GenericProtocol_checkCrc(self, *args)
    def memoryRead(self, *args): return _pyavrdbg_raw.IAvr8GenericProtocol_memoryRead(self, *args)
    def memoryReadMasked(self, *args): return _pyavrdbg_raw.IAvr8GenericProtocol_memoryReadMasked(self, *args)
    def memoryWrite(self, *args): return _pyavrdbg_raw.IAvr8GenericProtocol_memoryWrite(self, *args)
    def pageErase(self, *args): return _pyavrdbg_raw.IAvr8GenericProtocol_pageErase(self, *args)
    def hardwareBreakpointSet(self, *args): return _pyavrdbg_raw.IAvr8GenericProtocol_hardwareBreakpointSet(self, *args)
    def hardwareBreakpointClear(self, *args): return _pyavrdbg_raw.IAvr8GenericProtocol_hardwareBreakpointClear(self, *args)
    def hardwareBreakpointXmega(self, *args): return _pyavrdbg_raw.IAvr8GenericProtocol_hardwareBreakpointXmega(self, *args)
    def softwareBreakpointSet(self, *args): return _pyavrdbg_raw.IAvr8GenericProtocol_softwareBreakpointSet(self, *args)
    def softwareBreakpointClear(self, *args): return _pyavrdbg_raw.IAvr8GenericProtocol_softwareBreakpointClear(self, *args)
    def softwareBreakpointClearAll(self): return _pyavrdbg_raw.IAvr8GenericProtocol_softwareBreakpointClearAll(self)
    def configureSession(self, *args): return _pyavrdbg_raw.IAvr8GenericProtocol_configureSession(self, *args)
    def setupDevice(self, *args): return _pyavrdbg_raw.IAvr8GenericProtocol_setupDevice(self, *args)
    __swig_destroy__ = _pyavrdbg_raw.delete_IAvr8GenericProtocol
    __del__ = lambda self : None;
IAvr8GenericProtocol_swigregister = _pyavrdbg_raw.IAvr8GenericProtocol_swigregister
IAvr8GenericProtocol_swigregister(IAvr8GenericProtocol)


def avr8DeviceFromDeviceContext(*args):
  return _pyavrdbg_raw.avr8DeviceFromDeviceContext(*args)
avr8DeviceFromDeviceContext = _pyavrdbg_raw.avr8DeviceFromDeviceContext
class JtagIceMk3Tool(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, JtagIceMk3Tool, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, JtagIceMk3Tool, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def selfTest(self, *args): return _pyavrdbg_raw.JtagIceMk3Tool_selfTest(self, *args)
    def calibrate(self, *args): return _pyavrdbg_raw.JtagIceMk3Tool_calibrate(self, *args)
    def getProperties(self): return _pyavrdbg_raw.JtagIceMk3Tool_getProperties(self)
    def connect(self, *args): return _pyavrdbg_raw.JtagIceMk3Tool_connect(self, *args)
    def disconnect(self, *args): return _pyavrdbg_raw.JtagIceMk3Tool_disconnect(self, *args)
    def detectDevices(self, *args): return _pyavrdbg_raw.JtagIceMk3Tool_detectDevices(self, *args)
    def startUpgrade(self, *args): return _pyavrdbg_raw.JtagIceMk3Tool_startUpgrade(self, *args)
    def checkFirmware(self, *args): return _pyavrdbg_raw.JtagIceMk3Tool_checkFirmware(self, *args)
    def setBootMode(self, *args): return _pyavrdbg_raw.JtagIceMk3Tool_setBootMode(self, *args)
    def cancel(self): return _pyavrdbg_raw.JtagIceMk3Tool_cancel(self)
    def getTargetVoltage(self): return _pyavrdbg_raw.JtagIceMk3Tool_getTargetVoltage(self)
    def genericCommand(self, *args): return _pyavrdbg_raw.JtagIceMk3Tool_genericCommand(self, *args)
    def getEventListener(self): return _pyavrdbg_raw.JtagIceMk3Tool_getEventListener(self)
    def getDiscoveryProtocol(self): return _pyavrdbg_raw.JtagIceMk3Tool_getDiscoveryProtocol(self)
    def getHouseKeepingProtocol(self): return _pyavrdbg_raw.JtagIceMk3Tool_getHouseKeepingProtocol(self)
    def getAvr8GenericProtocol(self): return _pyavrdbg_raw.JtagIceMk3Tool_getAvr8GenericProtocol(self)
    def getEdbgProtocol(self): return _pyavrdbg_raw.JtagIceMk3Tool_getEdbgProtocol(self)
    __swig_destroy__ = _pyavrdbg_raw.delete_JtagIceMk3Tool
    __del__ = lambda self : None;
JtagIceMk3Tool_swigregister = _pyavrdbg_raw.JtagIceMk3Tool_swigregister
JtagIceMk3Tool_swigregister(JtagIceMk3Tool)
JTAGICE3_TOOLTYPE = cvar.JTAGICE3_TOOLTYPE

class Mk3Protocol(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Mk3Protocol, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Mk3Protocol, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _pyavrdbg_raw.delete_Mk3Protocol
    __del__ = lambda self : None;
Mk3Protocol_swigregister = _pyavrdbg_raw.Mk3Protocol_swigregister
Mk3Protocol_swigregister(Mk3Protocol)

class Mk3DiscoveryProtocol(Mk3Protocol):
    __swig_setmethods__ = {}
    for _s in [Mk3Protocol]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Mk3DiscoveryProtocol, name, value)
    __swig_getmethods__ = {}
    for _s in [Mk3Protocol]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Mk3DiscoveryProtocol, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _pyavrdbg_raw.delete_Mk3DiscoveryProtocol
    __del__ = lambda self : None;
    def query(self, *args): return _pyavrdbg_raw.Mk3DiscoveryProtocol_query(self, *args)
Mk3DiscoveryProtocol_swigregister = _pyavrdbg_raw.Mk3DiscoveryProtocol_swigregister
Mk3DiscoveryProtocol_swigregister(Mk3DiscoveryProtocol)

class IMk3HouseKeepingProtocol(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IMk3HouseKeepingProtocol, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IMk3HouseKeepingProtocol, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def query(self, *args): return _pyavrdbg_raw.IMk3HouseKeepingProtocol_query(self, *args)
    def set(self, *args): return _pyavrdbg_raw.IMk3HouseKeepingProtocol_set(self, *args)
    def get(self, *args): return _pyavrdbg_raw.IMk3HouseKeepingProtocol_get(self, *args)
    def startSession(self): return _pyavrdbg_raw.IMk3HouseKeepingProtocol_startSession(self)
    def endSession(self, *args): return _pyavrdbg_raw.IMk3HouseKeepingProtocol_endSession(self, *args)
    def firmwareUpgrade(self): return _pyavrdbg_raw.IMk3HouseKeepingProtocol_firmwareUpgrade(self)
    def setSerialNumber(self, *args): return _pyavrdbg_raw.IMk3HouseKeepingProtocol_setSerialNumber(self, *args)
    def detectJtagScanChain(self, *args): return _pyavrdbg_raw.IMk3HouseKeepingProtocol_detectJtagScanChain(self, *args)
    def calibrateOscillator(self): return _pyavrdbg_raw.IMk3HouseKeepingProtocol_calibrateOscillator(self)
    def selfTest(self, *args): return _pyavrdbg_raw.IMk3HouseKeepingProtocol_selfTest(self, *args)
    __swig_destroy__ = _pyavrdbg_raw.delete_IMk3HouseKeepingProtocol
    __del__ = lambda self : None;
IMk3HouseKeepingProtocol_swigregister = _pyavrdbg_raw.IMk3HouseKeepingProtocol_swigregister
IMk3HouseKeepingProtocol_swigregister(IMk3HouseKeepingProtocol)
JTAGICE3_HW_REVISION = cvar.JTAGICE3_HW_REVISION
JTAGICE3_MAJOR_FW_VERSION = cvar.JTAGICE3_MAJOR_FW_VERSION
JTAGICE3_MINOR_FW_VERSION = cvar.JTAGICE3_MINOR_FW_VERSION
JTAGICE3_MAJOR_FW_VERSION_ONDISK = cvar.JTAGICE3_MAJOR_FW_VERSION_ONDISK
JTAGICE3_MINOR_FW_VERSION_ONDISK = cvar.JTAGICE3_MINOR_FW_VERSION_ONDISK
JTAGICE3_BUILD_NUMBER = cvar.JTAGICE3_BUILD_NUMBER
JTAGICE3_CHIPSET = cvar.JTAGICE3_CHIPSET
JTAGICE3_FW_ID = cvar.JTAGICE3_FW_ID

class Mk3HouseKeepingProtocol(Mk3Protocol,IMk3HouseKeepingProtocol):
    __swig_setmethods__ = {}
    for _s in [Mk3Protocol,IMk3HouseKeepingProtocol]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Mk3HouseKeepingProtocol, name, value)
    __swig_getmethods__ = {}
    for _s in [Mk3Protocol,IMk3HouseKeepingProtocol]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Mk3HouseKeepingProtocol, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _pyavrdbg_raw.delete_Mk3HouseKeepingProtocol
    __del__ = lambda self : None;
    def query(self, *args): return _pyavrdbg_raw.Mk3HouseKeepingProtocol_query(self, *args)
    def set(self, *args): return _pyavrdbg_raw.Mk3HouseKeepingProtocol_set(self, *args)
    def get(self, *args): return _pyavrdbg_raw.Mk3HouseKeepingProtocol_get(self, *args)
    def startSession(self): return _pyavrdbg_raw.Mk3HouseKeepingProtocol_startSession(self)
    def endSession(self, *args): return _pyavrdbg_raw.Mk3HouseKeepingProtocol_endSession(self, *args)
    def getFwProperties(self, *args): return _pyavrdbg_raw.Mk3HouseKeepingProtocol_getFwProperties(self, *args)
    def echo(self, *args): return _pyavrdbg_raw.Mk3HouseKeepingProtocol_echo(self, *args)
    def firmwareUpgrade(self): return _pyavrdbg_raw.Mk3HouseKeepingProtocol_firmwareUpgrade(self)
    def setSerialNumber(self, *args): return _pyavrdbg_raw.Mk3HouseKeepingProtocol_setSerialNumber(self, *args)
    def detectJtagScanChain(self, *args): return _pyavrdbg_raw.Mk3HouseKeepingProtocol_detectJtagScanChain(self, *args)
    def calibrateOscillator(self): return _pyavrdbg_raw.Mk3HouseKeepingProtocol_calibrateOscillator(self)
    def selfTest(self, *args): return _pyavrdbg_raw.Mk3HouseKeepingProtocol_selfTest(self, *args)
Mk3HouseKeepingProtocol_swigregister = _pyavrdbg_raw.Mk3HouseKeepingProtocol_swigregister
Mk3HouseKeepingProtocol_swigregister(Mk3HouseKeepingProtocol)

class Mk3Avr8GenericProtocol(Mk3Protocol,IAvr8GenericProtocol):
    __swig_setmethods__ = {}
    for _s in [Mk3Protocol,IAvr8GenericProtocol]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Mk3Avr8GenericProtocol, name, value)
    __swig_getmethods__ = {}
    for _s in [Mk3Protocol,IAvr8GenericProtocol]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Mk3Avr8GenericProtocol, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    APPL_BASE_ADDR = _pyavrdbg_raw.Mk3Avr8GenericProtocol_APPL_BASE_ADDR
    BOOT_BASE_ADDR = _pyavrdbg_raw.Mk3Avr8GenericProtocol_BOOT_BASE_ADDR
    EEPROM_BASE_ADDR = _pyavrdbg_raw.Mk3Avr8GenericProtocol_EEPROM_BASE_ADDR
    FUSE_BASE_ADDR = _pyavrdbg_raw.Mk3Avr8GenericProtocol_FUSE_BASE_ADDR
    LOCKBIT_BASE_ADDR = _pyavrdbg_raw.Mk3Avr8GenericProtocol_LOCKBIT_BASE_ADDR
    USER_SIGN_BASE_ADDR = _pyavrdbg_raw.Mk3Avr8GenericProtocol_USER_SIGN_BASE_ADDR
    PRODUCTION_SIGN_BASE_ADDR = _pyavrdbg_raw.Mk3Avr8GenericProtocol_PRODUCTION_SIGN_BASE_ADDR
    DATA_BASE_ADDR = _pyavrdbg_raw.Mk3Avr8GenericProtocol_DATA_BASE_ADDR
    APPLICATION_BYTES = _pyavrdbg_raw.Mk3Avr8GenericProtocol_APPLICATION_BYTES
    BOOT_BYTES = _pyavrdbg_raw.Mk3Avr8GenericProtocol_BOOT_BYTES
    FLASH_PAGE_BYTES = _pyavrdbg_raw.Mk3Avr8GenericProtocol_FLASH_PAGE_BYTES
    EEPROM_SIZE = _pyavrdbg_raw.Mk3Avr8GenericProtocol_EEPROM_SIZE
    EEPROM_PAGE_SIZE = _pyavrdbg_raw.Mk3Avr8GenericProtocol_EEPROM_PAGE_SIZE
    NVMCMD_OFFSET = _pyavrdbg_raw.Mk3Avr8GenericProtocol_NVMCMD_OFFSET
    SIGNATURE_OFFSET = _pyavrdbg_raw.Mk3Avr8GenericProtocol_SIGNATURE_OFFSET
    MemType_REGFILE = _pyavrdbg_raw.Mk3Avr8GenericProtocol_MemType_REGFILE
    MemType_SRAM = _pyavrdbg_raw.Mk3Avr8GenericProtocol_MemType_SRAM
    __swig_destroy__ = _pyavrdbg_raw.delete_Mk3Avr8GenericProtocol
    __del__ = lambda self : None;
    def set(self, *args): return _pyavrdbg_raw.Mk3Avr8GenericProtocol_set(self, *args)
    def get(self, *args): return _pyavrdbg_raw.Mk3Avr8GenericProtocol_get(self, *args)
    def activatePhysical(self, *args): return _pyavrdbg_raw.Mk3Avr8GenericProtocol_activatePhysical(self, *args)
    def deactivatePhysical(self): return _pyavrdbg_raw.Mk3Avr8GenericProtocol_deactivatePhysical(self)
    def getId(self): return _pyavrdbg_raw.Mk3Avr8GenericProtocol_getId(self)
    def attach(self, *args): return _pyavrdbg_raw.Mk3Avr8GenericProtocol_attach(self, *args)
    def detach(self): return _pyavrdbg_raw.Mk3Avr8GenericProtocol_detach(self)
    def reset(self, *args): return _pyavrdbg_raw.Mk3Avr8GenericProtocol_reset(self, *args)
    def stop(self, *args): return _pyavrdbg_raw.Mk3Avr8GenericProtocol_stop(self, *args)
    def run(self): return _pyavrdbg_raw.Mk3Avr8GenericProtocol_run(self)
    def runToAddress(self, *args): return _pyavrdbg_raw.Mk3Avr8GenericProtocol_runToAddress(self, *args)
    def step(self, *args): return _pyavrdbg_raw.Mk3Avr8GenericProtocol_step(self, *args)
    def pcRead(self): return _pyavrdbg_raw.Mk3Avr8GenericProtocol_pcRead(self)
    def pcWrite(self, *args): return _pyavrdbg_raw.Mk3Avr8GenericProtocol_pcWrite(self, *args)
    def progModeEnter(self): return _pyavrdbg_raw.Mk3Avr8GenericProtocol_progModeEnter(self)
    def progModeLeave(self): return _pyavrdbg_raw.Mk3Avr8GenericProtocol_progModeLeave(self)
    def disableDebugWire(self): return _pyavrdbg_raw.Mk3Avr8GenericProtocol_disableDebugWire(self)
    def erase(self, *args): return _pyavrdbg_raw.Mk3Avr8GenericProtocol_erase(self, *args)
    def checkCrc(self, *args): return _pyavrdbg_raw.Mk3Avr8GenericProtocol_checkCrc(self, *args)
    def pageErase(self, *args): return _pyavrdbg_raw.Mk3Avr8GenericProtocol_pageErase(self, *args)
    def hardwareBreakpointSet(self, *args): return _pyavrdbg_raw.Mk3Avr8GenericProtocol_hardwareBreakpointSet(self, *args)
    def hardwareBreakpointClear(self, *args): return _pyavrdbg_raw.Mk3Avr8GenericProtocol_hardwareBreakpointClear(self, *args)
    def hardwareBreakpointXmega(self, *args): return _pyavrdbg_raw.Mk3Avr8GenericProtocol_hardwareBreakpointXmega(self, *args)
    def softwareBreakpointSet(self, *args): return _pyavrdbg_raw.Mk3Avr8GenericProtocol_softwareBreakpointSet(self, *args)
    def softwareBreakpointClear(self, *args): return _pyavrdbg_raw.Mk3Avr8GenericProtocol_softwareBreakpointClear(self, *args)
    def softwareBreakpointClearAll(self): return _pyavrdbg_raw.Mk3Avr8GenericProtocol_softwareBreakpointClearAll(self)
    def configureSession(self, *args): return _pyavrdbg_raw.Mk3Avr8GenericProtocol_configureSession(self, *args)
    def setupDevice(self, *args): return _pyavrdbg_raw.Mk3Avr8GenericProtocol_setupDevice(self, *args)
    def memoryRead(self, *args): return _pyavrdbg_raw.Mk3Avr8GenericProtocol_memoryRead(self, *args)
    def memoryReadMasked(self, *args): return _pyavrdbg_raw.Mk3Avr8GenericProtocol_memoryReadMasked(self, *args)
    def memoryWrite(self, *args): return _pyavrdbg_raw.Mk3Avr8GenericProtocol_memoryWrite(self, *args)
Mk3Avr8GenericProtocol_swigregister = _pyavrdbg_raw.Mk3Avr8GenericProtocol_swigregister
Mk3Avr8GenericProtocol_swigregister(Mk3Avr8GenericProtocol)

class EdbgProtocol(Mk3Protocol):
    __swig_setmethods__ = {}
    for _s in [Mk3Protocol]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, EdbgProtocol, name, value)
    __swig_getmethods__ = {}
    for _s in [Mk3Protocol]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, EdbgProtocol, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _pyavrdbg_raw.delete_EdbgProtocol
    __del__ = lambda self : None;
    def query(self, *args): return _pyavrdbg_raw.EdbgProtocol_query(self, *args)
    def set(self, *args): return _pyavrdbg_raw.EdbgProtocol_set(self, *args)
    def get(self, *args): return _pyavrdbg_raw.EdbgProtocol_get(self, *args)
    def enableGpio(self, *args): return _pyavrdbg_raw.EdbgProtocol_enableGpio(self, *args)
    def setGpio(self, *args): return _pyavrdbg_raw.EdbgProtocol_setGpio(self, *args)
    def getGpio(self, *args): return _pyavrdbg_raw.EdbgProtocol_getGpio(self, *args)
    def getTargetVoltage(self): return _pyavrdbg_raw.EdbgProtocol_getTargetVoltage(self)
    def setTargetVoltage(self, *args): return _pyavrdbg_raw.EdbgProtocol_setTargetVoltage(self, *args)
    def enableTargetVoltageMonitor(self, *args): return _pyavrdbg_raw.EdbgProtocol_enableTargetVoltageMonitor(self, *args)
    def enableTargetCurrentMonitor(self, *args): return _pyavrdbg_raw.EdbgProtocol_enableTargetCurrentMonitor(self, *args)
    def enableGenericClock(self, *args): return _pyavrdbg_raw.EdbgProtocol_enableGenericClock(self, *args)
    def setGenericClockFrequency(self, *args): return _pyavrdbg_raw.EdbgProtocol_setGenericClockFrequency(self, *args)
    def setAuxMode(self, *args): return _pyavrdbg_raw.EdbgProtocol_setAuxMode(self, *args)
EdbgProtocol_swigregister = _pyavrdbg_raw.EdbgProtocol_swigregister
EdbgProtocol_swigregister(EdbgProtocol)

class JtagIce3EventListener(ITargetEventListener):
    __swig_setmethods__ = {}
    for _s in [ITargetEventListener]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, JtagIce3EventListener, name, value)
    __swig_getmethods__ = {}
    for _s in [ITargetEventListener]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, JtagIce3EventListener, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def startEventPolling(self): return _pyavrdbg_raw.JtagIce3EventListener_startEventPolling(self)
    def stopEventPolling(self): return _pyavrdbg_raw.JtagIce3EventListener_stopEventPolling(self)
    def resetPollFrequency(self, *args): return _pyavrdbg_raw.JtagIce3EventListener_resetPollFrequency(self, *args)
    def pyRegisterForTargetEvents(self, *args): return _pyavrdbg_raw.JtagIce3EventListener_pyRegisterForTargetEvents(self, *args)
JtagIce3EventListener_swigregister = _pyavrdbg_raw.JtagIce3EventListener_swigregister
JtagIce3EventListener_swigregister(JtagIce3EventListener)

class JtagIce3PhysicalInterface(IPhysicalInterface):
    __swig_setmethods__ = {}
    for _s in [IPhysicalInterface]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, JtagIce3PhysicalInterface, name, value)
    __swig_getmethods__ = {}
    for _s in [IPhysicalInterface]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, JtagIce3PhysicalInterface, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def setDevice(self, *args): return _pyavrdbg_raw.JtagIce3PhysicalInterface_setDevice(self, *args)
    def getDevices(self): return _pyavrdbg_raw.JtagIce3PhysicalInterface_getDevices(self)
    def getProperties(self): return _pyavrdbg_raw.JtagIce3PhysicalInterface_getProperties(self)
    def setProperties(self, *args): return _pyavrdbg_raw.JtagIce3PhysicalInterface_setProperties(self, *args)
    def isActivated(self): return _pyavrdbg_raw.JtagIce3PhysicalInterface_isActivated(self)
JtagIce3PhysicalInterface_swigregister = _pyavrdbg_raw.JtagIce3PhysicalInterface_swigregister
JtagIce3PhysicalInterface_swigregister(JtagIce3PhysicalInterface)


def jtagIceMk3FromToolContext(*args):
  return _pyavrdbg_raw.jtagIceMk3FromToolContext(*args)
jtagIceMk3FromToolContext = _pyavrdbg_raw.jtagIceMk3FromToolContext

def JtagIce3EventListenerFromTargetEventListener(*args):
  return _pyavrdbg_raw.JtagIce3EventListenerFromTargetEventListener(*args)
JtagIce3EventListenerFromTargetEventListener = _pyavrdbg_raw.JtagIce3EventListenerFromTargetEventListener
class vectorofavronefileinformation(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vectorofavronefileinformation, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vectorofavronefileinformation, name)
    __repr__ = _swig_repr
    def iterator(self): return _pyavrdbg_raw.vectorofavronefileinformation_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _pyavrdbg_raw.vectorofavronefileinformation___nonzero__(self)
    def __bool__(self): return _pyavrdbg_raw.vectorofavronefileinformation___bool__(self)
    def __len__(self): return _pyavrdbg_raw.vectorofavronefileinformation___len__(self)
    def pop(self): return _pyavrdbg_raw.vectorofavronefileinformation_pop(self)
    def __getslice__(self, *args): return _pyavrdbg_raw.vectorofavronefileinformation___getslice__(self, *args)
    def __setslice__(self, *args): return _pyavrdbg_raw.vectorofavronefileinformation___setslice__(self, *args)
    def __delslice__(self, *args): return _pyavrdbg_raw.vectorofavronefileinformation___delslice__(self, *args)
    def __delitem__(self, *args): return _pyavrdbg_raw.vectorofavronefileinformation___delitem__(self, *args)
    def __getitem__(self, *args): return _pyavrdbg_raw.vectorofavronefileinformation___getitem__(self, *args)
    def __setitem__(self, *args): return _pyavrdbg_raw.vectorofavronefileinformation___setitem__(self, *args)
    def append(self, *args): return _pyavrdbg_raw.vectorofavronefileinformation_append(self, *args)
    def empty(self): return _pyavrdbg_raw.vectorofavronefileinformation_empty(self)
    def size(self): return _pyavrdbg_raw.vectorofavronefileinformation_size(self)
    def clear(self): return _pyavrdbg_raw.vectorofavronefileinformation_clear(self)
    def swap(self, *args): return _pyavrdbg_raw.vectorofavronefileinformation_swap(self, *args)
    def get_allocator(self): return _pyavrdbg_raw.vectorofavronefileinformation_get_allocator(self)
    def begin(self): return _pyavrdbg_raw.vectorofavronefileinformation_begin(self)
    def end(self): return _pyavrdbg_raw.vectorofavronefileinformation_end(self)
    def rbegin(self): return _pyavrdbg_raw.vectorofavronefileinformation_rbegin(self)
    def rend(self): return _pyavrdbg_raw.vectorofavronefileinformation_rend(self)
    def pop_back(self): return _pyavrdbg_raw.vectorofavronefileinformation_pop_back(self)
    def erase(self, *args): return _pyavrdbg_raw.vectorofavronefileinformation_erase(self, *args)
    def __init__(self, *args): 
        this = _pyavrdbg_raw.new_vectorofavronefileinformation(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _pyavrdbg_raw.vectorofavronefileinformation_push_back(self, *args)
    def front(self): return _pyavrdbg_raw.vectorofavronefileinformation_front(self)
    def back(self): return _pyavrdbg_raw.vectorofavronefileinformation_back(self)
    def assign(self, *args): return _pyavrdbg_raw.vectorofavronefileinformation_assign(self, *args)
    def resize(self, *args): return _pyavrdbg_raw.vectorofavronefileinformation_resize(self, *args)
    def insert(self, *args): return _pyavrdbg_raw.vectorofavronefileinformation_insert(self, *args)
    def reserve(self, *args): return _pyavrdbg_raw.vectorofavronefileinformation_reserve(self, *args)
    def capacity(self): return _pyavrdbg_raw.vectorofavronefileinformation_capacity(self)
    __swig_destroy__ = _pyavrdbg_raw.delete_vectorofavronefileinformation
    __del__ = lambda self : None;
vectorofavronefileinformation_swigregister = _pyavrdbg_raw.vectorofavronefileinformation_swigregister
vectorofavronefileinformation_swigregister(vectorofavronefileinformation)

class AvrOneTool(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AvrOneTool, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AvrOneTool, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def selfTest(self, *args): return _pyavrdbg_raw.AvrOneTool_selfTest(self, *args)
    def connect(self, *args): return _pyavrdbg_raw.AvrOneTool_connect(self, *args)
    def disconnect(self, *args): return _pyavrdbg_raw.AvrOneTool_disconnect(self, *args)
    def startUpgrade(self, *args): return _pyavrdbg_raw.AvrOneTool_startUpgrade(self, *args)
    def checkFirmware(self, *args): return _pyavrdbg_raw.AvrOneTool_checkFirmware(self, *args)
    def setBootMode(self, *args): return _pyavrdbg_raw.AvrOneTool_setBootMode(self, *args)
    def cancel(self): return _pyavrdbg_raw.AvrOneTool_cancel(self)
    def getTargetVoltage(self): return _pyavrdbg_raw.AvrOneTool_getTargetVoltage(self)
    def genericCommand(self, *args): return _pyavrdbg_raw.AvrOneTool_genericCommand(self, *args)
    def getAvrOnePhysicalInterface(self): return _pyavrdbg_raw.AvrOneTool_getAvrOnePhysicalInterface(self)
    def getAvrOneProtocol(self): return _pyavrdbg_raw.AvrOneTool_getAvrOneProtocol(self)
    def getEventListener(self): return _pyavrdbg_raw.AvrOneTool_getEventListener(self)
    def calibrate(self, *args): return _pyavrdbg_raw.AvrOneTool_calibrate(self, *args)
    __swig_destroy__ = _pyavrdbg_raw.delete_AvrOneTool
    __del__ = lambda self : None;
AvrOneTool_swigregister = _pyavrdbg_raw.AvrOneTool_swigregister
AvrOneTool_swigregister(AvrOneTool)
AVRONETOOL_HARDWARE_REVISION = cvar.AVRONETOOL_HARDWARE_REVISION
AVRONETOOL_PROBE_REVISION = cvar.AVRONETOOL_PROBE_REVISION
AVRONETOOL_MAJOR_FW_VERSION = cvar.AVRONETOOL_MAJOR_FW_VERSION
AVRONETOOL_MINOR_FW_VERSION = cvar.AVRONETOOL_MINOR_FW_VERSION
AVRONETOOL_MAJOR_FW_VERSION_ON_DISK = cvar.AVRONETOOL_MAJOR_FW_VERSION_ON_DISK
AVRONETOOL_MINOR_FW_VERSION_ON_DISK = cvar.AVRONETOOL_MINOR_FW_VERSION_ON_DISK
AVRONETOOL_IS_USB2 = cvar.AVRONETOOL_IS_USB2
AVRONETOOL_FPGA_VERSIONS = cvar.AVRONETOOL_FPGA_VERSIONS
AVRONETOOL_FPGA_FILE = cvar.AVRONETOOL_FPGA_FILE
AVRONETOOL_FPGA_FILE_MAJOR_VERSION = cvar.AVRONETOOL_FPGA_FILE_MAJOR_VERSION
AVRONETOOL_FPGA_FILE_MINOR_VERSION = cvar.AVRONETOOL_FPGA_FILE_MINOR_VERSION
AVRONETOOL_FPGA_FILE_MAJOR_VERSION_ON_DISK = cvar.AVRONETOOL_FPGA_FILE_MAJOR_VERSION_ON_DISK
AVRONETOOL_FPGA_FILE_MINOR_VERSION_ON_DISK = cvar.AVRONETOOL_FPGA_FILE_MINOR_VERSION_ON_DISK

class AvrOneSignOnData(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AvrOneSignOnData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AvrOneSignOnData, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _pyavrdbg_raw.delete_AvrOneSignOnData
    __del__ = lambda self : None;
    def getSerialNumberAsString(self): return _pyavrdbg_raw.AvrOneSignOnData_getSerialNumberAsString(self)
    def isUsb2(self): return _pyavrdbg_raw.AvrOneSignOnData_isUsb2(self)
    __swig_setmethods__["commID"] = _pyavrdbg_raw.AvrOneSignOnData_commID_set
    __swig_getmethods__["commID"] = _pyavrdbg_raw.AvrOneSignOnData_commID_get
    if _newclass:commID = _swig_property(_pyavrdbg_raw.AvrOneSignOnData_commID_get, _pyavrdbg_raw.AvrOneSignOnData_commID_set)
    __swig_setmethods__["mcuBldrMin"] = _pyavrdbg_raw.AvrOneSignOnData_mcuBldrMin_set
    __swig_getmethods__["mcuBldrMin"] = _pyavrdbg_raw.AvrOneSignOnData_mcuBldrMin_get
    if _newclass:mcuBldrMin = _swig_property(_pyavrdbg_raw.AvrOneSignOnData_mcuBldrMin_get, _pyavrdbg_raw.AvrOneSignOnData_mcuBldrMin_set)
    __swig_setmethods__["mcuBldrMaj"] = _pyavrdbg_raw.AvrOneSignOnData_mcuBldrMaj_set
    __swig_getmethods__["mcuBldrMaj"] = _pyavrdbg_raw.AvrOneSignOnData_mcuBldrMaj_get
    if _newclass:mcuBldrMaj = _swig_property(_pyavrdbg_raw.AvrOneSignOnData_mcuBldrMaj_get, _pyavrdbg_raw.AvrOneSignOnData_mcuBldrMaj_set)
    __swig_setmethods__["mcuFwMin"] = _pyavrdbg_raw.AvrOneSignOnData_mcuFwMin_set
    __swig_getmethods__["mcuFwMin"] = _pyavrdbg_raw.AvrOneSignOnData_mcuFwMin_get
    if _newclass:mcuFwMin = _swig_property(_pyavrdbg_raw.AvrOneSignOnData_mcuFwMin_get, _pyavrdbg_raw.AvrOneSignOnData_mcuFwMin_set)
    __swig_setmethods__["mcuFwMaj"] = _pyavrdbg_raw.AvrOneSignOnData_mcuFwMaj_set
    __swig_getmethods__["mcuFwMaj"] = _pyavrdbg_raw.AvrOneSignOnData_mcuFwMaj_get
    if _newclass:mcuFwMaj = _swig_property(_pyavrdbg_raw.AvrOneSignOnData_mcuFwMaj_get, _pyavrdbg_raw.AvrOneSignOnData_mcuFwMaj_set)
    __swig_setmethods__["iceHw"] = _pyavrdbg_raw.AvrOneSignOnData_iceHw_set
    __swig_getmethods__["iceHw"] = _pyavrdbg_raw.AvrOneSignOnData_iceHw_get
    if _newclass:iceHw = _swig_property(_pyavrdbg_raw.AvrOneSignOnData_iceHw_get, _pyavrdbg_raw.AvrOneSignOnData_iceHw_set)
    __swig_setmethods__["probeHw"] = _pyavrdbg_raw.AvrOneSignOnData_probeHw_set
    __swig_getmethods__["probeHw"] = _pyavrdbg_raw.AvrOneSignOnData_probeHw_get
    if _newclass:probeHw = _swig_property(_pyavrdbg_raw.AvrOneSignOnData_probeHw_get, _pyavrdbg_raw.AvrOneSignOnData_probeHw_set)
    __swig_setmethods__["fpgaFile"] = _pyavrdbg_raw.AvrOneSignOnData_fpgaFile_set
    __swig_getmethods__["fpgaFile"] = _pyavrdbg_raw.AvrOneSignOnData_fpgaFile_get
    if _newclass:fpgaFile = _swig_property(_pyavrdbg_raw.AvrOneSignOnData_fpgaFile_get, _pyavrdbg_raw.AvrOneSignOnData_fpgaFile_set)
    __swig_setmethods__["fpgaVerMin"] = _pyavrdbg_raw.AvrOneSignOnData_fpgaVerMin_set
    __swig_getmethods__["fpgaVerMin"] = _pyavrdbg_raw.AvrOneSignOnData_fpgaVerMin_get
    if _newclass:fpgaVerMin = _swig_property(_pyavrdbg_raw.AvrOneSignOnData_fpgaVerMin_get, _pyavrdbg_raw.AvrOneSignOnData_fpgaVerMin_set)
    __swig_setmethods__["fpgaVerMaj"] = _pyavrdbg_raw.AvrOneSignOnData_fpgaVerMaj_set
    __swig_getmethods__["fpgaVerMaj"] = _pyavrdbg_raw.AvrOneSignOnData_fpgaVerMaj_get
    if _newclass:fpgaVerMaj = _swig_property(_pyavrdbg_raw.AvrOneSignOnData_fpgaVerMaj_get, _pyavrdbg_raw.AvrOneSignOnData_fpgaVerMaj_set)
    __swig_setmethods__["regId"] = _pyavrdbg_raw.AvrOneSignOnData_regId_set
    __swig_getmethods__["regId"] = _pyavrdbg_raw.AvrOneSignOnData_regId_get
    if _newclass:regId = _swig_property(_pyavrdbg_raw.AvrOneSignOnData_regId_get, _pyavrdbg_raw.AvrOneSignOnData_regId_set)
    __swig_setmethods__["fpgaStatus"] = _pyavrdbg_raw.AvrOneSignOnData_fpgaStatus_set
    __swig_getmethods__["fpgaStatus"] = _pyavrdbg_raw.AvrOneSignOnData_fpgaStatus_get
    if _newclass:fpgaStatus = _swig_property(_pyavrdbg_raw.AvrOneSignOnData_fpgaStatus_get, _pyavrdbg_raw.AvrOneSignOnData_fpgaStatus_set)
    __swig_setmethods__["usbInfo"] = _pyavrdbg_raw.AvrOneSignOnData_usbInfo_set
    __swig_getmethods__["usbInfo"] = _pyavrdbg_raw.AvrOneSignOnData_usbInfo_get
    if _newclass:usbInfo = _swig_property(_pyavrdbg_raw.AvrOneSignOnData_usbInfo_get, _pyavrdbg_raw.AvrOneSignOnData_usbInfo_set)
    __swig_setmethods__["errorInfo"] = _pyavrdbg_raw.AvrOneSignOnData_errorInfo_set
    __swig_getmethods__["errorInfo"] = _pyavrdbg_raw.AvrOneSignOnData_errorInfo_get
    if _newclass:errorInfo = _swig_property(_pyavrdbg_raw.AvrOneSignOnData_errorInfo_get, _pyavrdbg_raw.AvrOneSignOnData_errorInfo_set)
    __swig_setmethods__["serialNumber"] = _pyavrdbg_raw.AvrOneSignOnData_serialNumber_set
    __swig_getmethods__["serialNumber"] = _pyavrdbg_raw.AvrOneSignOnData_serialNumber_get
    if _newclass:serialNumber = _swig_property(_pyavrdbg_raw.AvrOneSignOnData_serialNumber_get, _pyavrdbg_raw.AvrOneSignOnData_serialNumber_set)
    __swig_setmethods__["deviceID"] = _pyavrdbg_raw.AvrOneSignOnData_deviceID_set
    __swig_getmethods__["deviceID"] = _pyavrdbg_raw.AvrOneSignOnData_deviceID_get
    if _newclass:deviceID = _swig_property(_pyavrdbg_raw.AvrOneSignOnData_deviceID_get, _pyavrdbg_raw.AvrOneSignOnData_deviceID_set)
AvrOneSignOnData_swigregister = _pyavrdbg_raw.AvrOneSignOnData_swigregister
AvrOneSignOnData_swigregister(AvrOneSignOnData)

class AvrOneFileInformation(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AvrOneFileInformation, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AvrOneFileInformation, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _pyavrdbg_raw.delete_AvrOneFileInformation
    __del__ = lambda self : None;
    __swig_setmethods__["name"] = _pyavrdbg_raw.AvrOneFileInformation_name_set
    __swig_getmethods__["name"] = _pyavrdbg_raw.AvrOneFileInformation_name_get
    if _newclass:name = _swig_property(_pyavrdbg_raw.AvrOneFileInformation_name_get, _pyavrdbg_raw.AvrOneFileInformation_name_set)
    __swig_setmethods__["type"] = _pyavrdbg_raw.AvrOneFileInformation_type_set
    __swig_getmethods__["type"] = _pyavrdbg_raw.AvrOneFileInformation_type_get
    if _newclass:type = _swig_property(_pyavrdbg_raw.AvrOneFileInformation_type_get, _pyavrdbg_raw.AvrOneFileInformation_type_set)
    __swig_setmethods__["size"] = _pyavrdbg_raw.AvrOneFileInformation_size_set
    __swig_getmethods__["size"] = _pyavrdbg_raw.AvrOneFileInformation_size_get
    if _newclass:size = _swig_property(_pyavrdbg_raw.AvrOneFileInformation_size_get, _pyavrdbg_raw.AvrOneFileInformation_size_set)
    __swig_setmethods__["verMaj"] = _pyavrdbg_raw.AvrOneFileInformation_verMaj_set
    __swig_getmethods__["verMaj"] = _pyavrdbg_raw.AvrOneFileInformation_verMaj_get
    if _newclass:verMaj = _swig_property(_pyavrdbg_raw.AvrOneFileInformation_verMaj_get, _pyavrdbg_raw.AvrOneFileInformation_verMaj_set)
    __swig_setmethods__["verMin"] = _pyavrdbg_raw.AvrOneFileInformation_verMin_set
    __swig_getmethods__["verMin"] = _pyavrdbg_raw.AvrOneFileInformation_verMin_get
    if _newclass:verMin = _swig_property(_pyavrdbg_raw.AvrOneFileInformation_verMin_get, _pyavrdbg_raw.AvrOneFileInformation_verMin_set)
AvrOneFileInformation_swigregister = _pyavrdbg_raw.AvrOneFileInformation_swigregister
AvrOneFileInformation_swigregister(AvrOneFileInformation)

JTAG = _pyavrdbg_raw.JTAG
PDI = _pyavrdbg_raw.PDI
class AvrOneTargetInformation(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AvrOneTargetInformation, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AvrOneTargetInformation, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _pyavrdbg_raw.delete_AvrOneTargetInformation
    __del__ = lambda self : None;
    __swig_setmethods__["voltageMv"] = _pyavrdbg_raw.AvrOneTargetInformation_voltageMv_set
    __swig_getmethods__["voltageMv"] = _pyavrdbg_raw.AvrOneTargetInformation_voltageMv_get
    if _newclass:voltageMv = _swig_property(_pyavrdbg_raw.AvrOneTargetInformation_voltageMv_get, _pyavrdbg_raw.AvrOneTargetInformation_voltageMv_set)
    __swig_setmethods__["iface"] = _pyavrdbg_raw.AvrOneTargetInformation_iface_set
    __swig_getmethods__["iface"] = _pyavrdbg_raw.AvrOneTargetInformation_iface_get
    if _newclass:iface = _swig_property(_pyavrdbg_raw.AvrOneTargetInformation_iface_get, _pyavrdbg_raw.AvrOneTargetInformation_iface_set)
    __swig_setmethods__["deviceIds"] = _pyavrdbg_raw.AvrOneTargetInformation_deviceIds_set
    __swig_getmethods__["deviceIds"] = _pyavrdbg_raw.AvrOneTargetInformation_deviceIds_get
    if _newclass:deviceIds = _swig_property(_pyavrdbg_raw.AvrOneTargetInformation_deviceIds_get, _pyavrdbg_raw.AvrOneTargetInformation_deviceIds_set)
AvrOneTargetInformation_swigregister = _pyavrdbg_raw.AvrOneTargetInformation_swigregister
AvrOneTargetInformation_swigregister(AvrOneTargetInformation)

class AvrOneReadFromFileInformation(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AvrOneReadFromFileInformation, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AvrOneReadFromFileInformation, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _pyavrdbg_raw.delete_AvrOneReadFromFileInformation
    __del__ = lambda self : None;
    __swig_setmethods__["bytesRead"] = _pyavrdbg_raw.AvrOneReadFromFileInformation_bytesRead_set
    __swig_getmethods__["bytesRead"] = _pyavrdbg_raw.AvrOneReadFromFileInformation_bytesRead_get
    if _newclass:bytesRead = _swig_property(_pyavrdbg_raw.AvrOneReadFromFileInformation_bytesRead_get, _pyavrdbg_raw.AvrOneReadFromFileInformation_bytesRead_set)
    __swig_setmethods__["eof"] = _pyavrdbg_raw.AvrOneReadFromFileInformation_eof_set
    __swig_getmethods__["eof"] = _pyavrdbg_raw.AvrOneReadFromFileInformation_eof_get
    if _newclass:eof = _swig_property(_pyavrdbg_raw.AvrOneReadFromFileInformation_eof_get, _pyavrdbg_raw.AvrOneReadFromFileInformation_eof_set)
AvrOneReadFromFileInformation_swigregister = _pyavrdbg_raw.AvrOneReadFromFileInformation_swigregister
AvrOneReadFromFileInformation_swigregister(AvrOneReadFromFileInformation)

class IAvrOneProtocol(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IAvrOneProtocol, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IAvrOneProtocol, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def getProtocolId(self): return _pyavrdbg_raw.IAvrOneProtocol_getProtocolId(self)
    def signOn(self): return _pyavrdbg_raw.IAvrOneProtocol_signOn(self)
    def signOff(self, *args): return _pyavrdbg_raw.IAvrOneProtocol_signOff(self, *args)
    def setParameter(self, *args): return _pyavrdbg_raw.IAvrOneProtocol_setParameter(self, *args)
    def getParameter(self, *args): return _pyavrdbg_raw.IAvrOneProtocol_getParameter(self, *args)
    def setEmulatorMode(self, *args): return _pyavrdbg_raw.IAvrOneProtocol_setEmulatorMode(self, *args)
    def firmwareUpgrade(self): return _pyavrdbg_raw.IAvrOneProtocol_firmwareUpgrade(self)
    def selfTest(self, *args): return _pyavrdbg_raw.IAvrOneProtocol_selfTest(self, *args)
    def restoreTarget(self): return _pyavrdbg_raw.IAvrOneProtocol_restoreTarget(self)
    def ispCommand(self, *args): return _pyavrdbg_raw.IAvrOneProtocol_ispCommand(self, *args)
    def getJtagId(self): return _pyavrdbg_raw.IAvrOneProtocol_getJtagId(self)
    def detectTargets(self, *args): return _pyavrdbg_raw.IAvrOneProtocol_detectTargets(self, *args)
    def usbHandover(self, *args): return _pyavrdbg_raw.IAvrOneProtocol_usbHandover(self, *args)
    def enterProgMode(self): return _pyavrdbg_raw.IAvrOneProtocol_enterProgMode(self)
    def leaveProgMode(self): return _pyavrdbg_raw.IAvrOneProtocol_leaveProgMode(self)
    def eraseDevice(self): return _pyavrdbg_raw.IAvrOneProtocol_eraseDevice(self)
    def eraseDevice2(self, *args): return _pyavrdbg_raw.IAvrOneProtocol_eraseDevice2(self, *args)
    def writeMemory(self, *args): return _pyavrdbg_raw.IAvrOneProtocol_writeMemory(self, *args)
    def readMemory(self, *args): return _pyavrdbg_raw.IAvrOneProtocol_readMemory(self, *args)
    def readMemoryMasked(self, *args): return _pyavrdbg_raw.IAvrOneProtocol_readMemoryMasked(self, *args)
    def checkCRC2(self, *args): return _pyavrdbg_raw.IAvrOneProtocol_checkCRC2(self, *args)
    def writeProgramCounter(self, *args): return _pyavrdbg_raw.IAvrOneProtocol_writeProgramCounter(self, *args)
    def readProgramCounter(self): return _pyavrdbg_raw.IAvrOneProtocol_readProgramCounter(self)
    def erasePageSpm(self, *args): return _pyavrdbg_raw.IAvrOneProtocol_erasePageSpm(self, *args)
    def setBreakPoint(self, *args): return _pyavrdbg_raw.IAvrOneProtocol_setBreakPoint(self, *args)
    def clearBreakPoint(self, *args): return _pyavrdbg_raw.IAvrOneProtocol_clearBreakPoint(self, *args)
    def go(self): return _pyavrdbg_raw.IAvrOneProtocol_go(self)
    def stop(self, *args): return _pyavrdbg_raw.IAvrOneProtocol_stop(self, *args)
    def singleStep(self, *args): return _pyavrdbg_raw.IAvrOneProtocol_singleStep(self, *args)
    def reset(self, *args): return _pyavrdbg_raw.IAvrOneProtocol_reset(self, *args)
    def runTo(self, *args): return _pyavrdbg_raw.IAvrOneProtocol_runTo(self, *args)
    def configureFPGA(self, *args): return _pyavrdbg_raw.IAvrOneProtocol_configureFPGA(self, *args)
    def getFileInformation(self): return _pyavrdbg_raw.IAvrOneProtocol_getFileInformation(self)
    def deleteFile(self, *args): return _pyavrdbg_raw.IAvrOneProtocol_deleteFile(self, *args)
    def formatFileSystem(self): return _pyavrdbg_raw.IAvrOneProtocol_formatFileSystem(self)
    def openFileForWriting(self, *args): return _pyavrdbg_raw.IAvrOneProtocol_openFileForWriting(self, *args)
    def writeToFile(self, *args): return _pyavrdbg_raw.IAvrOneProtocol_writeToFile(self, *args)
    def openFileForReading(self, *args): return _pyavrdbg_raw.IAvrOneProtocol_openFileForReading(self, *args)
    def closeFile(self, *args): return _pyavrdbg_raw.IAvrOneProtocol_closeFile(self, *args)
    __swig_destroy__ = _pyavrdbg_raw.delete_IAvrOneProtocol
    __del__ = lambda self : None;
IAvrOneProtocol_swigregister = _pyavrdbg_raw.IAvrOneProtocol_swigregister
IAvrOneProtocol_swigregister(IAvrOneProtocol)

class AvrOneProtocol(IAvrOneProtocol):
    __swig_setmethods__ = {}
    for _s in [IAvrOneProtocol]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AvrOneProtocol, name, value)
    __swig_getmethods__ = {}
    for _s in [IAvrOneProtocol]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, AvrOneProtocol, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _pyavrdbg_raw.delete_AvrOneProtocol
    __del__ = lambda self : None;
    def getProtocolId(self): return _pyavrdbg_raw.AvrOneProtocol_getProtocolId(self)
    def signOn(self): return _pyavrdbg_raw.AvrOneProtocol_signOn(self)
    def signOff(self, *args): return _pyavrdbg_raw.AvrOneProtocol_signOff(self, *args)
    def setParameter(self, *args): return _pyavrdbg_raw.AvrOneProtocol_setParameter(self, *args)
    def getParameter(self, *args): return _pyavrdbg_raw.AvrOneProtocol_getParameter(self, *args)
    def setEmulatorMode(self, *args): return _pyavrdbg_raw.AvrOneProtocol_setEmulatorMode(self, *args)
    def firmwareUpgrade(self): return _pyavrdbg_raw.AvrOneProtocol_firmwareUpgrade(self)
    def selfTest(self, *args): return _pyavrdbg_raw.AvrOneProtocol_selfTest(self, *args)
    def restoreTarget(self): return _pyavrdbg_raw.AvrOneProtocol_restoreTarget(self)
    def ispCommand(self, *args): return _pyavrdbg_raw.AvrOneProtocol_ispCommand(self, *args)
    def getJtagId(self): return _pyavrdbg_raw.AvrOneProtocol_getJtagId(self)
    def detectTargets(self, *args): return _pyavrdbg_raw.AvrOneProtocol_detectTargets(self, *args)
    def usbHandover(self, *args): return _pyavrdbg_raw.AvrOneProtocol_usbHandover(self, *args)
    def enterProgMode(self): return _pyavrdbg_raw.AvrOneProtocol_enterProgMode(self)
    def leaveProgMode(self): return _pyavrdbg_raw.AvrOneProtocol_leaveProgMode(self)
    def eraseDevice(self): return _pyavrdbg_raw.AvrOneProtocol_eraseDevice(self)
    def eraseDevice2(self, *args): return _pyavrdbg_raw.AvrOneProtocol_eraseDevice2(self, *args)
    def writeMemory(self, *args): return _pyavrdbg_raw.AvrOneProtocol_writeMemory(self, *args)
    def readMemory(self, *args): return _pyavrdbg_raw.AvrOneProtocol_readMemory(self, *args)
    def readMemoryMasked(self, *args): return _pyavrdbg_raw.AvrOneProtocol_readMemoryMasked(self, *args)
    def checkCRC2(self, *args): return _pyavrdbg_raw.AvrOneProtocol_checkCRC2(self, *args)
    def writeProgramCounter(self, *args): return _pyavrdbg_raw.AvrOneProtocol_writeProgramCounter(self, *args)
    def readProgramCounter(self): return _pyavrdbg_raw.AvrOneProtocol_readProgramCounter(self)
    def erasePageSpm(self, *args): return _pyavrdbg_raw.AvrOneProtocol_erasePageSpm(self, *args)
    def setBreakPoint(self, *args): return _pyavrdbg_raw.AvrOneProtocol_setBreakPoint(self, *args)
    def clearBreakPoint(self, *args): return _pyavrdbg_raw.AvrOneProtocol_clearBreakPoint(self, *args)
    def go(self): return _pyavrdbg_raw.AvrOneProtocol_go(self)
    def stop(self, *args): return _pyavrdbg_raw.AvrOneProtocol_stop(self, *args)
    def singleStep(self, *args): return _pyavrdbg_raw.AvrOneProtocol_singleStep(self, *args)
    def reset(self, *args): return _pyavrdbg_raw.AvrOneProtocol_reset(self, *args)
    def runTo(self, *args): return _pyavrdbg_raw.AvrOneProtocol_runTo(self, *args)
    def configureFPGA(self, *args): return _pyavrdbg_raw.AvrOneProtocol_configureFPGA(self, *args)
    def getFileInformation(self): return _pyavrdbg_raw.AvrOneProtocol_getFileInformation(self)
    def deleteFile(self, *args): return _pyavrdbg_raw.AvrOneProtocol_deleteFile(self, *args)
    def formatFileSystem(self): return _pyavrdbg_raw.AvrOneProtocol_formatFileSystem(self)
    def openFileForWriting(self, *args): return _pyavrdbg_raw.AvrOneProtocol_openFileForWriting(self, *args)
    def writeToFile(self, *args): return _pyavrdbg_raw.AvrOneProtocol_writeToFile(self, *args)
    def openFileForReading(self, *args): return _pyavrdbg_raw.AvrOneProtocol_openFileForReading(self, *args)
    def closeFile(self, *args): return _pyavrdbg_raw.AvrOneProtocol_closeFile(self, *args)
    def setComplexBreakpoint(self, *args): return _pyavrdbg_raw.AvrOneProtocol_setComplexBreakpoint(self, *args)
AvrOneProtocol_swigregister = _pyavrdbg_raw.AvrOneProtocol_swigregister
AvrOneProtocol_swigregister(AvrOneProtocol)

class AvrOneEventListener(ITargetEventListener):
    __swig_setmethods__ = {}
    for _s in [ITargetEventListener]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AvrOneEventListener, name, value)
    __swig_getmethods__ = {}
    for _s in [ITargetEventListener]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, AvrOneEventListener, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def startEventPolling(self): return _pyavrdbg_raw.AvrOneEventListener_startEventPolling(self)
    def stopEventPolling(self): return _pyavrdbg_raw.AvrOneEventListener_stopEventPolling(self)
    def pyRegisterForTargetEvents(self, *args): return _pyavrdbg_raw.AvrOneEventListener_pyRegisterForTargetEvents(self, *args)
AvrOneEventListener_swigregister = _pyavrdbg_raw.AvrOneEventListener_swigregister
AvrOneEventListener_swigregister(AvrOneEventListener)


def avrOneFromToolContext(*args):
  return _pyavrdbg_raw.avrOneFromToolContext(*args)
avrOneFromToolContext = _pyavrdbg_raw.avrOneFromToolContext

def AvrOneEventListenerFromTargetEventListener(*args):
  return _pyavrdbg_raw.AvrOneEventListenerFromTargetEventListener(*args)
AvrOneEventListenerFromTargetEventListener = _pyavrdbg_raw.AvrOneEventListenerFromTargetEventListener
class DragonTool(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DragonTool, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DragonTool, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _pyavrdbg_raw.delete_DragonTool
    __del__ = lambda self : None;
    def startUpgrade(self, *args): return _pyavrdbg_raw.DragonTool_startUpgrade(self, *args)
DragonTool_swigregister = _pyavrdbg_raw.DragonTool_swigregister
DragonTool_swigregister(DragonTool)

class MkIITool(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MkIITool, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MkIITool, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def selfTest(self, *args): return _pyavrdbg_raw.MkIITool_selfTest(self, *args)
    def connect(self, *args): return _pyavrdbg_raw.MkIITool_connect(self, *args)
    def disconnect(self, *args): return _pyavrdbg_raw.MkIITool_disconnect(self, *args)
    def detectDevices(self, *args): return _pyavrdbg_raw.MkIITool_detectDevices(self, *args)
    def startUpgrade(self, *args): return _pyavrdbg_raw.MkIITool_startUpgrade(self, *args)
    def checkFirmware(self, *args): return _pyavrdbg_raw.MkIITool_checkFirmware(self, *args)
    def setBootMode(self, *args): return _pyavrdbg_raw.MkIITool_setBootMode(self, *args)
    def cancel(self): return _pyavrdbg_raw.MkIITool_cancel(self)
    def getTargetVoltage(self): return _pyavrdbg_raw.MkIITool_getTargetVoltage(self)
    def genericCommand(self, *args): return _pyavrdbg_raw.MkIITool_genericCommand(self, *args)
    def getJtagIceMkIIProtocol(self): return _pyavrdbg_raw.MkIITool_getJtagIceMkIIProtocol(self)
    def getJtagIceMkIITransport(self): return _pyavrdbg_raw.MkIITool_getJtagIceMkIITransport(self)
    def getEventListener(self): return _pyavrdbg_raw.MkIITool_getEventListener(self)
    def startResponseAndEventReaderThread(self): return _pyavrdbg_raw.MkIITool_startResponseAndEventReaderThread(self)
    def stopResponseAndEventReaderThread(self): return _pyavrdbg_raw.MkIITool_stopResponseAndEventReaderThread(self)
    def calibrate(self, *args): return _pyavrdbg_raw.MkIITool_calibrate(self, *args)
    __swig_destroy__ = _pyavrdbg_raw.delete_MkIITool
    __del__ = lambda self : None;
MkIITool_swigregister = _pyavrdbg_raw.MkIITool_swigregister
MkIITool_swigregister(MkIITool)
JTAGICEMKIITOOL_MASTER_HARDWARE_REVISION = cvar.JTAGICEMKIITOOL_MASTER_HARDWARE_REVISION
JTAGICEMKIITOOL_SLAVE_HARDWARE_REVISION = cvar.JTAGICEMKIITOOL_SLAVE_HARDWARE_REVISION
JTAGICEMKIITOOL_MASTER_MAJOR_FW_VERSION = cvar.JTAGICEMKIITOOL_MASTER_MAJOR_FW_VERSION
JTAGICEMKIITOOL_MASTER_MINOR_FW_VERSION = cvar.JTAGICEMKIITOOL_MASTER_MINOR_FW_VERSION
JTAGICEMKIITOOL_SLAVE_MAJOR_FW_VERSION = cvar.JTAGICEMKIITOOL_SLAVE_MAJOR_FW_VERSION
JTAGICEMKIITOOL_SLAVE_MINOR_FW_VERSION = cvar.JTAGICEMKIITOOL_SLAVE_MINOR_FW_VERSION
JTAGICEMKIITOOL_MASTER_MAJOR_FW_VERSION_ON_DISK = cvar.JTAGICEMKIITOOL_MASTER_MAJOR_FW_VERSION_ON_DISK
JTAGICEMKIITOOL_MASTER_MINOR_FW_VERSION_ON_DISK = cvar.JTAGICEMKIITOOL_MASTER_MINOR_FW_VERSION_ON_DISK
JTAGICEMKIITOOL_SLAVE_MAJOR_FW_VERSION_ON_DISK = cvar.JTAGICEMKIITOOL_SLAVE_MAJOR_FW_VERSION_ON_DISK
JTAGICEMKIITOOL_SLAVE_MINOR_FW_VERSION_ON_DISK = cvar.JTAGICEMKIITOOL_SLAVE_MINOR_FW_VERSION_ON_DISK

class MkIISignOnData(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MkIISignOnData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MkIISignOnData, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _pyavrdbg_raw.delete_MkIISignOnData
    __del__ = lambda self : None;
    def getSerialNumberAsString(self): return _pyavrdbg_raw.MkIISignOnData_getSerialNumberAsString(self)
    __swig_setmethods__["commID"] = _pyavrdbg_raw.MkIISignOnData_commID_set
    __swig_getmethods__["commID"] = _pyavrdbg_raw.MkIISignOnData_commID_get
    if _newclass:commID = _swig_property(_pyavrdbg_raw.MkIISignOnData_commID_get, _pyavrdbg_raw.MkIISignOnData_commID_set)
    __swig_setmethods__["master_bootloader"] = _pyavrdbg_raw.MkIISignOnData_master_bootloader_set
    __swig_getmethods__["master_bootloader"] = _pyavrdbg_raw.MkIISignOnData_master_bootloader_get
    if _newclass:master_bootloader = _swig_property(_pyavrdbg_raw.MkIISignOnData_master_bootloader_get, _pyavrdbg_raw.MkIISignOnData_master_bootloader_set)
    __swig_setmethods__["master_fw_min"] = _pyavrdbg_raw.MkIISignOnData_master_fw_min_set
    __swig_getmethods__["master_fw_min"] = _pyavrdbg_raw.MkIISignOnData_master_fw_min_get
    if _newclass:master_fw_min = _swig_property(_pyavrdbg_raw.MkIISignOnData_master_fw_min_get, _pyavrdbg_raw.MkIISignOnData_master_fw_min_set)
    __swig_setmethods__["master_fw_maj"] = _pyavrdbg_raw.MkIISignOnData_master_fw_maj_set
    __swig_getmethods__["master_fw_maj"] = _pyavrdbg_raw.MkIISignOnData_master_fw_maj_get
    if _newclass:master_fw_maj = _swig_property(_pyavrdbg_raw.MkIISignOnData_master_fw_maj_get, _pyavrdbg_raw.MkIISignOnData_master_fw_maj_set)
    __swig_setmethods__["master_hw"] = _pyavrdbg_raw.MkIISignOnData_master_hw_set
    __swig_getmethods__["master_hw"] = _pyavrdbg_raw.MkIISignOnData_master_hw_get
    if _newclass:master_hw = _swig_property(_pyavrdbg_raw.MkIISignOnData_master_hw_get, _pyavrdbg_raw.MkIISignOnData_master_hw_set)
    __swig_setmethods__["slave_bootloader"] = _pyavrdbg_raw.MkIISignOnData_slave_bootloader_set
    __swig_getmethods__["slave_bootloader"] = _pyavrdbg_raw.MkIISignOnData_slave_bootloader_get
    if _newclass:slave_bootloader = _swig_property(_pyavrdbg_raw.MkIISignOnData_slave_bootloader_get, _pyavrdbg_raw.MkIISignOnData_slave_bootloader_set)
    __swig_setmethods__["slave_fw_min"] = _pyavrdbg_raw.MkIISignOnData_slave_fw_min_set
    __swig_getmethods__["slave_fw_min"] = _pyavrdbg_raw.MkIISignOnData_slave_fw_min_get
    if _newclass:slave_fw_min = _swig_property(_pyavrdbg_raw.MkIISignOnData_slave_fw_min_get, _pyavrdbg_raw.MkIISignOnData_slave_fw_min_set)
    __swig_setmethods__["slave_fw_maj"] = _pyavrdbg_raw.MkIISignOnData_slave_fw_maj_set
    __swig_getmethods__["slave_fw_maj"] = _pyavrdbg_raw.MkIISignOnData_slave_fw_maj_get
    if _newclass:slave_fw_maj = _swig_property(_pyavrdbg_raw.MkIISignOnData_slave_fw_maj_get, _pyavrdbg_raw.MkIISignOnData_slave_fw_maj_set)
    __swig_setmethods__["slave_hw"] = _pyavrdbg_raw.MkIISignOnData_slave_hw_set
    __swig_getmethods__["slave_hw"] = _pyavrdbg_raw.MkIISignOnData_slave_hw_get
    if _newclass:slave_hw = _swig_property(_pyavrdbg_raw.MkIISignOnData_slave_hw_get, _pyavrdbg_raw.MkIISignOnData_slave_hw_set)
    __swig_setmethods__["serialNumber"] = _pyavrdbg_raw.MkIISignOnData_serialNumber_set
    __swig_getmethods__["serialNumber"] = _pyavrdbg_raw.MkIISignOnData_serialNumber_get
    if _newclass:serialNumber = _swig_property(_pyavrdbg_raw.MkIISignOnData_serialNumber_get, _pyavrdbg_raw.MkIISignOnData_serialNumber_set)
    __swig_setmethods__["deviceID"] = _pyavrdbg_raw.MkIISignOnData_deviceID_set
    __swig_getmethods__["deviceID"] = _pyavrdbg_raw.MkIISignOnData_deviceID_get
    if _newclass:deviceID = _swig_property(_pyavrdbg_raw.MkIISignOnData_deviceID_get, _pyavrdbg_raw.MkIISignOnData_deviceID_set)
MkIISignOnData_swigregister = _pyavrdbg_raw.MkIISignOnData_swigregister
MkIISignOnData_swigregister(MkIISignOnData)

class IMkIIProtocol(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IMkIIProtocol, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IMkIIProtocol, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def getProtocolId(self): return _pyavrdbg_raw.IMkIIProtocol_getProtocolId(self)
    def signOn(self): return _pyavrdbg_raw.IMkIIProtocol_signOn(self)
    def signOff(self): return _pyavrdbg_raw.IMkIIProtocol_signOff(self)
    def setParameter(self, *args): return _pyavrdbg_raw.IMkIIProtocol_setParameter(self, *args)
    def getParameter(self, *args): return _pyavrdbg_raw.IMkIIProtocol_getParameter(self, *args)
    def firmwareUpgrade(self): return _pyavrdbg_raw.IMkIIProtocol_firmwareUpgrade(self)
    __swig_destroy__ = _pyavrdbg_raw.delete_IMkIIProtocol
    __del__ = lambda self : None;
IMkIIProtocol_swigregister = _pyavrdbg_raw.IMkIIProtocol_swigregister
IMkIIProtocol_swigregister(IMkIIProtocol)

class MkIIProtocol(IMkIIProtocol):
    __swig_setmethods__ = {}
    for _s in [IMkIIProtocol]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MkIIProtocol, name, value)
    __swig_getmethods__ = {}
    for _s in [IMkIIProtocol]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, MkIIProtocol, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _pyavrdbg_raw.delete_MkIIProtocol
    __del__ = lambda self : None;
    def getProtocolId(self): return _pyavrdbg_raw.MkIIProtocol_getProtocolId(self)
    def signOn(self): return _pyavrdbg_raw.MkIIProtocol_signOn(self)
    def signOff(self): return _pyavrdbg_raw.MkIIProtocol_signOff(self)
    def setParameter(self, *args): return _pyavrdbg_raw.MkIIProtocol_setParameter(self, *args)
    def getParameter(self, *args): return _pyavrdbg_raw.MkIIProtocol_getParameter(self, *args)
    def firmwareUpgrade(self): return _pyavrdbg_raw.MkIIProtocol_firmwareUpgrade(self)
    def selfTest(self, *args): return _pyavrdbg_raw.MkIIProtocol_selfTest(self, *args)
    def restoreTarget(self): return _pyavrdbg_raw.MkIIProtocol_restoreTarget(self)
    def clearEvents(self): return _pyavrdbg_raw.MkIIProtocol_clearEvents(self)
    def calibrateOscillator(self): return _pyavrdbg_raw.MkIIProtocol_calibrateOscillator(self)
    def enterProgMode(self): return _pyavrdbg_raw.MkIIProtocol_enterProgMode(self)
    def leaveProgMode(self): return _pyavrdbg_raw.MkIIProtocol_leaveProgMode(self)
    def eraseDevice(self): return _pyavrdbg_raw.MkIIProtocol_eraseDevice(self)
    def eraseDeviceXmega(self, *args): return _pyavrdbg_raw.MkIIProtocol_eraseDeviceXmega(self, *args)
    def checkCrc(self, *args): return _pyavrdbg_raw.MkIIProtocol_checkCrc(self, *args)
    def checkCrc2(self, *args): return _pyavrdbg_raw.MkIIProtocol_checkCrc2(self, *args)
    def writeProgramCounter(self, *args): return _pyavrdbg_raw.MkIIProtocol_writeProgramCounter(self, *args)
    def writeMemory(self, *args): return _pyavrdbg_raw.MkIIProtocol_writeMemory(self, *args)
    def readMemory(self, *args): return _pyavrdbg_raw.MkIIProtocol_readMemory(self, *args)
    def readProgramCounter(self): return _pyavrdbg_raw.MkIIProtocol_readProgramCounter(self)
    def erasePageSpm(self, *args): return _pyavrdbg_raw.MkIIProtocol_erasePageSpm(self, *args)
    def setBreakPoint(self, *args): return _pyavrdbg_raw.MkIIProtocol_setBreakPoint(self, *args)
    def clearBreakPoint(self, *args): return _pyavrdbg_raw.MkIIProtocol_clearBreakPoint(self, *args)
    def go(self): return _pyavrdbg_raw.MkIIProtocol_go(self)
    def stop(self, *args): return _pyavrdbg_raw.MkIIProtocol_stop(self, *args)
    def singleStep(self, *args): return _pyavrdbg_raw.MkIIProtocol_singleStep(self, *args)
    def reset(self, *args): return _pyavrdbg_raw.MkIIProtocol_reset(self, *args)
    def runTo(self, *args): return _pyavrdbg_raw.MkIIProtocol_runTo(self, *args)
    def setComplexBreakpoint(self, *args): return _pyavrdbg_raw.MkIIProtocol_setComplexBreakpoint(self, *args)
    def setDeviceData(self, *args): return _pyavrdbg_raw.MkIIProtocol_setDeviceData(self, *args)
MkIIProtocol_swigregister = _pyavrdbg_raw.MkIIProtocol_swigregister
MkIIProtocol_swigregister(MkIIProtocol)

class MkIIEventListener(ITargetEventListener):
    __swig_setmethods__ = {}
    for _s in [ITargetEventListener]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MkIIEventListener, name, value)
    __swig_getmethods__ = {}
    for _s in [ITargetEventListener]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, MkIIEventListener, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _pyavrdbg_raw.delete_MkIIEventListener
    __del__ = lambda self : None;
    def startEventPolling(self): return _pyavrdbg_raw.MkIIEventListener_startEventPolling(self)
    def stopEventPolling(self): return _pyavrdbg_raw.MkIIEventListener_stopEventPolling(self)
    def pyRegisterForTargetEvents(self, *args): return _pyavrdbg_raw.MkIIEventListener_pyRegisterForTargetEvents(self, *args)
MkIIEventListener_swigregister = _pyavrdbg_raw.MkIIEventListener_swigregister
MkIIEventListener_swigregister(MkIIEventListener)


def dragonFromToolContext(*args):
  return _pyavrdbg_raw.dragonFromToolContext(*args)
dragonFromToolContext = _pyavrdbg_raw.dragonFromToolContext

def jtagIceMkIIFromToolContext(*args):
  return _pyavrdbg_raw.jtagIceMkIIFromToolContext(*args)
jtagIceMkIIFromToolContext = _pyavrdbg_raw.jtagIceMkIIFromToolContext

def MkIIEventListenerFromTargetEventListener(*args):
  return _pyavrdbg_raw.MkIIEventListenerFromTargetEventListener(*args)
MkIIEventListenerFromTargetEventListener = _pyavrdbg_raw.MkIIEventListenerFromTargetEventListener
class GenericTool(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GenericTool, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GenericTool, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _pyavrdbg_raw.delete_GenericTool
    __del__ = lambda self : None;
    def getProperties(self): return _pyavrdbg_raw.GenericTool_getProperties(self)
    def setProperties(self, *args): return _pyavrdbg_raw.GenericTool_setProperties(self, *args)
    def getName(self): return _pyavrdbg_raw.GenericTool_getName(self)
    def setPhysicalInterface(self, *args): return _pyavrdbg_raw.GenericTool_setPhysicalInterface(self, *args)
    def detectDevices(self, *args): return _pyavrdbg_raw.GenericTool_detectDevices(self, *args)
    def getPhysicalInterfaces(self): return _pyavrdbg_raw.GenericTool_getPhysicalInterfaces(self)
    def getPhysicalInterface(self, *args): return _pyavrdbg_raw.GenericTool_getPhysicalInterface(self, *args)
    def getDevice(self, *args): return _pyavrdbg_raw.GenericTool_getDevice(self, *args)
    def getToolDevices(self): return _pyavrdbg_raw.GenericTool_getToolDevices(self)
    def genericCommand(self, *args): return _pyavrdbg_raw.GenericTool_genericCommand(self, *args)
    def connect(self, *args): return _pyavrdbg_raw.GenericTool_connect(self, *args)
    def disconnect(self, *args): return _pyavrdbg_raw.GenericTool_disconnect(self, *args)
    def startUpgrade(self, *args): return _pyavrdbg_raw.GenericTool_startUpgrade(self, *args)
    def cancel(self): return _pyavrdbg_raw.GenericTool_cancel(self)
    def getConnection(self): return _pyavrdbg_raw.GenericTool_getConnection(self)
    def selfTest(self, *args): return _pyavrdbg_raw.GenericTool_selfTest(self, *args)
GenericTool_swigregister = _pyavrdbg_raw.GenericTool_swigregister
GenericTool_swigregister(GenericTool)

class StkMcuFwVersion(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StkMcuFwVersion, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StkMcuFwVersion, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
StkMcuFwVersion_swigregister = _pyavrdbg_raw.StkMcuFwVersion_swigregister
StkMcuFwVersion_swigregister(StkMcuFwVersion)
STK_USB_VENDOR_ID = cvar.STK_USB_VENDOR_ID
STK_USB_IN_ENDPOINT = cvar.STK_USB_IN_ENDPOINT
STK_USB_OUT_ENDPOINT = cvar.STK_USB_OUT_ENDPOINT
STKTOOL_TARGET_FREQUENCY = cvar.STKTOOL_TARGET_FREQUENCY

class StkTool(GenericTool):
    __swig_setmethods__ = {}
    for _s in [GenericTool]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StkTool, name, value)
    __swig_getmethods__ = {}
    for _s in [GenericTool]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, StkTool, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _pyavrdbg_raw.delete_StkTool
    __del__ = lambda self : None;
    def connect(self, *args): return _pyavrdbg_raw.StkTool_connect(self, *args)
    def getTargetVoltage(self): return _pyavrdbg_raw.StkTool_getTargetVoltage(self)
    def startUpgrade(self, *args): return _pyavrdbg_raw.StkTool_startUpgrade(self, *args)
    def checkFirmware(self, *args): return _pyavrdbg_raw.StkTool_checkFirmware(self, *args)
    def setBootMode(self, *args): return _pyavrdbg_raw.StkTool_setBootMode(self, *args)
    def calibrate(self, *args): return _pyavrdbg_raw.StkTool_calibrate(self, *args)
    def getHwVersion(self): return _pyavrdbg_raw.StkTool_getHwVersion(self)
    def getMcuFwVersion(self): return _pyavrdbg_raw.StkTool_getMcuFwVersion(self)
    def getTransport(self): return _pyavrdbg_raw.StkTool_getTransport(self)
    def getStkProtocol(self): return _pyavrdbg_raw.StkTool_getStkProtocol(self)
    def getIspProtocol(self): return _pyavrdbg_raw.StkTool_getIspProtocol(self)
    def getHvspProtocol(self): return _pyavrdbg_raw.StkTool_getHvspProtocol(self)
    def getHvppProtocol(self): return _pyavrdbg_raw.StkTool_getHvppProtocol(self)
    def getXprogProtocol(self): return _pyavrdbg_raw.StkTool_getXprogProtocol(self)
    def getMegaJtagProtocol(self): return _pyavrdbg_raw.StkTool_getMegaJtagProtocol(self)
    def getBootProtocol(self): return _pyavrdbg_raw.StkTool_getBootProtocol(self)
StkTool_swigregister = _pyavrdbg_raw.StkTool_swigregister
StkTool_swigregister(StkTool)

class Stk500Tool(StkTool):
    __swig_setmethods__ = {}
    for _s in [StkTool]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Stk500Tool, name, value)
    __swig_getmethods__ = {}
    for _s in [StkTool]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Stk500Tool, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _pyavrdbg_raw.delete_Stk500Tool
    __del__ = lambda self : None;
    def setTargetVoltage(self, *args): return _pyavrdbg_raw.Stk500Tool_setTargetVoltage(self, *args)
    def getArefVoltage(self): return _pyavrdbg_raw.Stk500Tool_getArefVoltage(self)
    def setArefVoltage(self, *args): return _pyavrdbg_raw.Stk500Tool_setArefVoltage(self, *args)
    def getClockGenFrequency(self): return _pyavrdbg_raw.Stk500Tool_getClockGenFrequency(self)
    def setClockGenFrequency(self, *args): return _pyavrdbg_raw.Stk500Tool_setClockGenFrequency(self, *args)
Stk500Tool_swigregister = _pyavrdbg_raw.Stk500Tool_swigregister
Stk500Tool_swigregister(Stk500Tool)
STK500TOOL_HARDWARE_REVISION = cvar.STK500TOOL_HARDWARE_REVISION
STK500TOOL_MAJOR_FIRMWARE_VERSION = cvar.STK500TOOL_MAJOR_FIRMWARE_VERSION
STK500TOOL_MINOR_FIRMWARE_VERSION = cvar.STK500TOOL_MINOR_FIRMWARE_VERSION
STK500TOOL_AREF_VOLTAGE = cvar.STK500TOOL_AREF_VOLTAGE
STK500TOOL_TARGET_VOLTAGE = cvar.STK500TOOL_TARGET_VOLTAGE
STK500TOOL_CLOCK_FREQUENCY = cvar.STK500TOOL_CLOCK_FREQUENCY

class Stk600CardStackProperties(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Stk600CardStackProperties, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Stk600CardStackProperties, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_setmethods__["socketCardId"] = _pyavrdbg_raw.Stk600CardStackProperties_socketCardId_set
    __swig_getmethods__["socketCardId"] = _pyavrdbg_raw.Stk600CardStackProperties_socketCardId_get
    if _newclass:socketCardId = _swig_property(_pyavrdbg_raw.Stk600CardStackProperties_socketCardId_get, _pyavrdbg_raw.Stk600CardStackProperties_socketCardId_set)
    __swig_setmethods__["routingCardId"] = _pyavrdbg_raw.Stk600CardStackProperties_routingCardId_set
    __swig_getmethods__["routingCardId"] = _pyavrdbg_raw.Stk600CardStackProperties_routingCardId_get
    if _newclass:routingCardId = _swig_property(_pyavrdbg_raw.Stk600CardStackProperties_routingCardId_get, _pyavrdbg_raw.Stk600CardStackProperties_routingCardId_set)
    __swig_setmethods__["expansionCardId"] = _pyavrdbg_raw.Stk600CardStackProperties_expansionCardId_set
    __swig_getmethods__["expansionCardId"] = _pyavrdbg_raw.Stk600CardStackProperties_expansionCardId_get
    if _newclass:expansionCardId = _swig_property(_pyavrdbg_raw.Stk600CardStackProperties_expansionCardId_get, _pyavrdbg_raw.Stk600CardStackProperties_expansionCardId_set)
    __swig_destroy__ = _pyavrdbg_raw.delete_Stk600CardStackProperties
    __del__ = lambda self : None;
Stk600CardStackProperties_swigregister = _pyavrdbg_raw.Stk600CardStackProperties_swigregister
Stk600CardStackProperties_swigregister(Stk600CardStackProperties)
STK600TOOL_HARDWARE_REVISION = cvar.STK600TOOL_HARDWARE_REVISION
STK600TOOL_MAJOR_FIRMWARE_VERSION = cvar.STK600TOOL_MAJOR_FIRMWARE_VERSION
STK600TOOL_MINOR_FIRMWARE_VERSION = cvar.STK600TOOL_MINOR_FIRMWARE_VERSION
STK600TOOL_SLAVE1_MAJOR_FIRMWARE_VERSION = cvar.STK600TOOL_SLAVE1_MAJOR_FIRMWARE_VERSION
STK600TOOL_SLAVE1_MINOR_FIRMWARE_VERSION = cvar.STK600TOOL_SLAVE1_MINOR_FIRMWARE_VERSION
STK600TOOL_SLAVE2_MAJOR_FIRMWARE_VERSION = cvar.STK600TOOL_SLAVE2_MAJOR_FIRMWARE_VERSION
STK600TOOL_SLAVE2_MINOR_FIRMWARE_VERSION = cvar.STK600TOOL_SLAVE2_MINOR_FIRMWARE_VERSION
STK600TOOL_MAJOR_FIRMWARE_VERSION_ON_DISK = cvar.STK600TOOL_MAJOR_FIRMWARE_VERSION_ON_DISK
STK600TOOL_MINOR_FIRMWARE_VERSION_ON_DISK = cvar.STK600TOOL_MINOR_FIRMWARE_VERSION_ON_DISK
STK600TOOL_SLAVE1_MAJOR_FIRMWARE_VERSION_ON_DISK = cvar.STK600TOOL_SLAVE1_MAJOR_FIRMWARE_VERSION_ON_DISK
STK600TOOL_SLAVE1_MINOR_FIRMWARE_VERSION_ON_DISK = cvar.STK600TOOL_SLAVE1_MINOR_FIRMWARE_VERSION_ON_DISK
STK600TOOL_SLAVE2_MAJOR_FIRMWARE_VERSION_ON_DISK = cvar.STK600TOOL_SLAVE2_MAJOR_FIRMWARE_VERSION_ON_DISK
STK600TOOL_SLAVE2_MINOR_FIRMWARE_VERSION_ON_DISK = cvar.STK600TOOL_SLAVE2_MINOR_FIRMWARE_VERSION_ON_DISK
STK600TOOL_AREF0_VOLTAGE = cvar.STK600TOOL_AREF0_VOLTAGE
STK600TOOL_AREF1_VOLTAGE = cvar.STK600TOOL_AREF1_VOLTAGE
STK600TOOL_VTG_SETPOINT = cvar.STK600TOOL_VTG_SETPOINT
STK600TOOL_AREF0_SETPOINT = cvar.STK600TOOL_AREF0_SETPOINT
STK600TOOL_AREF1_SETPOINT = cvar.STK600TOOL_AREF1_SETPOINT
STK600TOOL_CLOCK_FREQUENCY = cvar.STK600TOOL_CLOCK_FREQUENCY
STK600TOOL_SOCKETCARD_ID = cvar.STK600TOOL_SOCKETCARD_ID
STK600TOOL_ROUTINGCARD_ID = cvar.STK600TOOL_ROUTINGCARD_ID
STK600TOOL_ROUTINGCARD_TABLE_REV = cvar.STK600TOOL_ROUTINGCARD_TABLE_REV
STK600TOOL_EXPANSIONCARD_ID = cvar.STK600TOOL_EXPANSIONCARD_ID
STK600TOOL_EXPANSIONCARD_TABLE_REV = cvar.STK600TOOL_EXPANSIONCARD_TABLE_REV
STK600TOOL_BOARD_ID_STATUS = cvar.STK600TOOL_BOARD_ID_STATUS

class Stk600CardStackInfo(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Stk600CardStackInfo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Stk600CardStackInfo, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_setmethods__["routingCardTableRev"] = _pyavrdbg_raw.Stk600CardStackInfo_routingCardTableRev_set
    __swig_getmethods__["routingCardTableRev"] = _pyavrdbg_raw.Stk600CardStackInfo_routingCardTableRev_get
    if _newclass:routingCardTableRev = _swig_property(_pyavrdbg_raw.Stk600CardStackInfo_routingCardTableRev_get, _pyavrdbg_raw.Stk600CardStackInfo_routingCardTableRev_set)
    __swig_setmethods__["expansionCardTableRev"] = _pyavrdbg_raw.Stk600CardStackInfo_expansionCardTableRev_set
    __swig_getmethods__["expansionCardTableRev"] = _pyavrdbg_raw.Stk600CardStackInfo_expansionCardTableRev_get
    if _newclass:expansionCardTableRev = _swig_property(_pyavrdbg_raw.Stk600CardStackInfo_expansionCardTableRev_get, _pyavrdbg_raw.Stk600CardStackInfo_expansionCardTableRev_set)
    __swig_setmethods__["routingCardTable"] = _pyavrdbg_raw.Stk600CardStackInfo_routingCardTable_set
    __swig_getmethods__["routingCardTable"] = _pyavrdbg_raw.Stk600CardStackInfo_routingCardTable_get
    if _newclass:routingCardTable = _swig_property(_pyavrdbg_raw.Stk600CardStackInfo_routingCardTable_get, _pyavrdbg_raw.Stk600CardStackInfo_routingCardTable_set)
    __swig_setmethods__["expansionCardTable"] = _pyavrdbg_raw.Stk600CardStackInfo_expansionCardTable_set
    __swig_getmethods__["expansionCardTable"] = _pyavrdbg_raw.Stk600CardStackInfo_expansionCardTable_get
    if _newclass:expansionCardTable = _swig_property(_pyavrdbg_raw.Stk600CardStackInfo_expansionCardTable_get, _pyavrdbg_raw.Stk600CardStackInfo_expansionCardTable_set)
    __swig_destroy__ = _pyavrdbg_raw.delete_Stk600CardStackInfo
    __del__ = lambda self : None;
Stk600CardStackInfo_swigregister = _pyavrdbg_raw.Stk600CardStackInfo_swigregister
Stk600CardStackInfo_swigregister(Stk600CardStackInfo)

class Stk600Tool(StkTool):
    __swig_setmethods__ = {}
    for _s in [StkTool]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Stk600Tool, name, value)
    __swig_getmethods__ = {}
    for _s in [StkTool]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Stk600Tool, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _pyavrdbg_raw.delete_Stk600Tool
    __del__ = lambda self : None;
    def connect(self, *args): return _pyavrdbg_raw.Stk600Tool_connect(self, *args)
    def startUpgrade(self, *args): return _pyavrdbg_raw.Stk600Tool_startUpgrade(self, *args)
    def getSlave1FwVersion(self): return _pyavrdbg_raw.Stk600Tool_getSlave1FwVersion(self)
    def getSlave2FwVersion(self): return _pyavrdbg_raw.Stk600Tool_getSlave2FwVersion(self)
    def getTargetSetPointVoltage(self): return _pyavrdbg_raw.Stk600Tool_getTargetSetPointVoltage(self)
    def getAref0(self): return _pyavrdbg_raw.Stk600Tool_getAref0(self)
    def getAref1(self): return _pyavrdbg_raw.Stk600Tool_getAref1(self)
    def getAref0SetPoint(self): return _pyavrdbg_raw.Stk600Tool_getAref0SetPoint(self)
    def getAref1SetPoint(self): return _pyavrdbg_raw.Stk600Tool_getAref1SetPoint(self)
    def setTargetSetPointVoltage(self, *args): return _pyavrdbg_raw.Stk600Tool_setTargetSetPointVoltage(self, *args)
    def setAref0SetPoint(self, *args): return _pyavrdbg_raw.Stk600Tool_setAref0SetPoint(self, *args)
    def setAref1SetPoint(self, *args): return _pyavrdbg_raw.Stk600Tool_setAref1SetPoint(self, *args)
    def getClockGenFrequency(self): return _pyavrdbg_raw.Stk600Tool_getClockGenFrequency(self)
    def setClockGenFrequency(self, *args): return _pyavrdbg_raw.Stk600Tool_setClockGenFrequency(self, *args)
    def getCardStackProperties(self): return _pyavrdbg_raw.Stk600Tool_getCardStackProperties(self)
    def upgradeCardStackInfo(self): return _pyavrdbg_raw.Stk600Tool_upgradeCardStackInfo(self)
Stk600Tool_swigregister = _pyavrdbg_raw.Stk600Tool_swigregister
Stk600Tool_swigregister(Stk600Tool)

class IspMk2Tool(StkTool):
    __swig_setmethods__ = {}
    for _s in [StkTool]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IspMk2Tool, name, value)
    __swig_getmethods__ = {}
    for _s in [StkTool]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, IspMk2Tool, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _pyavrdbg_raw.delete_IspMk2Tool
    __del__ = lambda self : None;
    def connect(self, *args): return _pyavrdbg_raw.IspMk2Tool_connect(self, *args)
    def startUpgrade(self, *args): return _pyavrdbg_raw.IspMk2Tool_startUpgrade(self, *args)
    def calibrate(self, *args): return _pyavrdbg_raw.IspMk2Tool_calibrate(self, *args)
IspMk2Tool_swigregister = _pyavrdbg_raw.IspMk2Tool_swigregister
IspMk2Tool_swigregister(IspMk2Tool)
ISPMK2TOOL_HARDWARE_REVISION = cvar.ISPMK2TOOL_HARDWARE_REVISION
ISPMK2TOOL_MAJOR_FIRMWARE_VERSION = cvar.ISPMK2TOOL_MAJOR_FIRMWARE_VERSION
ISPMK2TOOL_MINOR_FIRMWARE_VERSION = cvar.ISPMK2TOOL_MINOR_FIRMWARE_VERSION
ISPMK2TOOL_MAJOR_FIRMWARE_VERSION_ON_DISK = cvar.ISPMK2TOOL_MAJOR_FIRMWARE_VERSION_ON_DISK
ISPMK2TOOL_MINOR_FIRMWARE_VERSION_ON_DISK = cvar.ISPMK2TOOL_MINOR_FIRMWARE_VERSION_ON_DISK

class Qt600Tool(StkTool):
    __swig_setmethods__ = {}
    for _s in [StkTool]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Qt600Tool, name, value)
    __swig_getmethods__ = {}
    for _s in [StkTool]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Qt600Tool, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _pyavrdbg_raw.delete_Qt600Tool
    __del__ = lambda self : None;
    def setTargetVoltage(self, *args): return _pyavrdbg_raw.Qt600Tool_setTargetVoltage(self, *args)
    def startUpgrade(self, *args): return _pyavrdbg_raw.Qt600Tool_startUpgrade(self, *args)
    def calibrate(self, *args): return _pyavrdbg_raw.Qt600Tool_calibrate(self, *args)
Qt600Tool_swigregister = _pyavrdbg_raw.Qt600Tool_swigregister
Qt600Tool_swigregister(Qt600Tool)
QT600TOOL_HARDWARE_REVISION = cvar.QT600TOOL_HARDWARE_REVISION
QT600TOOL_MAJOR_FIRMWARE_VERSION = cvar.QT600TOOL_MAJOR_FIRMWARE_VERSION
QT600TOOL_MINOR_FIRMWARE_VERSION = cvar.QT600TOOL_MINOR_FIRMWARE_VERSION
QT600TOOL_MAJOR_FIRMWARE_VERSION_ON_DISK = cvar.QT600TOOL_MAJOR_FIRMWARE_VERSION_ON_DISK
QT600TOOL_MINOR_FIRMWARE_VERSION_ON_DISK = cvar.QT600TOOL_MINOR_FIRMWARE_VERSION_ON_DISK
QT600TOOL_VTARGET = cvar.QT600TOOL_VTARGET

class Stk600RoutingCard(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Stk600RoutingCard, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Stk600RoutingCard, name)
    __repr__ = _swig_repr
    __swig_setmethods__["routingCardId"] = _pyavrdbg_raw.Stk600RoutingCard_routingCardId_set
    __swig_getmethods__["routingCardId"] = _pyavrdbg_raw.Stk600RoutingCard_routingCardId_get
    if _newclass:routingCardId = _swig_property(_pyavrdbg_raw.Stk600RoutingCard_routingCardId_get, _pyavrdbg_raw.Stk600RoutingCard_routingCardId_set)
    __swig_setmethods__["routingCardName"] = _pyavrdbg_raw.Stk600RoutingCard_routingCardName_set
    __swig_getmethods__["routingCardName"] = _pyavrdbg_raw.Stk600RoutingCard_routingCardName_get
    if _newclass:routingCardName = _swig_property(_pyavrdbg_raw.Stk600RoutingCard_routingCardName_get, _pyavrdbg_raw.Stk600RoutingCard_routingCardName_set)
    __swig_setmethods__["socketCardId"] = _pyavrdbg_raw.Stk600RoutingCard_socketCardId_set
    __swig_getmethods__["socketCardId"] = _pyavrdbg_raw.Stk600RoutingCard_socketCardId_get
    if _newclass:socketCardId = _swig_property(_pyavrdbg_raw.Stk600RoutingCard_socketCardId_get, _pyavrdbg_raw.Stk600RoutingCard_socketCardId_set)
    __swig_setmethods__["socketCardName"] = _pyavrdbg_raw.Stk600RoutingCard_socketCardName_set
    __swig_getmethods__["socketCardName"] = _pyavrdbg_raw.Stk600RoutingCard_socketCardName_get
    if _newclass:socketCardName = _swig_property(_pyavrdbg_raw.Stk600RoutingCard_socketCardName_get, _pyavrdbg_raw.Stk600RoutingCard_socketCardName_set)
    __swig_setmethods__["maxDesiVoltage"] = _pyavrdbg_raw.Stk600RoutingCard_maxDesiVoltage_set
    __swig_getmethods__["maxDesiVoltage"] = _pyavrdbg_raw.Stk600RoutingCard_maxDesiVoltage_get
    if _newclass:maxDesiVoltage = _swig_property(_pyavrdbg_raw.Stk600RoutingCard_maxDesiVoltage_get, _pyavrdbg_raw.Stk600RoutingCard_maxDesiVoltage_set)
    __swig_setmethods__["targetNames"] = _pyavrdbg_raw.Stk600RoutingCard_targetNames_set
    __swig_getmethods__["targetNames"] = _pyavrdbg_raw.Stk600RoutingCard_targetNames_get
    if _newclass:targetNames = _swig_property(_pyavrdbg_raw.Stk600RoutingCard_targetNames_get, _pyavrdbg_raw.Stk600RoutingCard_targetNames_set)
    def __init__(self): 
        this = _pyavrdbg_raw.new_Stk600RoutingCard()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyavrdbg_raw.delete_Stk600RoutingCard
    __del__ = lambda self : None;
Stk600RoutingCard_swigregister = _pyavrdbg_raw.Stk600RoutingCard_swigregister
Stk600RoutingCard_swigregister(Stk600RoutingCard)

class Stk600ExpansionCard(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Stk600ExpansionCard, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Stk600ExpansionCard, name)
    __repr__ = _swig_repr
    __swig_setmethods__["id"] = _pyavrdbg_raw.Stk600ExpansionCard_id_set
    __swig_getmethods__["id"] = _pyavrdbg_raw.Stk600ExpansionCard_id_get
    if _newclass:id = _swig_property(_pyavrdbg_raw.Stk600ExpansionCard_id_get, _pyavrdbg_raw.Stk600ExpansionCard_id_set)
    __swig_setmethods__["name"] = _pyavrdbg_raw.Stk600ExpansionCard_name_set
    __swig_getmethods__["name"] = _pyavrdbg_raw.Stk600ExpansionCard_name_get
    if _newclass:name = _swig_property(_pyavrdbg_raw.Stk600ExpansionCard_name_get, _pyavrdbg_raw.Stk600ExpansionCard_name_set)
    __swig_setmethods__["maxDesiVoltage"] = _pyavrdbg_raw.Stk600ExpansionCard_maxDesiVoltage_set
    __swig_getmethods__["maxDesiVoltage"] = _pyavrdbg_raw.Stk600ExpansionCard_maxDesiVoltage_get
    if _newclass:maxDesiVoltage = _swig_property(_pyavrdbg_raw.Stk600ExpansionCard_maxDesiVoltage_get, _pyavrdbg_raw.Stk600ExpansionCard_maxDesiVoltage_set)
    def __init__(self): 
        this = _pyavrdbg_raw.new_Stk600ExpansionCard()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyavrdbg_raw.delete_Stk600ExpansionCard
    __del__ = lambda self : None;
Stk600ExpansionCard_swigregister = _pyavrdbg_raw.Stk600ExpansionCard_swigregister
Stk600ExpansionCard_swigregister(Stk600ExpansionCard)

class IStkProtocol(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IStkProtocol, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IStkProtocol, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def signOn(self): return _pyavrdbg_raw.IStkProtocol_signOn(self)
    def getParameter(self, *args): return _pyavrdbg_raw.IStkProtocol_getParameter(self, *args)
    def getSingleByteParameter(self, *args): return _pyavrdbg_raw.IStkProtocol_getSingleByteParameter(self, *args)
    def getTwoByteParameter(self, *args): return _pyavrdbg_raw.IStkProtocol_getTwoByteParameter(self, *args)
    def setParameter(self, *args): return _pyavrdbg_raw.IStkProtocol_setParameter(self, *args)
    def setSingleByteParameter(self, *args): return _pyavrdbg_raw.IStkProtocol_setSingleByteParameter(self, *args)
    def setTwoByteParameter(self, *args): return _pyavrdbg_raw.IStkProtocol_setTwoByteParameter(self, *args)
    def resetProtection(self): return _pyavrdbg_raw.IStkProtocol_resetProtection(self)
    def doOscCal(self): return _pyavrdbg_raw.IStkProtocol_doOscCal(self)
    def loadAddress(self, *args): return _pyavrdbg_raw.IStkProtocol_loadAddress(self, *args)
    def checkTargetConnection(self, *args): return _pyavrdbg_raw.IStkProtocol_checkTargetConnection(self, *args)
    def enterProgModeJtagAvr32(self): return _pyavrdbg_raw.IStkProtocol_enterProgModeJtagAvr32(self)
    def leaveProgModeJtagAvr32(self): return _pyavrdbg_raw.IStkProtocol_leaveProgModeJtagAvr32(self)
    def enterProgModeAwireAvr32(self): return _pyavrdbg_raw.IStkProtocol_enterProgModeAwireAvr32(self)
    def leaveProgModeAwireAvr32(self): return _pyavrdbg_raw.IStkProtocol_leaveProgModeAwireAvr32(self)
    def firmwareUpgrade(self): return _pyavrdbg_raw.IStkProtocol_firmwareUpgrade(self)
    def downloadRoutingCardTable(self, *args): return _pyavrdbg_raw.IStkProtocol_downloadRoutingCardTable(self, *args)
    def downloadExpansionCardTable(self, *args): return _pyavrdbg_raw.IStkProtocol_downloadExpansionCardTable(self, *args)
    def setProgModeXprog(self, *args): return _pyavrdbg_raw.IStkProtocol_setProgModeXprog(self, *args)
    def xprogCommand(self, *args): return _pyavrdbg_raw.IStkProtocol_xprogCommand(self, *args)
    def megaJtagCommand(self, *args): return _pyavrdbg_raw.IStkProtocol_megaJtagCommand(self, *args)
    def genericAvr32Command(self, *args): return _pyavrdbg_raw.IStkProtocol_genericAvr32Command(self, *args)
    def setControlStack(self, *args): return _pyavrdbg_raw.IStkProtocol_setControlStack(self, *args)
    __swig_destroy__ = _pyavrdbg_raw.delete_IStkProtocol
    __del__ = lambda self : None;
IStkProtocol_swigregister = _pyavrdbg_raw.IStkProtocol_swigregister
IStkProtocol_swigregister(IStkProtocol)

class StkProtocol(IStkProtocol):
    __swig_setmethods__ = {}
    for _s in [IStkProtocol]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StkProtocol, name, value)
    __swig_getmethods__ = {}
    for _s in [IStkProtocol]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, StkProtocol, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _pyavrdbg_raw.delete_StkProtocol
    __del__ = lambda self : None;
    def signOn(self): return _pyavrdbg_raw.StkProtocol_signOn(self)
    def getParameter(self, *args): return _pyavrdbg_raw.StkProtocol_getParameter(self, *args)
    def getSingleByteParameter(self, *args): return _pyavrdbg_raw.StkProtocol_getSingleByteParameter(self, *args)
    def getTwoByteParameter(self, *args): return _pyavrdbg_raw.StkProtocol_getTwoByteParameter(self, *args)
    def setParameter(self, *args): return _pyavrdbg_raw.StkProtocol_setParameter(self, *args)
    def setSingleByteParameter(self, *args): return _pyavrdbg_raw.StkProtocol_setSingleByteParameter(self, *args)
    def setTwoByteParameter(self, *args): return _pyavrdbg_raw.StkProtocol_setTwoByteParameter(self, *args)
    def resetProtection(self): return _pyavrdbg_raw.StkProtocol_resetProtection(self)
    def doOscCal(self): return _pyavrdbg_raw.StkProtocol_doOscCal(self)
    def loadAddress(self, *args): return _pyavrdbg_raw.StkProtocol_loadAddress(self, *args)
    def checkTargetConnection(self, *args): return _pyavrdbg_raw.StkProtocol_checkTargetConnection(self, *args)
    def enterProgModeJtagAvr32(self): return _pyavrdbg_raw.StkProtocol_enterProgModeJtagAvr32(self)
    def leaveProgModeJtagAvr32(self): return _pyavrdbg_raw.StkProtocol_leaveProgModeJtagAvr32(self)
    def enterProgModeAwireAvr32(self): return _pyavrdbg_raw.StkProtocol_enterProgModeAwireAvr32(self)
    def leaveProgModeAwireAvr32(self): return _pyavrdbg_raw.StkProtocol_leaveProgModeAwireAvr32(self)
    def firmwareUpgrade(self): return _pyavrdbg_raw.StkProtocol_firmwareUpgrade(self)
    def downloadRoutingCardTable(self, *args): return _pyavrdbg_raw.StkProtocol_downloadRoutingCardTable(self, *args)
    def downloadExpansionCardTable(self, *args): return _pyavrdbg_raw.StkProtocol_downloadExpansionCardTable(self, *args)
    def setProgModeXprog(self, *args): return _pyavrdbg_raw.StkProtocol_setProgModeXprog(self, *args)
    def xprogCommand(self, *args): return _pyavrdbg_raw.StkProtocol_xprogCommand(self, *args)
    def megaJtagCommand(self, *args): return _pyavrdbg_raw.StkProtocol_megaJtagCommand(self, *args)
    def genericAvr32Command(self, *args): return _pyavrdbg_raw.StkProtocol_genericAvr32Command(self, *args)
    def setControlStack(self, *args): return _pyavrdbg_raw.StkProtocol_setControlStack(self, *args)
    def checkTargetConnectionHelper(self): return _pyavrdbg_raw.StkProtocol_checkTargetConnectionHelper(self)
StkProtocol_swigregister = _pyavrdbg_raw.StkProtocol_swigregister
StkProtocol_swigregister(StkProtocol)

class IspProtocol(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IspProtocol, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IspProtocol, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _pyavrdbg_raw.delete_IspProtocol
    __del__ = lambda self : None;
    def ispEnterProgMode(self, *args): return _pyavrdbg_raw.IspProtocol_ispEnterProgMode(self, *args)
    def ispLeaveProgMode(self, *args): return _pyavrdbg_raw.IspProtocol_ispLeaveProgMode(self, *args)
    def ispChipErase(self, *args): return _pyavrdbg_raw.IspProtocol_ispChipErase(self, *args)
    def ispProgramMem(self, *args): return _pyavrdbg_raw.IspProtocol_ispProgramMem(self, *args)
    def ispReadMem(self, *args): return _pyavrdbg_raw.IspProtocol_ispReadMem(self, *args)
    def ispProgram(self, *args): return _pyavrdbg_raw.IspProtocol_ispProgram(self, *args)
    def ispRead(self, *args): return _pyavrdbg_raw.IspProtocol_ispRead(self, *args)
    def spiMulti(self, *args): return _pyavrdbg_raw.IspProtocol_spiMulti(self, *args)
    def setBaud(self, *args): return _pyavrdbg_raw.IspProtocol_setBaud(self, *args)
    def getBaud(self, *args): return _pyavrdbg_raw.IspProtocol_getBaud(self, *args)
    def setParameter(self, *args): return _pyavrdbg_raw.IspProtocol_setParameter(self, *args)
    def getParameter(self, *args): return _pyavrdbg_raw.IspProtocol_getParameter(self, *args)
IspProtocol_swigregister = _pyavrdbg_raw.IspProtocol_swigregister
IspProtocol_swigregister(IspProtocol)

class IspProtocolFactory(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IspProtocolFactory, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IspProtocolFactory, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def getCategoryName(self): return _pyavrdbg_raw.IspProtocolFactory_getCategoryName(self)
    def getClassName(self): return _pyavrdbg_raw.IspProtocolFactory_getClassName(self)
    def create(self, *args): return _pyavrdbg_raw.IspProtocolFactory_create(self, *args)
    __swig_destroy__ = _pyavrdbg_raw.delete_IspProtocolFactory
    __del__ = lambda self : None;
IspProtocolFactory_swigregister = _pyavrdbg_raw.IspProtocolFactory_swigregister
IspProtocolFactory_swigregister(IspProtocolFactory)

class XprogProtocol(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, XprogProtocol, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, XprogProtocol, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _pyavrdbg_raw.delete_XprogProtocol
    __del__ = lambda self : None;
    def xprogEnterProgMode(self): return _pyavrdbg_raw.XprogProtocol_xprogEnterProgMode(self)
    def xprogLeaveProgMode(self): return _pyavrdbg_raw.XprogProtocol_xprogLeaveProgMode(self)
    def xprogSetParams(self, *args): return _pyavrdbg_raw.XprogProtocol_xprogSetParams(self, *args)
    def xprogErase(self, *args): return _pyavrdbg_raw.XprogProtocol_xprogErase(self, *args)
    def xprogProgramMem(self, *args): return _pyavrdbg_raw.XprogProtocol_xprogProgramMem(self, *args)
    def xprogReadMem(self, *args): return _pyavrdbg_raw.XprogProtocol_xprogReadMem(self, *args)
    def xprogReadCrc(self, *args): return _pyavrdbg_raw.XprogProtocol_xprogReadCrc(self, *args)
    def xprogReadCrc2(self, *args): return _pyavrdbg_raw.XprogProtocol_xprogReadCrc2(self, *args)
XprogProtocol_swigregister = _pyavrdbg_raw.XprogProtocol_swigregister
XprogProtocol_swigregister(XprogProtocol)

class XprogProtocolFactory(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, XprogProtocolFactory, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, XprogProtocolFactory, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def getCategoryName(self): return _pyavrdbg_raw.XprogProtocolFactory_getCategoryName(self)
    def getClassName(self): return _pyavrdbg_raw.XprogProtocolFactory_getClassName(self)
    def create(self, *args): return _pyavrdbg_raw.XprogProtocolFactory_create(self, *args)
    __swig_destroy__ = _pyavrdbg_raw.delete_XprogProtocolFactory
    __del__ = lambda self : None;
XprogProtocolFactory_swigregister = _pyavrdbg_raw.XprogProtocolFactory_swigregister
XprogProtocolFactory_swigregister(XprogProtocolFactory)


def stkFromToolContext(*args):
  return _pyavrdbg_raw.stkFromToolContext(*args)
stkFromToolContext = _pyavrdbg_raw.stkFromToolContext

def stk500FromToolContext(*args):
  return _pyavrdbg_raw.stk500FromToolContext(*args)
stk500FromToolContext = _pyavrdbg_raw.stk500FromToolContext

def stk600FromToolContext(*args):
  return _pyavrdbg_raw.stk600FromToolContext(*args)
stk600FromToolContext = _pyavrdbg_raw.stk600FromToolContext

def ispMk2FromToolContext(*args):
  return _pyavrdbg_raw.ispMk2FromToolContext(*args)
ispMk2FromToolContext = _pyavrdbg_raw.ispMk2FromToolContext

def qt600FromToolContext(*args):
  return _pyavrdbg_raw.qt600FromToolContext(*args)
qt600FromToolContext = _pyavrdbg_raw.qt600FromToolContext


